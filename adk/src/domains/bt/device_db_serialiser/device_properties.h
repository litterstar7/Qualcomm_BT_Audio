/*!
\copyright  Copyright (c) 2019 - 2020 Qualcomm Technologies International, Ltd.\n
            All Rights Reserved.\n
            Qualcomm Technologies International, Ltd. Confidential and Proprietary.
\file
\brief	    Defines the device properties to be used by the Device Database API.

            TODO: This file will probably be an autogenerated file, as it may need to compile
            device properties from the Application, Serivces and Domains. There will
            need to be a build time system for handling this requirement.

            In the interim, a static file is to be used for the device properties enum.
*/

#ifndef DEVICE_PROPERTIES_H_
#define DEVICE_PROPERTIES_H_

#include <bdaddr.h>
#include <csrtypes.h>
#include <device.h>

/*! \brief device properties

    \note Alignment of this enum must be maintained when DFU is applied.
          Do not remove or replace properties in this enum. Deprecated
          properties may be renamed.

    \note The device_property_reserved_1 and device_property_reserved_2 entries exist for backward compatibility and
        should not normally be used. The device_property_supported_profiles and device_property_last_connected_profiles
        entries should be used instead. The replacements have been added on going from uint8 to uin16 profile values,
        and had to be added to the end. This allows for upgrade from the old versions to the new on a DFU.

 */
typedef enum
{
    device_property_bdaddr = 0,
    device_property_a2dp_volume,
    device_property_hfp_profile,
    device_property_type,
    device_property_link_mode,
    device_property_reserved_1,
    device_property_reserved_2,
    device_property_connected_profiles,
    device_property_reserved,
    device_property_flags,
    device_property_sco_fwd_features,
    device_property_mru,
    device_property_battery_server_config_l,
    device_property_battery_server_config_r,
    device_property_gatt_server_config,
    device_property_gatt_server_services_changed,
    device_property_profiles_connect_order,
    device_property_profiles_disconnect_order,
    device_property_profile_request_index,
    device_property_fast_pair_account_key_index,
    device_property_fast_pair_account_keys,
    device_property_voice_assistant,
    device_property_device_test_service,
    device_property_supported_profiles,
    device_property_last_connected_profiles,
    device_property_av_instance,
    device_property_audio_source,
    device_property_blacklist,

    device_property_max_num

} earbud_device_property_t;

bdaddr DeviceProperties_GetBdAddr(device_t device);

void DeviceProperties_SetBdAddr(device_t device, bdaddr *bd_addr);

void DeviceProperties_SanitiseBdAddr(bdaddr *bd_addr);

#endif /* DEVICE_PROPERTIES_H_ */
