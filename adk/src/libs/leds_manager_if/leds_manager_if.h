/****************************************************************************
Copyright (c) 2004 - 2016 Qualcomm Technologies International, Ltd.

FILE NAME
    leds_manager_if.h
    
DESCRIPTION
	Header file for the leds manager plugin interface (leds_rom/leds_flash) with leds manager.

    The parameters / enums here define the message interface used for the leds plugin.
    i.e This defines the interface between the leds manager library and the underlying plugin 
    
    The contents of these are similar to the parameters passed into the leds library itself
    
    These messages are generated by the leds library and received in the message handler
    associate with the constant task of an leds plugin.
    
    The leds manager plugin itself is responsible for acting upon these messages.
*/

#ifndef _LEDS_MANAGER_IF_H_
#define _LEDS_MANAGER_IF_H_

/* Macros for creating messages */
#include <message.h>
#include <panic.h>

#include "leds_manager.h"

#define MAKE_LEDS_MESSAGE(TYPE) TYPE##_T *message = PanicUnlessNew(TYPE##_T);

/*!
	@brief Define the types for the upstream messages sent from the Hfp profile
	library to the application.
*/
#define LEDS_PLUGIN_MESSAGE_BASE  0x6900

#define HFP_STATE_MASK            0xF0
#define A2DP_STATE_FLAG_MASK      0x08
#define A2DP_STATE_MASK           0x07

#define HFP_STATE_SHIFT           4
#define A2DP_STATE_FLAG_SHIFT     3
#define A2DP_STATE_SHIFT          0

#define COMBINED_HEADSET_STATE(x, y) ((((x) << HFP_STATE_SHIFT) & HFP_STATE_MASK) + (((y) << A2DP_STATE_SHIFT) & A2DP_STATE_MASK))

#define HFP_STATE(x)     (((x) & HFP_STATE_MASK) >> HFP_STATE_SHIFT)
#define A2DP_FLAG(x)     (((x) & A2DP_STATE_FLAG_MASK) >> A2DP_STATE_FLAG_SHIFT)
#define A2DP_STATE(x)    (((x) & A2DP_STATE_MASK) >> A2DP_STATE_SHIFT)

/*! \name Leds Plugin Interface Messages

	These messages are sent to the Leds manager plugin modules (Leds_rom or Leds_flash).
	
	An Leds manager plugin must implement all of the messages below
*/
typedef enum leds_plugin_if_type_tag 
{
    /* The following messages are sent from leds manager to leds plugin */
	LEDS_INITIAL_MSG    = LEDS_PLUGIN_MESSAGE_BASE,
	LEDS_INDICATE_EVENT_MSG ,
	LEDS_INDICATE_STATE_MSG ,
    LEDS_ENABLE_LEDS_MSG , 
    LEDS_DISABLE_LEDS_MSG ,
    LEDS_RESET_EVENT_IND_MSG ,
    LEDS_RESET_LEDS_TIMEOUT_MSG ,
    
  	LEDS_PLUGIN_MESSAGE_TOP
} leds_plugin_if_type_t ; 

/*!
	@brief This message is generated by the leds manager and is issued
	to a leds plugin module. 
	The plugin module should store the parameters passed to the plugin.
*/
typedef struct 
{
    /*! The application task to route upstream plugin messages to*/
    Task            clientTask ;    
    /*! The config parameters to the plugin, it is plugin dependent */
    const void *    params ;
}LEDS_INITIAL_MSG_T ;

/*!
	@brief This message is generated by the leds manager and is issued
	to a leds plugin module. 
	The plugin module should display the pEvent pattern or queue if there
  has an event being played.
*/
typedef struct 
{
    uint8  pEvent;
    bool   can_queue;
}LEDS_INDICATE_EVENT_MSG_T ;

/*!
	@brief This message is generated by the leds manager and is issued
	to a leds plugin module. 
	The plugin module should display the pState pattern.
*/
typedef struct 
{
    uint8  pState;
}LEDS_INDICATE_STATE_MSG_T ;


#endif    /*_LEDS_MANAGER_IF_H_*/

