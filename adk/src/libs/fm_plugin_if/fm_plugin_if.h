/****************************************************************************
Copyright (c) 2010 - 2015 Qualcomm Technologies International, Ltd.

FILE NAME
    fm_plugin_if.h
    
DESCRIPTION
  
*/

/*!
@file   fm_if.h
@brief  Header file for the FM plugin interface.

    The parameters / enums here define the message interface used for the 
    fm plugin.
    i.e This defines the interface between the FM library and the underlying plugin 
           
    These messages are generated by the FM library and received in the message handler
    associate with the constant task of an FM plugin.  
   
    The plugin itself is responsible for acting upon these messages.
     
*/


#ifndef _FM_PLUGIN_IF_H_
#define _FM_PLUGIN_IF_H_

#include <library.h>
#include <panic.h>
#include <message.h>

/*Rx Reception buffer for command data*/
#define FMRX_MAX_BUFFER_SIZE (15) 

/* the default volume level of the FM reciever hardware */
#define FMRX_DEFAULT_VOLUME (0x003F) 


/* Macros for creating messages */
#define MAKE_FM_MESSAGE(TYPE) TYPE##_T *message = PanicUnlessNew(TYPE##_T);
#define MAKE_FM_MESSAGE_WITH_LEN(TYPE, LEN) TYPE##_T *message = (TYPE##_T *) PanicUnlessMalloc(sizeof(TYPE##_T) + LEN);

/*  PSKEY_USR_FM - FM RX config - Typical values can be 
    0x226A (88.1 Mhz), 0x2A26 (107.9 Mhz), 0x0014, 0x0014, 0x0006, 0x0018, 0x0032, 0x0006, 0x001E, FM_EMBEDDED_ANTENNA, RX CHIP RESET PIO
*/

/*!
  @brief Configuration information on FM RX
*/
typedef struct
{
    /*FM Rx properties*/
    uint16 seek_band_bottom;
    uint16 seek_band_top;
    uint16 seek_freq_spacing;
    uint16 seek_tune_rssi;
    uint16 seek_tune_snr;
    uint16 rsq_rssi_low;
    uint16 rsq_rssi_high;
    uint16 rsq_snr_low;
    uint16 rsq_snr_high;
    uint16 antenna_source;
    uint16 hardware_pio;
} fm_rx_config;

#define FMRX_MAX_RDS_BUFF_SIZE (13) /* (12) RDS  + (1) status*/

/*!
  @brief FM RDS data structure
*/
typedef struct
{
    bool   program_code_valid;
    uint16 program_code;/*16 bit program identification code*/
    
    uint8  program_type;/*program type value as decoded*/

    bool   ps_valid;
    uint8  ps_bitmask; /* Each bit covers one pair of characters in the buffer. max 8 bytes of PS*/
    
    uint32 rt_bitmask; /* Each bit covers one pair of characters in the buffer for blk C/D*/

    uint8  rt_abflag; /* Defines the type of the text - BLK A or B data. The buffer must be cleared if the flag changes. */                                        

    uint8  *program_service;/*Contains the Programme Service name comprising eight characters, intended for static display on a receiver. 
                        It is the primary aid to listeners in programme service identification and selection.  */
                        
    uint8  *radio_text;/*scrolling radio data*/
                        
}fm_rds_data;


/*!
  @brief This enum defines the FM RDS type of data
*/
typedef enum
{
    FMRX_RDS_PROGRAM_TYPE,
    FMRX_RDS_PROGRAM_SERVICE,
    FMRX_RDS_RADIO_TEXT
    
} fm_rds_type;


/*FM supporting preset stations in PSKEY_32 */
#define FM_MAX_PRESET_STATIONS (3)

typedef struct 
{
    uint16 freq[FM_MAX_PRESET_STATIONS];
   
}fm_stored_freq;


/*!
  @brief This enum defines the FM RX states
*/
typedef enum
{
    FMRX_STATE_IDLE,
    FMRX_STATE_INITIALIZING,
    FMRX_STATE_READY, /*To Tune, Store, Erase, Play*/
    FMRX_STATE_SUSPEND /*FM goes into suspend when BT operations are ON*/
    
} fm_rx_states;


/*!
  @brief FM RX data structure
*/
typedef struct
{
    TaskData *app_task; 
    Sink fm_sink;                   /* audio sink of FM receiver for audio plugin use */
    fm_rx_states state;             /* FM receiver state machine state */
    const uint16 *parameter_id;     /* FM receiver init */
    const uint16 *parameter_value;  /* FM receiver init */
    uint16 currently_tuned_freq;    /* current operating frequency */
    uint8  volume;                  /* current operating volume level */
    fm_rx_config   config;          /* FM receiver operating parameters from pskey */
    fm_rds_data rds_data;           /* RDS data for currently tuned station, if available*/
    uint8   rx_buff[1];             /* FM receiver command buffer */

} fm_rx_data_t;

/*!  FM Plugin Downstream Interface Messages

   These messages are sent to the FM plugin modules.
 
   A FM plugin must handle all of the messages below.
    
*/
typedef enum fm_plugin_interface_message_type_tag
{
    FM_PLUGIN_INIT_MSG    = FM_DOWNSTREAM_MESSAGE_BASE,        
    FM_PLUGIN_RX_TUNE_UP_MSG ,
    FM_PLUGIN_RX_TUNE_DOWN_MSG,
    FM_PLUGIN_RX_STORE_MSG,
    FM_PLUGIN_RX_ERASE_MSG,
    FM_PLUGIN_RX_DISCONNECT_AUDIO_MSG,
    FM_PLUGIN_RX_UPDATE_VOLUME_MSG,
    FM_PLUGIN_RX_POWER_OFF_MSG,
    FMRX_TUNE_FREQ_MSG,

    /* Library message limit */
    FM_DOWNSTREAM_MESSAGE_TOP  

} fm_plugin_interface_message_type_t ; 

/*!  FM Plugin Upstream Interface Messages

    These messages are sent from the FM plugin modules.
   
   A FM plugin must handle all of the messages below.
    
*/
typedef enum fm_plugin_upstream_message_type_tag 
{
   FM_PLUGIN_INIT_IND    = FM_UPSTREAM_MESSAGE_BASE,
   FM_PLUGIN_TUNE_COMPLETE_IND,
   FM_PLUGIN_RDS_IND,

   /* Library message limit */
   FM_UPSTREAM_MESSAGE_TOP    
   
} fm_plugin_upstream_message_type_t; 

/*!
  @brief This message is generated by the fm manager and is issued
  to a fm plugin module. 
   The plugin module should initialise the fm driver with the defined values
*/
typedef struct 
{ 
   /*! The application task to route upstream plugin messages to */
    Task            app_task ;
    fm_rx_data_t *  fm_data;   
}  FM_PLUGIN_INIT_MSG_T;

/*!
  @brief This message is generated by the fm manager and is issued
  to a fm plugin module. 
  Vm app has requested the FM receiver be set 
*/
typedef struct 
{
     uint16 volume ;
} FM_PLUGIN_RX_UPDATE_VOLUME_MSG_T;

/*!
  @brief This message is generated by the fm manager and is issued
  to a fm plugin module. 
   The plugin module should tune to the passed in frequency 
*/
typedef struct 
{
     uint16 frequency ;
} FMRX_TUNE_FREQ_MSG_T;

/*!
  @brief This message is generated by a FM plugin module and sent to the application Task
  to indicate initialisation of the FM unit
*/
typedef struct 
{
     bool        result;
}FM_PLUGIN_INIT_IND_T;

/*!
  @brief This message is generated by the fm manager and is issued
  to a fm plugin module. 
  The plugin module should deal with a tuning complete indication
*/
typedef struct 
{
     bool        result;
     uint16      tuned_freq;/*currently tuned freq*/
     
}FM_PLUGIN_TUNE_COMPLETE_IND_T;

/*!
  @brief This message is generated by the fm plugin on receiving RDS info after 
  tuning to a particular freq
*/
typedef struct 
{
     fm_rds_type    rds_type;
     uint8  data_len;
     uint8  data[1];
     
}FM_PLUGIN_RDS_IND_T;

#endif /* _FM_PLUGIN_IF_H_ */
