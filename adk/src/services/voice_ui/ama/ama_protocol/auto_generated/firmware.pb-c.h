/*****************************************************************************
Copyright (c) 2018 - 2020 Qualcomm Technologies International, Ltd.
******************************************************************************/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: firmware.proto */

#ifndef PROTOBUF_C_firmware_2eproto__INCLUDED
#define PROTOBUF_C_firmware_2eproto__INCLUDED

#include <protobuf.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _FirmwareComponent FirmwareComponent;
typedef struct _FirmwareInformation FirmwareInformation;
typedef struct _GetFirmwareInformation GetFirmwareInformation;


/* --- enums --- */


/* --- messages --- */

struct  _FirmwareComponent
{
  ProtobufCMessage base;
  uint32_t version;
  char *name;
  uint32_t size;
  char *signature;
};
#define FIRMWARE_COMPONENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_component__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


struct  _FirmwareInformation
{
  ProtobufCMessage base;
  uint32_t version;
  char *name;
  size_t n_components;
  FirmwareComponent **components;
  char *locale;
  char *version_name;
  uint32_t device_id;
};
#define FIRMWARE_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_information__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  _GetFirmwareInformation
{
  ProtobufCMessage base;
  uint32_t device_id;
};
#define GET_FIRMWARE_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_firmware_information__descriptor) \
    , 0 }


/* FirmwareComponent methods */
void   firmware_component__init
                     (FirmwareComponent         *message);
size_t firmware_component__get_packed_size
                     (const FirmwareComponent   *message);
size_t firmware_component__pack
                     (const FirmwareComponent   *message,
                      uint8_t             *out);
size_t firmware_component__pack_to_buffer
                     (const FirmwareComponent   *message,
                      ProtobufCBuffer     *buffer);
FirmwareComponent *
       firmware_component__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_component__free_unpacked
                     (FirmwareComponent *message,
                      ProtobufCAllocator *allocator);
/* FirmwareInformation methods */
void   firmware_information__init
                     (FirmwareInformation         *message);
size_t firmware_information__get_packed_size
                     (const FirmwareInformation   *message);
size_t firmware_information__pack
                     (const FirmwareInformation   *message,
                      uint8_t             *out);
size_t firmware_information__pack_to_buffer
                     (const FirmwareInformation   *message,
                      ProtobufCBuffer     *buffer);
FirmwareInformation *
       firmware_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_information__free_unpacked
                     (FirmwareInformation *message,
                      ProtobufCAllocator *allocator);
/* GetFirmwareInformation methods */
void   get_firmware_information__init
                     (GetFirmwareInformation         *message);
size_t get_firmware_information__get_packed_size
                     (const GetFirmwareInformation   *message);
size_t get_firmware_information__pack
                     (const GetFirmwareInformation   *message,
                      uint8_t             *out);
size_t get_firmware_information__pack_to_buffer
                     (const GetFirmwareInformation   *message,
                      ProtobufCBuffer     *buffer);
GetFirmwareInformation *
       get_firmware_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_firmware_information__free_unpacked
                     (GetFirmwareInformation *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FirmwareComponent_Closure)
                 (const FirmwareComponent *message,
                  void *closure_data);
typedef void (*FirmwareInformation_Closure)
                 (const FirmwareInformation *message,
                  void *closure_data);
typedef void (*GetFirmwareInformation_Closure)
                 (const GetFirmwareInformation *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor firmware_component__descriptor;
extern const ProtobufCMessageDescriptor firmware_information__descriptor;
extern const ProtobufCMessageDescriptor get_firmware_information__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_firmware_2eproto__INCLUDED */
