#!/usr/bin/env python
############################################################################
# CONFIDENTIAL
#
# Copyright (c) 2015 - 2017 Qualcomm Technologies International, Ltd.
#
############################################################################
"""
Construct a header file for including header files from other subsystems.
This is intended to be used for collecting information that should be private to
each subsystem, but for build reasons needs to be brought together in one place.
"""
import sys
import argparse
import os.path

def search_headers_in_subsystems(subsystems, suffix):
    """
    Search in the subsystem for files with the given suffix (ex: subsystem_suffix.h)
    """
    found = []
    for subsystem in subsystems:
        file_name = subsystem + "_" + suffix + ".h"
        if os.path.isfile(file_name):
            module = subsystem.split("/")[-1]
            found.append(module)
    return found

def read_file(file_to_read):
    """
    Reads the content of a file. Returns None if the file doesn't exist.
    """
    if os.path.isfile(file_to_read):
        # read the target and check if it was any changes
        with open(file_to_read, "r") as targetfile:
            file_content = targetfile.read()
        return file_content
    else:
        return None

def write_to_file(file_to_write, file_content):
    """
    This function writes to a file. If the files doesn't exist
    it will be created.
    """
    with open(file_to_write, "w") as targetfile:
        targetfile.write(file_content)

# read arguments
parser = argparse.ArgumentParser(description="Construct a header file for including header files" +
                                 " from other subsystems. This is intended to be used for " +
                                 "collecting information that should be private to each " +
                                 "subsystem, but for build reasons needs to be brought together" +
                                 "in one place.")
parser.add_argument("-i",
                    action="store", type=str, dest="include_dir",
                    help="Add a directory to the include file search path. This is used to " +
                    "locate the subsystems, and hence the header files to be included.")
parser.add_argument("-s",
                    action="store", type=str, dest="suffix", required=True,
                    help='The header file suffix to search for, e.g. specifying "static" would ' +
                    'add an include line as follows for each file that exists with a name ' +
                    'matching the pattern: #include "<subsystem>/<subsystem>_static.h"')
parser.add_argument("-m",
                    action="store", type=str, dest="macro", required=True,
                    help='The base name and parameters of a macro to define listing all of the ' +
                    'included subsystems, e.g. specifying "STATIC(m)" would define a macro as ' +
                    ' follows: "#define STATIC_LIST(m) <SUBSYSTEM1>_STATIC(m) ' +
                    '<SUBSYSTEM2>_STATIC(m)"')
parser.add_argument("-o",
                    action="store", type=str, dest="target_header", required=True,
                    help="The name of the target header file. If this already exists then it " +
                    "will only be overwritten if the content needs to be changed.")
parser.add_argument(dest="subsystems",
                    help="The name of a subsystem to check. The order in which the subsystems " +
                    "are listed may be important, and so is preserved.",
                    type=str, nargs='+')
arguments = parser.parse_args()

# search in the subsystem for the given suffix headers
headers = search_headers_in_subsystems(arguments.subsystems, arguments.suffix)


########### Generate the content of the target header file
# base name is the file name without the extension/extension
target_base = os.path.splitext(os.path.basename(arguments.target_header))[0]

# Header guard name for the generated file
header_guard = target_base.upper() + "_H"

# Add documentation and open the header guard.
content = ("/* %s.h autogenerated by %s */\n\n"
           + "#ifndef %s\n"
           + "#define %s\n\n"
          )%(target_base, os.path.basename(sys.argv[0]), header_guard, header_guard)

# Include headers found with the specific suffix in the subsystems.
for file in headers:
    content += "#include \"" + file + "/"+ file + "_" + arguments.suffix + ".h\"\n"
content += "\n"

define = arguments.macro.upper().split("(")[0] +"_LIST(" + arguments.macro.split("(")[1]
content += "#define " + define
for file in headers:
    content += " \\\n    " + file.upper() + "_" +arguments. macro
content += "\n\n"

# Close the header guard.
content += "#endif /* " + header_guard + " */\n"
###########


# check if the file already exist with the same content to save some time.
if content != read_file(arguments.target_header):
    # if the content is different write the content to the file.
    write_to_file(arguments.target_header, content)
