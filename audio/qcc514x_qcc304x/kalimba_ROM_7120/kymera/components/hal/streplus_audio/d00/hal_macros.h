
/* *************************************************************************  *
   COMMERCIAL IN CONFIDENCE
   Copyright (C) 2018 Qualcomm Technologies International Ltd.

   Qualcomm Technologies International Ltd.
   Churchill House
   Cambridge Business Park
   Cambridge, UK
   CB4 0WZ
   http://www.qualcomm.com

   DESCRIPTION
      Hardware Abstraction Layer macros.

   THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT IT, CHANGES WILL BE LOST
*  *************************************************************************  */

#define __HAL_MACROS_H__

#include "hal_utils.h"




#ifndef __HAL_MACROS_H__MODULE_K32_TRACE
#define __HAL_MACROS_H__MODULE_K32_TRACE

/* -- Kalimba 32-bit Trace Control registers. -- */

 /* Field K32_TRACE__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p0_access_permission() ((k32_trace__p0_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P0_ACCESS_PERMISSION))
#define hal_set_k32_trace__p0_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P0_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P0_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p1_access_permission() ((k32_trace__p1_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P1_ACCESS_PERMISSION))
#define hal_set_k32_trace__p1_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P1_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P1_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p2_access_permission() ((k32_trace__p2_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P2_ACCESS_PERMISSION))
#define hal_set_k32_trace__p2_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P2_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P2_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p3_access_permission() ((k32_trace__p3_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P3_ACCESS_PERMISSION))
#define hal_set_k32_trace__p3_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P3_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P3_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field TRACE_0_DMEM_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_0_dmem_base_addr() hal_get_register_field32(TRACE_0_DMEM_BASE_ADDR,TRACE_0_DMEM_BASE_ADDR)
#define hal_set_trace_0_dmem_base_addr(x) hal_set_register_field(TRACE_0_DMEM_BASE_ADDR,TRACE_0_DMEM_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_BASE_ADDR TRACE_0_DMEM_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_BASE_ADDR TRACE_0_DMEM_BASE_ADDR

 /* Field TRACE_0_DMEM_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_0_dmem_cfg_length() hal_get_register_field16(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_LENGTH)
#define hal_set_trace_0_dmem_cfg_length(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_CFG_LENGTH TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_CFG_LENGTH TRACE_0_DMEM_CFG

 /* Field TRACE_0_DMEM_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_0_dmem_cfg_wrap() hal_get_register_field8(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_WRAP)
#define hal_set_trace_0_dmem_cfg_wrap(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_CFG_WRAP TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_CFG_WRAP TRACE_0_DMEM_CFG

 /* Field TRACE_0_DMEM_EN */
 /* Accessor macros */
#define hal_get_trace_0_dmem_en() hal_get_register_field8(TRACE_0_DMEM_CFG,TRACE_0_DMEM_EN)
#define hal_set_trace_0_dmem_en(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_EN TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_EN TRACE_0_DMEM_CFG

 /* Field TRACE_0_END_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_0_end_trigger() hal_get_register_field32(TRACE_0_END_TRIGGER,TRACE_0_END_TRIGGER)
#define hal_set_trace_0_end_trigger(x) hal_set_register_field(TRACE_0_END_TRIGGER,TRACE_0_END_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_END_TRIGGER TRACE_0_END_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_0_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_END_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_END_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_END_TRIGGER TRACE_0_END_TRIGGER

 /* Field TRACE_0_START_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_0_start_trigger() hal_get_register_field32(TRACE_0_START_TRIGGER,TRACE_0_START_TRIGGER)
#define hal_set_trace_0_start_trigger(x) hal_set_register_field(TRACE_0_START_TRIGGER,TRACE_0_START_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_START_TRIGGER TRACE_0_START_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_0_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_START_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_START_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_START_TRIGGER TRACE_0_START_TRIGGER

 /* Field TRACE_0_TBUS_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_base_addr() hal_get_register_field32(TRACE_0_TBUS_BASE_ADDR,TRACE_0_TBUS_BASE_ADDR)
#define hal_set_trace_0_tbus_base_addr(x) hal_set_register_field(TRACE_0_TBUS_BASE_ADDR,TRACE_0_TBUS_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_BASE_ADDR TRACE_0_TBUS_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_BASE_ADDR TRACE_0_TBUS_BASE_ADDR

 /* Field TRACE_0_TBUS_CFG_DEST_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_dest_blk() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_BLK)
#define hal_set_trace_0_tbus_cfg_dest_blk(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_DEST_BLK TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_DEST_BLK TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_DEST_SYS_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_dest_sys() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_SYS)
#define hal_set_trace_0_tbus_cfg_dest_sys(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_SYS,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_DEST_SYS TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_DEST_SYS TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_length() hal_get_register_field16(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_LENGTH)
#define hal_set_trace_0_tbus_cfg_length(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_LENGTH TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_LENGTH TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_SRC_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_src_blk() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_SRC_BLK)
#define hal_set_trace_0_tbus_cfg_src_blk(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_SRC_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_SRC_BLK TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_SRC_BLK TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_TAG_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_tag() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TAG)
#define hal_set_trace_0_tbus_cfg_tag(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TAG,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_TAG TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_TAG TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_TRAN_TYPE */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_tran_type() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TRAN_TYPE)
#define hal_set_trace_0_tbus_cfg_tran_type(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TRAN_TYPE,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_TRAN_TYPE TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_TRAN_TYPE TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_wrap() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_WRAP)
#define hal_set_trace_0_tbus_cfg_wrap(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_WRAP TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_WRAP TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_EN */
 /* Accessor macros */
#define hal_get_trace_0_tbus_en() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_EN)
#define hal_set_trace_0_tbus_en(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_EN TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_EN TRACE_0_TBUS_CFG

 /* Field TRACE_1_DMEM_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_1_dmem_base_addr() hal_get_register_field32(TRACE_1_DMEM_BASE_ADDR,TRACE_1_DMEM_BASE_ADDR)
#define hal_set_trace_1_dmem_base_addr(x) hal_set_register_field(TRACE_1_DMEM_BASE_ADDR,TRACE_1_DMEM_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_BASE_ADDR TRACE_1_DMEM_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_BASE_ADDR TRACE_1_DMEM_BASE_ADDR

 /* Field TRACE_1_DMEM_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_1_dmem_cfg_length() hal_get_register_field16(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_LENGTH)
#define hal_set_trace_1_dmem_cfg_length(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_CFG_LENGTH TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_CFG_LENGTH TRACE_1_DMEM_CFG

 /* Field TRACE_1_DMEM_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_1_dmem_cfg_wrap() hal_get_register_field8(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_WRAP)
#define hal_set_trace_1_dmem_cfg_wrap(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_CFG_WRAP TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_CFG_WRAP TRACE_1_DMEM_CFG

 /* Field TRACE_1_DMEM_EN */
 /* Accessor macros */
#define hal_get_trace_1_dmem_en() hal_get_register_field8(TRACE_1_DMEM_CFG,TRACE_1_DMEM_EN)
#define hal_set_trace_1_dmem_en(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_EN TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_EN TRACE_1_DMEM_CFG

 /* Field TRACE_1_END_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_1_end_trigger() hal_get_register_field32(TRACE_1_END_TRIGGER,TRACE_1_END_TRIGGER)
#define hal_set_trace_1_end_trigger(x) hal_set_register_field(TRACE_1_END_TRIGGER,TRACE_1_END_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_END_TRIGGER TRACE_1_END_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_1_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_END_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_END_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_END_TRIGGER TRACE_1_END_TRIGGER

 /* Field TRACE_1_START_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_1_start_trigger() hal_get_register_field32(TRACE_1_START_TRIGGER,TRACE_1_START_TRIGGER)
#define hal_set_trace_1_start_trigger(x) hal_set_register_field(TRACE_1_START_TRIGGER,TRACE_1_START_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_START_TRIGGER TRACE_1_START_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_1_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_START_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_START_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_START_TRIGGER TRACE_1_START_TRIGGER

 /* Field TRACE_1_TBUS_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_base_addr() hal_get_register_field32(TRACE_1_TBUS_BASE_ADDR,TRACE_1_TBUS_BASE_ADDR)
#define hal_set_trace_1_tbus_base_addr(x) hal_set_register_field(TRACE_1_TBUS_BASE_ADDR,TRACE_1_TBUS_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_BASE_ADDR TRACE_1_TBUS_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_BASE_ADDR TRACE_1_TBUS_BASE_ADDR

 /* Field TRACE_1_TBUS_CFG_DEST_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_dest_blk() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_BLK)
#define hal_set_trace_1_tbus_cfg_dest_blk(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_DEST_BLK TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_DEST_BLK TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_DEST_SYS_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_dest_sys() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_SYS)
#define hal_set_trace_1_tbus_cfg_dest_sys(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_SYS,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_DEST_SYS TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_DEST_SYS TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_length() hal_get_register_field16(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_LENGTH)
#define hal_set_trace_1_tbus_cfg_length(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_LENGTH TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_LENGTH TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_SRC_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_src_blk() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_SRC_BLK)
#define hal_set_trace_1_tbus_cfg_src_blk(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_SRC_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_SRC_BLK TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_SRC_BLK TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_TAG_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_tag() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TAG)
#define hal_set_trace_1_tbus_cfg_tag(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TAG,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_TAG TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_TAG TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_TRAN_TYPE */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_tran_type() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TRAN_TYPE)
#define hal_set_trace_1_tbus_cfg_tran_type(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TRAN_TYPE,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_TRAN_TYPE TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_TRAN_TYPE TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_wrap() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_WRAP)
#define hal_set_trace_1_tbus_cfg_wrap(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_WRAP TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_WRAP TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_EN */
 /* Accessor macros */
#define hal_get_trace_1_tbus_en() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_EN)
#define hal_set_trace_1_tbus_en(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_EN TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_EN TRACE_1_TBUS_CFG

 /* Field TRACE_CFG_0_CLR_STORED_ON_SYNC */
 /* Accessor macros */
#define hal_get_trace_cfg_0_clr_stored_on_sync() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_CLR_STORED_ON_SYNC)
#define hal_set_trace_cfg_0_clr_stored_on_sync(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_CLR_STORED_ON_SYNC,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_CLR_STORED_ON_SYNC TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_CLR_STORED_ON_SYNC TRACE_0_CFG

 /* Field TRACE_CFG_0_CPU_SELECT_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_0_cpu_select() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_CPU_SELECT)
#define hal_set_trace_cfg_0_cpu_select(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_CPU_SELECT,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_CPU_SELECT TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_CPU_SELECT TRACE_0_CFG

 /* Field TRACE_CFG_0_ENABLE */
 /* Accessor macros */
#define hal_get_trace_cfg_0_enable() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_ENABLE)
#define hal_set_trace_cfg_0_enable(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_ENABLE TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_ENABLE TRACE_0_CFG

 /* Field TRACE_CFG_0_FLUSH_BITGEN */
 /* Accessor macros */
#define hal_get_trace_cfg_0_flush_bitgen() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_FLUSH_BITGEN)
#define hal_set_trace_cfg_0_flush_bitgen(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_FLUSH_BITGEN,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_FLUSH_BITGEN TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_FLUSH_BITGEN TRACE_0_CFG

 /* Field TRACE_CFG_0_FLUSH_FIFO */
 /* Accessor macros */
#define hal_get_trace_cfg_0_flush_fifo() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_FLUSH_FIFO)
#define hal_set_trace_cfg_0_flush_fifo(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_FLUSH_FIFO,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_FLUSH_FIFO TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_FLUSH_FIFO TRACE_0_CFG

 /* Field TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL */
 /* Accessor macros */
#define hal_get_trace_cfg_0_stall_core_on_trace_full() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL)
#define hal_set_trace_cfg_0_stall_core_on_trace_full(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL TRACE_0_CFG

 /* Field TRACE_CFG_0_SYNC_INTERVAL_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_0_sync_interval() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_SYNC_INTERVAL)
#define hal_set_trace_cfg_0_sync_interval(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_SYNC_INTERVAL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_SYNC_INTERVAL TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_SYNC_INTERVAL TRACE_0_CFG

 /* Field TRACE_CFG_1_CLR_STORED_ON_SYNC */
 /* Accessor macros */
#define hal_get_trace_cfg_1_clr_stored_on_sync() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_CLR_STORED_ON_SYNC)
#define hal_set_trace_cfg_1_clr_stored_on_sync(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_CLR_STORED_ON_SYNC,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_CLR_STORED_ON_SYNC TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_CLR_STORED_ON_SYNC TRACE_1_CFG

 /* Field TRACE_CFG_1_CPU_SELECT_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_1_cpu_select() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_CPU_SELECT)
#define hal_set_trace_cfg_1_cpu_select(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_CPU_SELECT,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_CPU_SELECT TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_CPU_SELECT TRACE_1_CFG

 /* Field TRACE_CFG_1_ENABLE */
 /* Accessor macros */
#define hal_get_trace_cfg_1_enable() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_ENABLE)
#define hal_set_trace_cfg_1_enable(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_ENABLE TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_ENABLE TRACE_1_CFG

 /* Field TRACE_CFG_1_FLUSH_BITGEN */
 /* Accessor macros */
#define hal_get_trace_cfg_1_flush_bitgen() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_FLUSH_BITGEN)
#define hal_set_trace_cfg_1_flush_bitgen(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_FLUSH_BITGEN,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_FLUSH_BITGEN TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_FLUSH_BITGEN TRACE_1_CFG

 /* Field TRACE_CFG_1_FLUSH_FIFO */
 /* Accessor macros */
#define hal_get_trace_cfg_1_flush_fifo() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_FLUSH_FIFO)
#define hal_set_trace_cfg_1_flush_fifo(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_FLUSH_FIFO,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_FLUSH_FIFO TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_FLUSH_FIFO TRACE_1_CFG

 /* Field TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL */
 /* Accessor macros */
#define hal_get_trace_cfg_1_stall_core_on_trace_full() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL)
#define hal_set_trace_cfg_1_stall_core_on_trace_full(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL TRACE_1_CFG

 /* Field TRACE_CFG_1_SYNC_INTERVAL_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_1_sync_interval() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_SYNC_INTERVAL)
#define hal_set_trace_cfg_1_sync_interval(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_SYNC_INTERVAL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_SYNC_INTERVAL TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_SYNC_INTERVAL TRACE_1_CFG

 /* Field TRACE_DEBUG_SEL_LSB */
 /* Accessor macros */
#define hal_get_trace_debug_sel() hal_get_register_field8(TRACE_DEBUG_SEL,TRACE_DEBUG_SEL)
#define hal_set_trace_debug_sel(x) hal_set_register_field(TRACE_DEBUG_SEL,TRACE_DEBUG_SEL,(x))
 /* Workings */
#define TYPE_OF_TRACE_DEBUG_SEL TRACE_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_TRACE_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DEBUG_SEL TRACE_DEBUG_SEL

 /* Field TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_0_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_1_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_2_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_3_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_0_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_1_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_2_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_3_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TRIGGER_CFG_END_TRIG_EN */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_end_trig_en_0_trigger_cfg() hal_get_register_field8(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN)
#define hal_set_trace_trigger_cfg_end_trig_en_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN,(x))
#define hal_get_trace_trigger_cfg_end_trig_en_1_trigger_cfg() hal_get_register_field8(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN)
#define hal_set_trace_trigger_cfg_end_trig_en_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_END_TRIG_EN TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_END_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_END_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_END_TRIG_EN TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_CFG_START_TRIG_EN */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_start_trig_en_0_trigger_cfg() hal_get_register_field8(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN)
#define hal_set_trace_trigger_cfg_start_trig_en_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN,(x))
#define hal_get_trace_trigger_cfg_start_trig_en_1_trigger_cfg() hal_get_register_field8(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN)
#define hal_set_trace_trigger_cfg_start_trig_en_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_START_TRIG_EN TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_START_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_START_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_START_TRIG_EN TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_CFG_TRIGGER_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_trigger_length_0_trigger_cfg() hal_get_register_field16(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH)
#define hal_set_trace_trigger_cfg_trigger_length_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH,(x))
#define hal_get_trace_trigger_cfg_trigger_length_1_trigger_cfg() hal_get_register_field16(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH)
#define hal_set_trace_trigger_cfg_trigger_length_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_TRIGGER_LENGTH TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_TRIGGER_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_TRIGGER_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_TRIGGER_LENGTH TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_STATUS_END_COMPL */
 /* Accessor macros */
#define hal_get_trace_trigger_status_end_compl_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_COMPL)
#define hal_get_trace_trigger_status_end_compl_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_COMPL)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_END_COMPL TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_END_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_END_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_END_COMPL TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_END_FOUND */
 /* Accessor macros */
#define hal_get_trace_trigger_status_end_found_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_FOUND)
#define hal_get_trace_trigger_status_end_found_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_FOUND)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_END_FOUND TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_END_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_END_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_END_FOUND TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_SMDBG_LSB */
 /* Accessor macros */
#define hal_get_trace_trigger_status_smdbg_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_SMDBG)
#define hal_get_trace_trigger_status_smdbg_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_SMDBG)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_SMDBG TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_SMDBG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_SMDBG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_SMDBG TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_START_COMPL */
 /* Accessor macros */
#define hal_get_trace_trigger_status_start_compl_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_COMPL)
#define hal_get_trace_trigger_status_start_compl_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_COMPL)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_START_COMPL TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_START_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_START_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_START_COMPL TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_START_FOUND */
 /* Accessor macros */
#define hal_get_trace_trigger_status_start_found_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_FOUND)
#define hal_get_trace_trigger_status_start_found_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_FOUND)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_START_FOUND TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_START_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_START_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_START_FOUND TRACE_TRIG_STATUS_ENUM

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_TRACE_0_CFG_TRACE_0_CFG
#define CHECK_FIELD_TYPE_TRACE_0_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_BASE_ADDR_TRACE_0_DMEM_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_CFG_TRACE_0_DMEM_CFG
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_END_TRIGGER_TRACE_0_END_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_0_END_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_0_START_TRIGGER_TRACE_0_START_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_0_START_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_BASE_ADDR_TRACE_0_TBUS_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_CFG_TRACE_0_TBUS_CFG
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_CFG_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_STATUS_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_1_CFG_TRACE_1_CFG
#define CHECK_FIELD_TYPE_TRACE_1_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_BASE_ADDR_TRACE_1_DMEM_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_CFG_TRACE_1_DMEM_CFG
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_END_TRIGGER_TRACE_1_END_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_1_END_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_1_START_TRIGGER_TRACE_1_START_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_1_START_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_BASE_ADDR_TRACE_1_TBUS_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_CFG_TRACE_1_TBUS_CFG
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_CFG_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_STATUS_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_ACCESS_CTRL_TRACE_ACCESS_CTRL
#define CHECK_FIELD_TYPE_TRACE_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_TRACE_CFG_ENUM_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_CFG_ENUM_END
#define CHECK_FIELD_TYPE_TRACE_DEBUG_SEL_TRACE_DEBUG_SEL
#define CHECK_FIELD_TYPE_TRACE_DEBUG_SEL_END
#define CHECK_FIELD_TYPE_TRACE_DMEM_STATUS_TRACE_DMEM_STATUS
#define CHECK_FIELD_TYPE_TRACE_DMEM_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_TBUS_STATUS_TRACE_TBUS_STATUS
#define CHECK_FIELD_TYPE_TRACE_TBUS_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_TRIG_STATUS_ENUM_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_TRIG_STATUS_ENUM_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_TRACE_0_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_TRIG_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIG_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define TRACE_0_CFG_REG_BITS (10u)
#define hal_set_reg_trace_0_cfg(x) hal_set_register(TRACE_0_CFG, x, 1)
#define hal_get_reg_trace_0_cfg() hal_get_register(TRACE_0_CFG, 1)
#define TRACE_0_DMEM_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_0_dmem_base_addr(x) hal_set_register(TRACE_0_DMEM_BASE_ADDR, x, 1)
#define hal_get_reg_trace_0_dmem_base_addr() hal_get_register(TRACE_0_DMEM_BASE_ADDR, 1)
#define TRACE_0_DMEM_CFG_REG_BITS (13u)
#define hal_set_reg_trace_0_dmem_cfg(x) hal_set_register(TRACE_0_DMEM_CFG, x, 1)
#define hal_get_reg_trace_0_dmem_cfg() hal_get_register(TRACE_0_DMEM_CFG, 1)
#define TRACE_0_END_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_0_end_trigger(x) hal_set_register(TRACE_0_END_TRIGGER, x, 1)
#define hal_get_reg_trace_0_end_trigger() hal_get_register(TRACE_0_END_TRIGGER, 1)
#define TRACE_0_START_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_0_start_trigger(x) hal_set_register(TRACE_0_START_TRIGGER, x, 1)
#define hal_get_reg_trace_0_start_trigger() hal_get_register(TRACE_0_START_TRIGGER, 1)
#define TRACE_0_TBUS_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_0_tbus_base_addr(x) hal_set_register(TRACE_0_TBUS_BASE_ADDR, x, 1)
#define hal_get_reg_trace_0_tbus_base_addr() hal_get_register(TRACE_0_TBUS_BASE_ADDR, 1)
#define TRACE_0_TBUS_CFG_REG_BITS (30u)
#define hal_set_reg_trace_0_tbus_cfg(x) hal_set_register(TRACE_0_TBUS_CFG, x, 1)
#define hal_get_reg_trace_0_tbus_cfg() hal_get_register(TRACE_0_TBUS_CFG, 1)
#define TRACE_0_TRIGGER_CFG_REG_BITS (12u)
#define hal_set_reg_trace_0_trigger_cfg(x) hal_set_register(TRACE_0_TRIGGER_CFG, x, 1)
#define hal_get_reg_trace_0_trigger_cfg() hal_get_register(TRACE_0_TRIGGER_CFG, 1)
#define TRACE_0_TRIGGER_STATUS_REG_BITS (6u)
#define hal_get_reg_trace_0_trigger_status() hal_get_register(TRACE_0_TRIGGER_STATUS, 1)
#define TRACE_1_CFG_REG_BITS (10u)
#define hal_set_reg_trace_1_cfg(x) hal_set_register(TRACE_1_CFG, x, 1)
#define hal_get_reg_trace_1_cfg() hal_get_register(TRACE_1_CFG, 1)
#define TRACE_1_DMEM_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_1_dmem_base_addr(x) hal_set_register(TRACE_1_DMEM_BASE_ADDR, x, 1)
#define hal_get_reg_trace_1_dmem_base_addr() hal_get_register(TRACE_1_DMEM_BASE_ADDR, 1)
#define TRACE_1_DMEM_CFG_REG_BITS (13u)
#define hal_set_reg_trace_1_dmem_cfg(x) hal_set_register(TRACE_1_DMEM_CFG, x, 1)
#define hal_get_reg_trace_1_dmem_cfg() hal_get_register(TRACE_1_DMEM_CFG, 1)
#define TRACE_1_END_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_1_end_trigger(x) hal_set_register(TRACE_1_END_TRIGGER, x, 1)
#define hal_get_reg_trace_1_end_trigger() hal_get_register(TRACE_1_END_TRIGGER, 1)
#define TRACE_1_START_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_1_start_trigger(x) hal_set_register(TRACE_1_START_TRIGGER, x, 1)
#define hal_get_reg_trace_1_start_trigger() hal_get_register(TRACE_1_START_TRIGGER, 1)
#define TRACE_1_TBUS_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_1_tbus_base_addr(x) hal_set_register(TRACE_1_TBUS_BASE_ADDR, x, 1)
#define hal_get_reg_trace_1_tbus_base_addr() hal_get_register(TRACE_1_TBUS_BASE_ADDR, 1)
#define TRACE_1_TBUS_CFG_REG_BITS (30u)
#define hal_set_reg_trace_1_tbus_cfg(x) hal_set_register(TRACE_1_TBUS_CFG, x, 1)
#define hal_get_reg_trace_1_tbus_cfg() hal_get_register(TRACE_1_TBUS_CFG, 1)
#define TRACE_1_TRIGGER_CFG_REG_BITS (12u)
#define hal_set_reg_trace_1_trigger_cfg(x) hal_set_register(TRACE_1_TRIGGER_CFG, x, 1)
#define hal_get_reg_trace_1_trigger_cfg() hal_get_register(TRACE_1_TRIGGER_CFG, 1)
#define TRACE_1_TRIGGER_STATUS_REG_BITS (6u)
#define hal_get_reg_trace_1_trigger_status() hal_get_register(TRACE_1_TRIGGER_STATUS, 1)
#define TRACE_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_trace_access_ctrl(x) hal_set_register(TRACE_ACCESS_CTRL, x, 1)
#define hal_get_reg_trace_access_ctrl() hal_get_register(TRACE_ACCESS_CTRL, 1)
#define TRACE_DEBUG_SEL_REG_BITS (4u)
#define hal_set_reg_trace_debug_sel(x) hal_set_register(TRACE_DEBUG_SEL, x, 1)
#define hal_get_reg_trace_debug_sel() hal_get_register(TRACE_DEBUG_SEL, 1)
#define TRACE_DMEM_STATUS_REG_BITS (4u)
#define hal_get_reg_trace_dmem_status() hal_get_register(TRACE_DMEM_STATUS, 1)
#define TRACE_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_trace_mutex_lock(x) hal_set_register(TRACE_MUTEX_LOCK, x, 1)
#define hal_get_reg_trace_mutex_lock() hal_get_register(TRACE_MUTEX_LOCK, 1)
#define TRACE_TBUS_STATUS_REG_BITS (4u)
#define hal_get_reg_trace_tbus_status() hal_get_register(TRACE_TBUS_STATUS, 1)

 /* Workings */
#define SETTER_FOR_TRACE_0_CFG hal_set_reg_trace_0_cfg
#define GETTER_FOR_TRACE_0_CFG hal_get_reg_trace_0_cfg
#define SETTER_FOR_TRACE_0_DMEM_BASE_ADDR hal_set_reg_trace_0_dmem_base_addr
#define GETTER_FOR_TRACE_0_DMEM_BASE_ADDR hal_get_reg_trace_0_dmem_base_addr
#define SETTER_FOR_TRACE_0_DMEM_CFG hal_set_reg_trace_0_dmem_cfg
#define GETTER_FOR_TRACE_0_DMEM_CFG hal_get_reg_trace_0_dmem_cfg
#define SETTER_FOR_TRACE_0_END_TRIGGER hal_set_reg_trace_0_end_trigger
#define GETTER_FOR_TRACE_0_END_TRIGGER hal_get_reg_trace_0_end_trigger
#define SETTER_FOR_TRACE_0_START_TRIGGER hal_set_reg_trace_0_start_trigger
#define GETTER_FOR_TRACE_0_START_TRIGGER hal_get_reg_trace_0_start_trigger
#define SETTER_FOR_TRACE_0_TBUS_BASE_ADDR hal_set_reg_trace_0_tbus_base_addr
#define GETTER_FOR_TRACE_0_TBUS_BASE_ADDR hal_get_reg_trace_0_tbus_base_addr
#define SETTER_FOR_TRACE_0_TBUS_CFG hal_set_reg_trace_0_tbus_cfg
#define GETTER_FOR_TRACE_0_TBUS_CFG hal_get_reg_trace_0_tbus_cfg
#define SETTER_FOR_TRACE_0_TRIGGER_CFG hal_set_reg_trace_0_trigger_cfg
#define GETTER_FOR_TRACE_0_TRIGGER_CFG hal_get_reg_trace_0_trigger_cfg
#define GETTER_FOR_TRACE_0_TRIGGER_STATUS hal_get_reg_trace_0_trigger_status
#define SETTER_FOR_TRACE_1_CFG hal_set_reg_trace_1_cfg
#define GETTER_FOR_TRACE_1_CFG hal_get_reg_trace_1_cfg
#define SETTER_FOR_TRACE_1_DMEM_BASE_ADDR hal_set_reg_trace_1_dmem_base_addr
#define GETTER_FOR_TRACE_1_DMEM_BASE_ADDR hal_get_reg_trace_1_dmem_base_addr
#define SETTER_FOR_TRACE_1_DMEM_CFG hal_set_reg_trace_1_dmem_cfg
#define GETTER_FOR_TRACE_1_DMEM_CFG hal_get_reg_trace_1_dmem_cfg
#define SETTER_FOR_TRACE_1_END_TRIGGER hal_set_reg_trace_1_end_trigger
#define GETTER_FOR_TRACE_1_END_TRIGGER hal_get_reg_trace_1_end_trigger
#define SETTER_FOR_TRACE_1_START_TRIGGER hal_set_reg_trace_1_start_trigger
#define GETTER_FOR_TRACE_1_START_TRIGGER hal_get_reg_trace_1_start_trigger
#define SETTER_FOR_TRACE_1_TBUS_BASE_ADDR hal_set_reg_trace_1_tbus_base_addr
#define GETTER_FOR_TRACE_1_TBUS_BASE_ADDR hal_get_reg_trace_1_tbus_base_addr
#define SETTER_FOR_TRACE_1_TBUS_CFG hal_set_reg_trace_1_tbus_cfg
#define GETTER_FOR_TRACE_1_TBUS_CFG hal_get_reg_trace_1_tbus_cfg
#define SETTER_FOR_TRACE_1_TRIGGER_CFG hal_set_reg_trace_1_trigger_cfg
#define GETTER_FOR_TRACE_1_TRIGGER_CFG hal_get_reg_trace_1_trigger_cfg
#define GETTER_FOR_TRACE_1_TRIGGER_STATUS hal_get_reg_trace_1_trigger_status
#define SETTER_FOR_TRACE_ACCESS_CTRL hal_set_reg_trace_access_ctrl
#define GETTER_FOR_TRACE_ACCESS_CTRL hal_get_reg_trace_access_ctrl
#define SETTER_FOR_TRACE_DEBUG_SEL hal_set_reg_trace_debug_sel
#define GETTER_FOR_TRACE_DEBUG_SEL hal_get_reg_trace_debug_sel
#define GETTER_FOR_TRACE_DMEM_STATUS hal_get_reg_trace_dmem_status
#define SETTER_FOR_TRACE_MUTEX_LOCK hal_set_reg_trace_mutex_lock
#define GETTER_FOR_TRACE_MUTEX_LOCK hal_get_reg_trace_mutex_lock
#define GETTER_FOR_TRACE_TBUS_STATUS hal_get_reg_trace_tbus_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_TRACE) */


#ifndef __HAL_MACROS_H__MODULE_K32_DOLOOP_CACHE
#define __HAL_MACROS_H__MODULE_K32_DOLOOP_CACHE

/* -- Kalimba 32-bit DoLoop Cache Control registers. -- */

 /* Field DOLOOP_CACHE_CONFIG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_doloop_cache_config_counters_en() hal_get_register_field8(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_COUNTERS_EN)
#define hal_set_doloop_cache_config_counters_en(x) hal_set_register_field(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_CONFIG_COUNTERS_EN DOLOOP_CACHE_CONFIG
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_CONFIG_COUNTERS_EN DOLOOP_CACHE_CONFIG

 /* Field DOLOOP_CACHE_CONFIG_DOLOOP_EN */
 /* Accessor macros */
#define hal_get_doloop_cache_config_doloop_en() hal_get_register_field8(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_DOLOOP_EN)
#define hal_set_doloop_cache_config_doloop_en(x) hal_set_register_field(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_DOLOOP_EN,(x))
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_CONFIG_DOLOOP_EN DOLOOP_CACHE_CONFIG
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_CONFIG_DOLOOP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_CONFIG_DOLOOP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_CONFIG_DOLOOP_EN DOLOOP_CACHE_CONFIG

 /* Field DOLOOP_CACHE_FILL_COUNT_LSB */
 /* Accessor macros */
#define hal_get_doloop_cache_fill_count() hal_get_register_field32(DOLOOP_CACHE_FILL_COUNT,DOLOOP_CACHE_FILL_COUNT)
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_FILL_COUNT DOLOOP_CACHE_FILL_COUNT
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_FILL_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_FILL_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_FILL_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_FILL_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_FILL_COUNT DOLOOP_CACHE_FILL_COUNT

 /* Field DOLOOP_CACHE_HIT_COUNT_LSB */
 /* Accessor macros */
#define hal_get_doloop_cache_hit_count() hal_get_register_field32(DOLOOP_CACHE_HIT_COUNT,DOLOOP_CACHE_HIT_COUNT)
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_HIT_COUNT DOLOOP_CACHE_HIT_COUNT
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_HIT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_HIT_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_HIT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_HIT_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_HIT_COUNT DOLOOP_CACHE_HIT_COUNT

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_CONFIG_DOLOOP_CACHE_CONFIG
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_CONFIG_END
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_FILL_COUNT_DOLOOP_CACHE_FILL_COUNT
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_FILL_COUNT_END
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_HIT_COUNT_DOLOOP_CACHE_HIT_COUNT
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_HIT_COUNT_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define DOLOOP_CACHE_CONFIG_REG_BITS (2u)
#define hal_set_reg_doloop_cache_config(x) hal_set_register(DOLOOP_CACHE_CONFIG, x, 1)
#define hal_get_reg_doloop_cache_config() hal_get_register(DOLOOP_CACHE_CONFIG, 1)
#define DOLOOP_CACHE_FILL_COUNT_REG_BITS (32u)
#define hal_get_reg_doloop_cache_fill_count() hal_get_register(DOLOOP_CACHE_FILL_COUNT, 1)
#define DOLOOP_CACHE_HIT_COUNT_REG_BITS (32u)
#define hal_get_reg_doloop_cache_hit_count() hal_get_register(DOLOOP_CACHE_HIT_COUNT, 1)

 /* Workings */
#define SETTER_FOR_DOLOOP_CACHE_CONFIG hal_set_reg_doloop_cache_config
#define GETTER_FOR_DOLOOP_CACHE_CONFIG hal_get_reg_doloop_cache_config
#define GETTER_FOR_DOLOOP_CACHE_FILL_COUNT hal_get_reg_doloop_cache_fill_count
#define GETTER_FOR_DOLOOP_CACHE_HIT_COUNT hal_get_reg_doloop_cache_hit_count

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_DOLOOP_CACHE) */





#ifndef __HAL_MACROS_H__MODULE_K32_TIMERS
#define __HAL_MACROS_H__MODULE_K32_TIMERS

/* -- Kalimba 32-bit Timers Control registers -- */

 /* Field TIMER1_EN */
 /* Accessor macros */
#define hal_get_timer1_en() hal_get_register_field8(TIMER1_EN,TIMER1_EN)
#define hal_set_timer1_en(x) hal_set_register_field(TIMER1_EN,TIMER1_EN,(x))
 /* Workings */
#define TYPE_OF_TIMER1_EN TIMER1_EN
#define FIELDS_MASKS_SHIFTED_TIMER1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER1_EN TIMER1_EN

 /* Field TIMER1_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_timer1_trigger() hal_get_register_field32(TIMER1_TRIGGER,TIMER1_TRIGGER)
#define hal_set_timer1_trigger(x) hal_set_register_field(TIMER1_TRIGGER,TIMER1_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TIMER1_TRIGGER TIMER1_TRIGGER
#define FIELDS_MASKS_SHIFTED_TIMER1_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER1_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER1_TRIGGER TIMER1_TRIGGER

 /* Field TIMER2_EN */
 /* Accessor macros */
#define hal_get_timer2_en() hal_get_register_field8(TIMER2_EN,TIMER2_EN)
#define hal_set_timer2_en(x) hal_set_register_field(TIMER2_EN,TIMER2_EN,(x))
 /* Workings */
#define TYPE_OF_TIMER2_EN TIMER2_EN
#define FIELDS_MASKS_SHIFTED_TIMER2_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER2_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER2_EN TIMER2_EN

 /* Field TIMER2_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_timer2_trigger() hal_get_register_field32(TIMER2_TRIGGER,TIMER2_TRIGGER)
#define hal_set_timer2_trigger(x) hal_set_register_field(TIMER2_TRIGGER,TIMER2_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TIMER2_TRIGGER TIMER2_TRIGGER
#define FIELDS_MASKS_SHIFTED_TIMER2_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER2_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER2_TRIGGER TIMER2_TRIGGER

 /* Field TIMER_TIME_LSB */
 /* Accessor macros */
#define hal_get_timer_time() hal_get_register_field32(TIMER_TIME,TIMER_TIME)
 /* Workings */
#define TYPE_OF_TIMER_TIME TIMER_TIME
#define FIELDS_MASKS_SHIFTED_TIMER_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER_TIME TIMER_TIME

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_TIMER1_EN_TIMER1_EN
#define CHECK_FIELD_TYPE_TIMER1_EN_END
#define CHECK_FIELD_TYPE_TIMER1_TRIGGER_TIMER1_TRIGGER
#define CHECK_FIELD_TYPE_TIMER1_TRIGGER_END
#define CHECK_FIELD_TYPE_TIMER2_EN_TIMER2_EN
#define CHECK_FIELD_TYPE_TIMER2_EN_END
#define CHECK_FIELD_TYPE_TIMER2_TRIGGER_TIMER2_TRIGGER
#define CHECK_FIELD_TYPE_TIMER2_TRIGGER_END
#define CHECK_FIELD_TYPE_TIMER_TIME_TIMER_TIME
#define CHECK_FIELD_TYPE_TIMER_TIME_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define TIMER1_EN_REG_BITS (1u)
#define hal_set_reg_timer1_en(x) hal_set_register(TIMER1_EN, x, 1)
#define hal_get_reg_timer1_en() hal_get_register(TIMER1_EN, 1)
#define TIMER1_TRIGGER_REG_BITS (32u)
#define hal_set_reg_timer1_trigger(x) hal_set_register(TIMER1_TRIGGER, x, 1)
#define hal_get_reg_timer1_trigger() hal_get_register(TIMER1_TRIGGER, 1)
#define TIMER2_EN_REG_BITS (1u)
#define hal_set_reg_timer2_en(x) hal_set_register(TIMER2_EN, x, 1)
#define hal_get_reg_timer2_en() hal_get_register(TIMER2_EN, 1)
#define TIMER2_TRIGGER_REG_BITS (32u)
#define hal_set_reg_timer2_trigger(x) hal_set_register(TIMER2_TRIGGER, x, 1)
#define hal_get_reg_timer2_trigger() hal_get_register(TIMER2_TRIGGER, 1)
#define TIMER_TIME_REG_BITS (32u)
#define hal_get_reg_timer_time() hal_get_register(TIMER_TIME, 1)

 /* Workings */
#define SETTER_FOR_TIMER1_EN hal_set_reg_timer1_en
#define GETTER_FOR_TIMER1_EN hal_get_reg_timer1_en
#define SETTER_FOR_TIMER1_TRIGGER hal_set_reg_timer1_trigger
#define GETTER_FOR_TIMER1_TRIGGER hal_get_reg_timer1_trigger
#define SETTER_FOR_TIMER2_EN hal_set_reg_timer2_en
#define GETTER_FOR_TIMER2_EN hal_get_reg_timer2_en
#define SETTER_FOR_TIMER2_TRIGGER hal_set_reg_timer2_trigger
#define GETTER_FOR_TIMER2_TRIGGER hal_get_reg_timer2_trigger
#define GETTER_FOR_TIMER_TIME hal_get_reg_timer_time

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_TIMERS) */




#if defined(IO_DEFS_MODULE_FREQ_COUNTER) 

#ifndef __HAL_MACROS_H__MODULE_FREQ_COUNTER
#define __HAL_MACROS_H__MODULE_FREQ_COUNTER

/* -- Digital frequency counter -- */

 /* Field FREQ_COUNT_ENABLE */
 /* Accessor macros */
#define hal_get_freq_count_enable() hal_get_register_field8(FREQ_COUNT_CONTROL,FREQ_COUNT_ENABLE)
#define hal_set_freq_count_enable(x) hal_set_register_field(FREQ_COUNT_CONTROL,FREQ_COUNT_ENABLE,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_ENABLE FREQ_COUNT_CONTROL
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_ENABLE FREQ_COUNT_CONTROL

 /* Field FREQ_COUNT_MON_BT_CLK_SEL_LSB */
 /* Accessor macros */
#define hal_get_freq_count_mon_bt_clk_sel() ((freq_count_mon_bt_clk_sel) hal_get_register_field8(FREQ_COUNT_CONTROL_BT,FREQ_COUNT_MON_BT_CLK_SEL))
#define hal_set_freq_count_mon_bt_clk_sel(x) hal_set_register_field(FREQ_COUNT_CONTROL_BT,FREQ_COUNT_MON_BT_CLK_SEL,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_MON_BT_CLK_SEL FREQ_COUNT_CONTROL_BT
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_MON_BT_CLK_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL_BT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_MON_BT_CLK_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL_BT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_MON_BT_CLK_SEL FREQ_COUNT_CONTROL_BT

 /* Field FREQ_COUNT_MON_CLK_EDGE_COUNT_LSB */
 /* Accessor macros */
#define hal_get_freq_count_mon_clk_edge_count() hal_get_register_field32(FREQ_COUNT_MON_CLK_EDGE_COUNT,FREQ_COUNT_MON_CLK_EDGE_COUNT)
 /* Workings */
#define TYPE_OF_FREQ_COUNT_MON_CLK_EDGE_COUNT FREQ_COUNT_MON_CLK_EDGE_COUNT
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_MON_CLK_EDGE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_MON_CLK_EDGE_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_MON_CLK_EDGE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_MON_CLK_EDGE_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_MON_CLK_EDGE_COUNT FREQ_COUNT_MON_CLK_EDGE_COUNT

 /* Field FREQ_COUNT_MON_CLK_SEL_LSB */
 /* Accessor macros */
#define hal_get_freq_count_mon_clk_sel() hal_get_register_field8(FREQ_COUNT_CONTROL,FREQ_COUNT_MON_CLK_SEL)
#define hal_set_freq_count_mon_clk_sel(x) hal_set_register_field(FREQ_COUNT_CONTROL,FREQ_COUNT_MON_CLK_SEL,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_MON_CLK_SEL FREQ_COUNT_CONTROL
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_MON_CLK_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_MON_CLK_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_MON_CLK_SEL FREQ_COUNT_CONTROL

 /* Field FREQ_COUNT_PRE_SCALE_SEL_LSB */
 /* Accessor macros */
#define hal_get_freq_count_pre_scale_sel() ((freq_count_pre_scale_sel) hal_get_register_field8(FREQ_COUNT_CONTROL,FREQ_COUNT_PRE_SCALE_SEL))
#define hal_set_freq_count_pre_scale_sel(x) hal_set_register_field(FREQ_COUNT_CONTROL,FREQ_COUNT_PRE_SCALE_SEL,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_PRE_SCALE_SEL FREQ_COUNT_CONTROL
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_PRE_SCALE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_PRE_SCALE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_PRE_SCALE_SEL FREQ_COUNT_CONTROL

 /* Field FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT_LSB */
 /* Accessor macros */
#define hal_get_freq_count_ref_clk_target_edge_count() hal_get_register_field32(FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT,FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT)
#define hal_set_freq_count_ref_clk_target_edge_count(x) hal_set_register_field(FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT,FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT

 /* Field FREQ_COUNT_RING_OSC_EN */
 /* Accessor macros */
#define hal_get_freq_count_ring_osc_en() hal_get_register_field8(FREQ_COUNT_CONTROL,FREQ_COUNT_RING_OSC_EN)
#define hal_set_freq_count_ring_osc_en(x) hal_set_register_field(FREQ_COUNT_CONTROL,FREQ_COUNT_RING_OSC_EN,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_RING_OSC_EN FREQ_COUNT_CONTROL
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_RING_OSC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_RING_OSC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_RING_OSC_EN FREQ_COUNT_CONTROL

 /* Field FREQ_COUNT_RING_OSC_SEL */
 /* Accessor macros */
#define hal_get_freq_count_ring_osc_sel() hal_get_register_field8(FREQ_COUNT_CONTROL,FREQ_COUNT_RING_OSC_SEL)
#define hal_set_freq_count_ring_osc_sel(x) hal_set_register_field(FREQ_COUNT_CONTROL,FREQ_COUNT_RING_OSC_SEL,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_RING_OSC_SEL FREQ_COUNT_CONTROL
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_RING_OSC_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_RING_OSC_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_RING_OSC_SEL FREQ_COUNT_CONTROL

 /* Field FREQ_COUNT_RING_OSC_SEL_NAND_NOR_INV_GATE_LSB */
 /* Accessor macros */
#define hal_get_freq_count_ring_osc_sel_nand_nor_inv_gate() hal_get_register_field8(FREQ_COUNT_CONTROL,FREQ_COUNT_RING_OSC_SEL_NAND_NOR_INV_GATE)
#define hal_set_freq_count_ring_osc_sel_nand_nor_inv_gate(x) hal_set_register_field(FREQ_COUNT_CONTROL,FREQ_COUNT_RING_OSC_SEL_NAND_NOR_INV_GATE,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_RING_OSC_SEL_NAND_NOR_INV_GATE FREQ_COUNT_CONTROL
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_RING_OSC_SEL_NAND_NOR_INV_GATE(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_RING_OSC_SEL_NAND_NOR_INV_GATE(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_RING_OSC_SEL_NAND_NOR_INV_GATE FREQ_COUNT_CONTROL

 /* Field FREQ_COUNT_SWAP_COUNTER_CLOCKS */
 /* Accessor macros */
#define hal_get_freq_count_swap_counter_clocks() hal_get_register_field8(FREQ_COUNT_CONTROL,FREQ_COUNT_SWAP_COUNTER_CLOCKS)
#define hal_set_freq_count_swap_counter_clocks(x) hal_set_register_field(FREQ_COUNT_CONTROL,FREQ_COUNT_SWAP_COUNTER_CLOCKS,(x))
 /* Workings */
#define TYPE_OF_FREQ_COUNT_SWAP_COUNTER_CLOCKS FREQ_COUNT_CONTROL
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_SWAP_COUNTER_CLOCKS(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_SWAP_COUNTER_CLOCKS(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FREQ_COUNT_SWAP_COUNTER_CLOCKS FREQ_COUNT_CONTROL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_FREQ_COUNT_CONTROL_FREQ_COUNT_CONTROL
#define CHECK_FIELD_TYPE_FREQ_COUNT_CONTROL_END
#define CHECK_FIELD_TYPE_FREQ_COUNT_CONTROL_BT_FREQ_COUNT_CONTROL_BT
#define CHECK_FIELD_TYPE_FREQ_COUNT_CONTROL_BT_END
#define CHECK_FIELD_TYPE_FREQ_COUNT_MON_CLK_EDGE_COUNT_FREQ_COUNT_MON_CLK_EDGE_COUNT
#define CHECK_FIELD_TYPE_FREQ_COUNT_MON_CLK_EDGE_COUNT_END
#define CHECK_FIELD_TYPE_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT
#define CHECK_FIELD_TYPE_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_FREQ_COUNT_CONTROL_BT(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL_BT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FREQ_COUNT_CONTROL_BT(next, val, rest) \
   (CHECK_FIELD_TYPE(FREQ_COUNT_CONTROL_BT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define FREQ_COUNT_CONTROL_REG_BITS (12u)
#define hal_set_reg_freq_count_control(x) hal_set_register(FREQ_COUNT_CONTROL, x, 1)
#define hal_get_reg_freq_count_control() hal_get_register(FREQ_COUNT_CONTROL, 1)
#define FREQ_COUNT_CONTROL_BT_REG_BITS (12u)
#define hal_set_reg_freq_count_control_bt(x) hal_set_register(FREQ_COUNT_CONTROL_BT, x, 1)
#define hal_get_reg_freq_count_control_bt() hal_get_register(FREQ_COUNT_CONTROL_BT, 1)
#define FREQ_COUNT_MON_CLK_EDGE_COUNT_REG_BITS (32u)
#define hal_get_reg_freq_count_mon_clk_edge_count() hal_get_register(FREQ_COUNT_MON_CLK_EDGE_COUNT, 1)
#define FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT_REG_BITS (32u)
#define hal_set_reg_freq_count_ref_clk_target_edge_count(x) hal_set_register(FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT, x, 1)
#define hal_get_reg_freq_count_ref_clk_target_edge_count() hal_get_register(FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT, 1)
#define FREQ_COUNT_STATE_REG_BITS (2u)
#define hal_get_reg_freq_count_state() hal_get_register(FREQ_COUNT_STATE, 1)

 /* Workings */
#define SETTER_FOR_FREQ_COUNT_CONTROL hal_set_reg_freq_count_control
#define GETTER_FOR_FREQ_COUNT_CONTROL hal_get_reg_freq_count_control
#define SETTER_FOR_FREQ_COUNT_CONTROL_BT hal_set_reg_freq_count_control_bt
#define GETTER_FOR_FREQ_COUNT_CONTROL_BT hal_get_reg_freq_count_control_bt
#define GETTER_FOR_FREQ_COUNT_MON_CLK_EDGE_COUNT hal_get_reg_freq_count_mon_clk_edge_count
#define SETTER_FOR_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT hal_set_reg_freq_count_ref_clk_target_edge_count
#define GETTER_FOR_FREQ_COUNT_REF_CLK_TARGET_EDGE_COUNT hal_get_reg_freq_count_ref_clk_target_edge_count
#define GETTER_FOR_FREQ_COUNT_STATE hal_get_reg_freq_count_state

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_FREQ_COUNTER) */
#endif /* __HAL_MACROS_H__MODULE_FREQ_COUNTER */


#ifndef __HAL_MACROS_H__MODULE_K32_PREFETCH
#define __HAL_MACROS_H__MODULE_K32_PREFETCH

/* -- Kalimba 32-bit Prefetch Control registers. -- */

 /* Field PREFETCH_CONFIG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_prefetch_config_counters_en() hal_get_register_field8(PREFETCH_CONFIG,PREFETCH_CONFIG_COUNTERS_EN)
#define hal_set_prefetch_config_counters_en(x) hal_set_register_field(PREFETCH_CONFIG,PREFETCH_CONFIG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_PREFETCH_CONFIG_COUNTERS_EN PREFETCH_CONFIG
#define FIELDS_MASKS_SHIFTED_PREFETCH_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_CONFIG_COUNTERS_EN PREFETCH_CONFIG

 /* Field PREFETCH_DEBUG_ALOW_PREFETCHING_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_alow_prefetching() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_ALOW_PREFETCHING)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_ALOW_PREFETCHING PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_ALOW_PREFETCHING(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_ALOW_PREFETCHING(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_ALOW_PREFETCHING PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MEM_REQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_mem_request() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MEM_REQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MEM_REQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MEM_REQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MEM_REQUEST_REG */
 /* Accessor macros */
#define hal_get_prefetch_debug_mem_request_reg() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MEM_REQUEST_REG)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MEM_REQUEST_REG PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MEM_REQUEST_REG PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MISS_SEQ_T1 */
 /* Accessor macros */
#define hal_get_prefetch_debug_miss_seq_t1() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MISS_SEQ_T1)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MISS_SEQ_T1 PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T1(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T1(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MISS_SEQ_T1 PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MISS_SEQ_T2 */
 /* Accessor macros */
#define hal_get_prefetch_debug_miss_seq_t2() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MISS_SEQ_T2)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MISS_SEQ_T2 PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T2(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T2(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MISS_SEQ_T2 PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_NEXT_MEMREQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_next_memrequest() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_NEXT_MEMREQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_NEXT_MEMREQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_NEXT_MEMREQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_NEXT_MEMREQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_NEXT_MEMREQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PMADDRIN_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmaddrin() hal_get_register_field16(PREFETCH_DEBUG_ADDR,PREFETCH_DEBUG_PMADDRIN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMADDRIN PREFETCH_DEBUG_ADDR
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMADDRIN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMADDRIN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMADDRIN PREFETCH_DEBUG_ADDR

 /* Field PREFETCH_DEBUG_PMADDROUT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmaddrout() hal_get_register_field16(PREFETCH_DEBUG_ADDR,PREFETCH_DEBUG_PMADDROUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMADDROUT PREFETCH_DEBUG_ADDR
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMADDROUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMADDROUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMADDROUT PREFETCH_DEBUG_ADDR

 /* Field PREFETCH_DEBUG_PMEM_REQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmem_request() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PMEM_REQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMEM_REQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMEM_REQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PM_WAIT_IN_PREV */
 /* Accessor macros */
#define hal_get_prefetch_debug_pm_wait_in_prev() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PM_WAIT_IN_PREV)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PM_WAIT_IN_PREV PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PM_WAIT_IN_PREV(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PM_WAIT_IN_PREV(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PM_WAIT_IN_PREV PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_HIT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_hit() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_HIT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_HIT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_HIT PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_VALID */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_valid() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_VALID)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_VALID PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_VALID PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_VALIDS_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_valids() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_VALIDS)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_VALIDS PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALIDS(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALIDS(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_VALIDS PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_READ_EN_IN */
 /* Accessor macros */
#define hal_get_prefetch_debug_read_en_in() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_READ_EN_IN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_READ_EN_IN PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_READ_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_READ_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_READ_EN_IN PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_READ_EN_OUT */
 /* Accessor macros */
#define hal_get_prefetch_debug_read_en_out() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_READ_EN_OUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_READ_EN_OUT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_READ_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_READ_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_READ_EN_OUT PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_VALID_PREFETCH_DATA */
 /* Accessor macros */
#define hal_get_prefetch_debug_valid_prefetch_data() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_VALID_PREFETCH_DATA)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_VALID_PREFETCH_DATA PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_VALID_PREFETCH_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_VALID_PREFETCH_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_VALID_PREFETCH_DATA PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_WAIT_IN */
 /* Accessor macros */
#define hal_get_prefetch_debug_wait_in() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_WAIT_IN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_WAIT_IN PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_WAIT_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_WAIT_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_WAIT_IN PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_WAIT_OUT */
 /* Accessor macros */
#define hal_get_prefetch_debug_wait_out() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_WAIT_OUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_WAIT_OUT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_WAIT_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_WAIT_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_WAIT_OUT PREFETCH_DEBUG

 /* Field PREFETCH_FLUSH */
 /* Accessor macros */
#define hal_get_prefetch_flush() hal_get_register_field8(PREFETCH_FLUSH,PREFETCH_FLUSH)
#define hal_set_prefetch_flush(x) hal_set_register_field(PREFETCH_FLUSH,PREFETCH_FLUSH,(x))
 /* Workings */
#define TYPE_OF_PREFETCH_FLUSH PREFETCH_FLUSH
#define FIELDS_MASKS_SHIFTED_PREFETCH_FLUSH(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_FLUSH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_FLUSH(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_FLUSH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_FLUSH PREFETCH_FLUSH

 /* Field PREFETCH_PREFETCH_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_prefetch_count() hal_get_register_field32(PREFETCH_PREFETCH_COUNT,PREFETCH_PREFETCH_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_PREFETCH_COUNT PREFETCH_PREFETCH_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_PREFETCH_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_PREFETCH_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_PREFETCH_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_PREFETCH_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_PREFETCH_COUNT PREFETCH_PREFETCH_COUNT

 /* Field PREFETCH_REQUEST_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_request_count() hal_get_register_field32(PREFETCH_REQUEST_COUNT,PREFETCH_REQUEST_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_REQUEST_COUNT PREFETCH_REQUEST_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_REQUEST_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_REQUEST_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_REQUEST_COUNT PREFETCH_REQUEST_COUNT

 /* Field PREFETCH_WAIT_OUT_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_wait_out_count() hal_get_register_field32(PREFETCH_WAIT_OUT_COUNT,PREFETCH_WAIT_OUT_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_WAIT_OUT_COUNT PREFETCH_WAIT_OUT_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_WAIT_OUT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_WAIT_OUT_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_WAIT_OUT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_WAIT_OUT_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_WAIT_OUT_COUNT PREFETCH_WAIT_OUT_COUNT

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_PREFETCH_CONFIG_PREFETCH_CONFIG
#define CHECK_FIELD_TYPE_PREFETCH_CONFIG_END
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_PREFETCH_DEBUG
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_END
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_ADDR_PREFETCH_DEBUG_ADDR
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_ADDR_END
#define CHECK_FIELD_TYPE_PREFETCH_FLUSH_PREFETCH_FLUSH
#define CHECK_FIELD_TYPE_PREFETCH_FLUSH_END
#define CHECK_FIELD_TYPE_PREFETCH_PREFETCH_COUNT_PREFETCH_PREFETCH_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_PREFETCH_COUNT_END
#define CHECK_FIELD_TYPE_PREFETCH_REQUEST_COUNT_PREFETCH_REQUEST_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_REQUEST_COUNT_END
#define CHECK_FIELD_TYPE_PREFETCH_WAIT_OUT_COUNT_PREFETCH_WAIT_OUT_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_WAIT_OUT_COUNT_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_PREFETCH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define PREFETCH_CONFIG_REG_BITS (1u)
#define hal_set_reg_prefetch_config(x) hal_set_register(PREFETCH_CONFIG, x, 1)
#define hal_get_reg_prefetch_config() hal_get_register(PREFETCH_CONFIG, 1)
#define PREFETCH_DEBUG_REG_BITS (25u)
#define hal_get_reg_prefetch_debug() hal_get_register(PREFETCH_DEBUG, 1)
#define PREFETCH_DEBUG_ADDR_REG_BITS (32u)
#define hal_get_reg_prefetch_debug_addr() hal_get_register(PREFETCH_DEBUG_ADDR, 1)
#define PREFETCH_FLUSH_REG_BITS (1u)
#define hal_set_reg_prefetch_flush(x) hal_set_register(PREFETCH_FLUSH, x, 1)
#define hal_get_reg_prefetch_flush() hal_get_register(PREFETCH_FLUSH, 1)
#define PREFETCH_PREFETCH_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_prefetch_count() hal_get_register(PREFETCH_PREFETCH_COUNT, 1)
#define PREFETCH_REQUEST_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_request_count() hal_get_register(PREFETCH_REQUEST_COUNT, 1)
#define PREFETCH_WAIT_OUT_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_wait_out_count() hal_get_register(PREFETCH_WAIT_OUT_COUNT, 1)

 /* Workings */
#define SETTER_FOR_PREFETCH_CONFIG hal_set_reg_prefetch_config
#define GETTER_FOR_PREFETCH_CONFIG hal_get_reg_prefetch_config
#define GETTER_FOR_PREFETCH_DEBUG hal_get_reg_prefetch_debug
#define GETTER_FOR_PREFETCH_DEBUG_ADDR hal_get_reg_prefetch_debug_addr
#define SETTER_FOR_PREFETCH_FLUSH hal_set_reg_prefetch_flush
#define GETTER_FOR_PREFETCH_FLUSH hal_get_reg_prefetch_flush
#define GETTER_FOR_PREFETCH_PREFETCH_COUNT hal_get_reg_prefetch_prefetch_count
#define GETTER_FOR_PREFETCH_REQUEST_COUNT hal_get_reg_prefetch_request_count
#define GETTER_FOR_PREFETCH_WAIT_OUT_COUNT hal_get_reg_prefetch_wait_out_count

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_PREFETCH) */






#if defined(IO_DEFS_MODULE_ANC) 

#ifndef __HAL_MACROS_H__MODULE_ANC
#define __HAL_MACROS_H__MODULE_ANC

/* -- Control registers for ANC block -- */

 /* Field CDC_ANC0_ANC_ADC_DMIC_A_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_adc_dmic_a_sel() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_ADC_DMIC_A_SEL)
#define hal_set_cdc_anc0_anc_adc_dmic_a_sel(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_ADC_DMIC_A_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_ADC_DMIC_A_SEL ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_ADC_DMIC_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_ADC_DMIC_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_ADC_DMIC_A_SEL ANC_CONTROL18

 /* Field CDC_ANC0_ANC_ADC_DMIC_B_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_adc_dmic_b_sel() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_ADC_DMIC_B_SEL)
#define hal_set_cdc_anc0_anc_adc_dmic_b_sel(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_ADC_DMIC_B_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_ADC_DMIC_B_SEL ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_ADC_DMIC_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_ADC_DMIC_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_ADC_DMIC_B_SEL ANC_CONTROL18

 /* Field CDC_ANC0_ANC_DCFILT_A_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_dcfilt_a_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_DCFILT_A_EN)
#define hal_set_cdc_anc0_anc_dcfilt_a_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_DCFILT_A_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_DCFILT_A_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_DCFILT_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_DCFILT_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_DCFILT_A_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_DCFILT_B_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_dcfilt_b_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_DCFILT_B_EN)
#define hal_set_cdc_anc0_anc_dcfilt_b_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_DCFILT_B_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_DCFILT_B_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_DCFILT_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_DCFILT_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_DCFILT_B_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_DMIC_X0P5_A_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_dmic_x0p5_a_sel() hal_get_register_field8(ANC_CONTROL28,CDC_ANC0_ANC_DMIC_X0P5_A_SEL)
#define hal_set_cdc_anc0_anc_dmic_x0p5_a_sel(x) hal_set_register_field(ANC_CONTROL28,CDC_ANC0_ANC_DMIC_X0P5_A_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_DMIC_X0P5_A_SEL ANC_CONTROL28
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_DMIC_X0P5_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_DMIC_X0P5_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_DMIC_X0P5_A_SEL ANC_CONTROL28

 /* Field CDC_ANC0_ANC_DMIC_X0P5_B_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_dmic_x0p5_b_sel() hal_get_register_field8(ANC_CONTROL28,CDC_ANC0_ANC_DMIC_X0P5_B_SEL)
#define hal_set_cdc_anc0_anc_dmic_x0p5_b_sel(x) hal_set_register_field(ANC_CONTROL28,CDC_ANC0_ANC_DMIC_X0P5_B_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_DMIC_X0P5_B_SEL ANC_CONTROL28
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_DMIC_X0P5_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_DMIC_X0P5_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_DMIC_X0P5_B_SEL ANC_CONTROL28

 /* Field CDC_ANC0_ANC_DMIC_X2_A_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_dmic_x2_a_sel() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_DMIC_X2_A_SEL)
#define hal_set_cdc_anc0_anc_dmic_x2_a_sel(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_DMIC_X2_A_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_DMIC_X2_A_SEL ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_DMIC_X2_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_DMIC_X2_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_DMIC_X2_A_SEL ANC_CONTROL18

 /* Field CDC_ANC0_ANC_DMIC_X2_B_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_dmic_x2_b_sel() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_DMIC_X2_B_SEL)
#define hal_set_cdc_anc0_anc_dmic_x2_b_sel(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_DMIC_X2_B_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_DMIC_X2_B_SEL ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_DMIC_X2_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_DMIC_X2_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_DMIC_X2_B_SEL ANC_CONTROL18

 /* Field CDC_ANC0_ANC_FBGAIN_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_fbgain_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_FBGAIN_EN)
#define hal_set_cdc_anc0_anc_fbgain_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_FBGAIN_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_FBGAIN_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_FBGAIN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_FBGAIN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_FBGAIN_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_FB_TUNE_DSM_CLR */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_fb_tune_dsm_clr() hal_get_register_field8(ANC_CONTROL28,CDC_ANC0_ANC_FB_TUNE_DSM_CLR)
#define hal_set_cdc_anc0_anc_fb_tune_dsm_clr(x) hal_set_register_field(ANC_CONTROL28,CDC_ANC0_ANC_FB_TUNE_DSM_CLR,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_FB_TUNE_DSM_CLR ANC_CONTROL28
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_FB_TUNE_DSM_CLR(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_FB_TUNE_DSM_CLR(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_FB_TUNE_DSM_CLR ANC_CONTROL28

 /* Field CDC_ANC0_ANC_FB_TUNE_DSM_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_fb_tune_dsm_en() hal_get_register_field8(ANC_CONTROL28,CDC_ANC0_ANC_FB_TUNE_DSM_EN)
#define hal_set_cdc_anc0_anc_fb_tune_dsm_en(x) hal_set_register_field(ANC_CONTROL28,CDC_ANC0_ANC_FB_TUNE_DSM_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_FB_TUNE_DSM_EN ANC_CONTROL28
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_FB_TUNE_DSM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_FB_TUNE_DSM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_FB_TUNE_DSM_EN ANC_CONTROL28

 /* Field CDC_ANC0_ANC_FFGAIN_A_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_ffgain_a_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_FFGAIN_A_EN)
#define hal_set_cdc_anc0_anc_ffgain_a_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_FFGAIN_A_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_FFGAIN_A_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_FFGAIN_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_FFGAIN_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_FFGAIN_A_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_FFGAIN_B_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_ffgain_b_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_FFGAIN_B_EN)
#define hal_set_cdc_anc0_anc_ffgain_b_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_FFGAIN_B_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_FFGAIN_B_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_FFGAIN_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_FFGAIN_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_FFGAIN_B_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_FFLE_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_ffle_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_FFLE_EN)
#define hal_set_cdc_anc0_anc_ffle_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_FFLE_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_FFLE_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_FFLE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_FFLE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_FFLE_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_OUTMIX_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_outmix_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_OUTMIX_EN)
#define hal_set_cdc_anc0_anc_outmix_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_OUTMIX_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_OUTMIX_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_OUTMIX_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_OUTMIX_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_OUTMIX_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_OUT_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_out_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_OUT_EN)
#define hal_set_cdc_anc0_anc_out_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_OUT_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_OUT_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_OUT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_OUT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_OUT_EN ANC_CONTROL18

 /* Field CDC_ANC0_ANC_SMLPF_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_anc_smlpf_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_ANC_SMLPF_EN)
#define hal_set_cdc_anc0_anc_smlpf_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_ANC_SMLPF_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ANC_SMLPF_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ANC_SMLPF_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ANC_SMLPF_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ANC_SMLPF_EN ANC_CONTROL18

 /* Field CDC_ANC0_AUTO_INC */
 /* Accessor macros */
#define hal_get_cdc_anc0_auto_inc() hal_get_register_field8(CDC_ANC0_IIR_COEFF_1_CTL,CDC_ANC0_AUTO_INC)
#define hal_set_cdc_anc0_auto_inc(x) hal_set_register_field(CDC_ANC0_IIR_COEFF_1_CTL,CDC_ANC0_AUTO_INC,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_AUTO_INC CDC_ANC0_IIR_COEFF_1_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_AUTO_INC(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_1_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_AUTO_INC(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_1_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_AUTO_INC CDC_ANC0_IIR_COEFF_1_CTL

 /* Field CDC_ANC0_A_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_a_shift() hal_get_register_field8(ANC_CONTROL22,CDC_ANC0_A_SHIFT)
#define hal_set_cdc_anc0_a_shift(x) hal_set_register_field(ANC_CONTROL22,CDC_ANC0_A_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_A_SHIFT ANC_CONTROL22
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_A_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_A_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_A_SHIFT ANC_CONTROL22

 /* Field CDC_ANC0_B_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_b_shift() hal_get_register_field8(ANC_CONTROL22,CDC_ANC0_B_SHIFT)
#define hal_set_cdc_anc0_b_shift(x) hal_set_register_field(ANC_CONTROL22,CDC_ANC0_B_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_B_SHIFT ANC_CONTROL22
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_B_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_B_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_B_SHIFT ANC_CONTROL22

 /* Field CDC_ANC0_CLK_RESET_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_clk_reset_ctl() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_CLK_RESET_CTL)
#define hal_set_cdc_anc0_clk_reset_ctl(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_CLK_RESET_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_CLK_RESET_CTL ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_CLK_RESET_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_CLK_RESET_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_CLK_RESET_CTL ANC_CONTROL17

 /* Field CDC_ANC0_COEF_ADAPTIVE */
 /* Accessor macros */
#define hal_get_cdc_anc0_coef_adaptive() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_COEF_ADAPTIVE)
#define hal_set_cdc_anc0_coef_adaptive(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_COEF_ADAPTIVE,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_COEF_ADAPTIVE ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_COEF_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_COEF_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_COEF_ADAPTIVE ANC_CONTROL23

 /* Field CDC_ANC0_COEF_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_coef() hal_get_register_field8(CDC_ANC0_IIR_COEFF_2_CTL,CDC_ANC0_COEF)
#define hal_set_cdc_anc0_coef(x) hal_set_register_field(CDC_ANC0_IIR_COEFF_2_CTL,CDC_ANC0_COEF,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_COEF CDC_ANC0_IIR_COEFF_2_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_COEF(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_2_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_COEF(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_2_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_COEF CDC_ANC0_IIR_COEFF_2_CTL

 /* Field CDC_ANC0_COEF_PTR_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_coef_ptr() hal_get_register_field8(CDC_ANC0_IIR_COEFF_1_CTL,CDC_ANC0_COEF_PTR)
#define hal_set_cdc_anc0_coef_ptr(x) hal_set_register_field(CDC_ANC0_IIR_COEFF_1_CTL,CDC_ANC0_COEF_PTR,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_COEF_PTR CDC_ANC0_IIR_COEFF_1_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_COEF_PTR(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_1_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_COEF_PTR(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_1_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_COEF_PTR CDC_ANC0_IIR_COEFF_1_CTL

 /* Field CDC_ANC0_COEF_SMP_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_coef_smp_en() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_COEF_SMP_EN)
#define hal_set_cdc_anc0_coef_smp_en(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_COEF_SMP_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_COEF_SMP_EN ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_COEF_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_COEF_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_COEF_SMP_EN ANC_CONTROL23

 /* Field CDC_ANC0_COEF_UPDATE_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_coef_update_en() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_COEF_UPDATE_EN)
#define hal_set_cdc_anc0_coef_update_en(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_COEF_UPDATE_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_COEF_UPDATE_EN ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_COEF_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_COEF_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_COEF_UPDATE_EN ANC_CONTROL23

 /* Field CDC_ANC0_DCFLT_SHIFT_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_dcflt_shift_ctl() hal_get_register_field8(ANC_CONTROL22,CDC_ANC0_DCFLT_SHIFT_CTL)
#define hal_set_cdc_anc0_dcflt_shift_ctl(x) hal_set_register_field(ANC_CONTROL22,CDC_ANC0_DCFLT_SHIFT_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_DCFLT_SHIFT_CTL ANC_CONTROL22
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_DCFLT_SHIFT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_DCFLT_SHIFT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_DCFLT_SHIFT_CTL ANC_CONTROL22

 /* Field CDC_ANC0_FB_CLK_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_fb_clk_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_FB_CLK_EN)
#define hal_set_cdc_anc0_fb_clk_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_FB_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FB_CLK_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FB_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FB_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FB_CLK_EN ANC_CONTROL17

 /* Field CDC_ANC0_FB_GAIN_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_fb_gain_ctl() hal_get_register_field8(ANC_CONTROL27,CDC_ANC0_FB_GAIN_CTL)
#define hal_set_cdc_anc0_fb_gain_ctl(x) hal_set_register_field(ANC_CONTROL27,CDC_ANC0_FB_GAIN_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FB_GAIN_CTL ANC_CONTROL27
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FB_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL27, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FB_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL27, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FB_GAIN_CTL ANC_CONTROL27

 /* Field CDC_ANC0_FB_GAIN_UPDATED */
 /* Accessor macros */
#define hal_get_cdc_anc0_fb_gain_updated() hal_get_register_field8(ANC_STATUS0,CDC_ANC0_FB_GAIN_UPDATED)
 /* Workings */
#define TYPE_OF_CDC_ANC0_FB_GAIN_UPDATED ANC_STATUS0
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FB_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FB_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FB_GAIN_UPDATED ANC_STATUS0

 /* Field CDC_ANC0_FB_LPF_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_fb_lpf_shift() hal_get_register_field8(ANC_CONTROL19,CDC_ANC0_FB_LPF_SHIFT)
#define hal_set_cdc_anc0_fb_lpf_shift(x) hal_set_register_field(ANC_CONTROL19,CDC_ANC0_FB_LPF_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FB_LPF_SHIFT ANC_CONTROL19
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FB_LPF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FB_LPF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FB_LPF_SHIFT ANC_CONTROL19

 /* Field CDC_ANC0_FB_ON_FBMON_IS_TRUE */
 /* Accessor macros */
#define hal_get_cdc_anc0_fb_on_fbmon_is_true() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_FB_ON_FBMON_IS_TRUE)
#define hal_set_cdc_anc0_fb_on_fbmon_is_true(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_FB_ON_FBMON_IS_TRUE,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FB_ON_FBMON_IS_TRUE ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FB_ON_FBMON_IS_TRUE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FB_ON_FBMON_IS_TRUE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FB_ON_FBMON_IS_TRUE ANC_CONTROL18

 /* Field CDC_ANC0_FB_RESET_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_fb_reset_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_FB_RESET_EN)
#define hal_set_cdc_anc0_fb_reset_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_FB_RESET_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FB_RESET_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FB_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FB_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FB_RESET_EN ANC_CONTROL17

 /* Field CDC_ANC0_FB_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_fb_shift() hal_get_register_field8(ANC_CONTROL19,CDC_ANC0_FB_SHIFT)
#define hal_set_cdc_anc0_fb_shift(x) hal_set_register_field(ANC_CONTROL19,CDC_ANC0_FB_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FB_SHIFT ANC_CONTROL19
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FB_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FB_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FB_SHIFT ANC_CONTROL19

 /* Field CDC_ANC0_FFGAIN_ADAPTIVE */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffgain_adaptive() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_FFGAIN_ADAPTIVE)
#define hal_set_cdc_anc0_ffgain_adaptive(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_FFGAIN_ADAPTIVE,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFGAIN_ADAPTIVE ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFGAIN_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFGAIN_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFGAIN_ADAPTIVE ANC_CONTROL23

 /* Field CDC_ANC0_FFGAIN_SMP_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffgain_smp_en() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_FFGAIN_SMP_EN)
#define hal_set_cdc_anc0_ffgain_smp_en(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_FFGAIN_SMP_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFGAIN_SMP_EN ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFGAIN_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFGAIN_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFGAIN_SMP_EN ANC_CONTROL23

 /* Field CDC_ANC0_FFGAIN_UPDATE_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffgain_update_en() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_FFGAIN_UPDATE_EN)
#define hal_set_cdc_anc0_ffgain_update_en(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_FFGAIN_UPDATE_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFGAIN_UPDATE_EN ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFGAIN_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFGAIN_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFGAIN_UPDATE_EN ANC_CONTROL23

 /* Field CDC_ANC0_FFGAIN_ZCD_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffgain_zcd_en() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_FFGAIN_ZCD_EN)
#define hal_set_cdc_anc0_ffgain_zcd_en(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_FFGAIN_ZCD_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFGAIN_ZCD_EN ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFGAIN_ZCD_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFGAIN_ZCD_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFGAIN_ZCD_EN ANC_CONTROL23

 /* Field CDC_ANC0_FF_A_GAIN_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_ff_a_gain_ctl() hal_get_register_field8(ANC_CONTROL26,CDC_ANC0_FF_A_GAIN_CTL)
#define hal_set_cdc_anc0_ff_a_gain_ctl(x) hal_set_register_field(ANC_CONTROL26,CDC_ANC0_FF_A_GAIN_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FF_A_GAIN_CTL ANC_CONTROL26
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FF_A_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL26, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FF_A_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL26, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FF_A_GAIN_CTL ANC_CONTROL26

 /* Field CDC_ANC0_FF_B_GAIN_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_ff_b_gain_ctl() hal_get_register_field8(ANC_CONTROL26,CDC_ANC0_FF_B_GAIN_CTL)
#define hal_set_cdc_anc0_ff_b_gain_ctl(x) hal_set_register_field(ANC_CONTROL26,CDC_ANC0_FF_B_GAIN_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FF_B_GAIN_CTL ANC_CONTROL26
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FF_B_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL26, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FF_B_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL26, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FF_B_GAIN_CTL ANC_CONTROL26

 /* Field CDC_ANC0_FF_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_ff_shift() hal_get_register_field8(ANC_CONTROL19,CDC_ANC0_FF_SHIFT)
#define hal_set_cdc_anc0_ff_shift(x) hal_set_register_field(ANC_CONTROL19,CDC_ANC0_FF_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FF_SHIFT ANC_CONTROL19
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FF_SHIFT ANC_CONTROL19

 /* Field CDC_ANC0_FFa_CLK_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffa_clk_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_FFa_CLK_EN)
#define hal_set_cdc_anc0_ffa_clk_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_FFa_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFa_CLK_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFa_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFa_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFa_CLK_EN ANC_CONTROL17

 /* Field CDC_ANC0_FFa_GAIN_UPDATED */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffa_gain_updated() hal_get_register_field8(ANC_STATUS0,CDC_ANC0_FFa_GAIN_UPDATED)
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFa_GAIN_UPDATED ANC_STATUS0
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFa_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFa_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFa_GAIN_UPDATED ANC_STATUS0

 /* Field CDC_ANC0_FFa_IN_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffa_in_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_FFa_IN_EN)
#define hal_set_cdc_anc0_ffa_in_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_FFa_IN_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFa_IN_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFa_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFa_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFa_IN_EN ANC_CONTROL18

 /* Field CDC_ANC0_FFa_RESET_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffa_reset_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_FFa_RESET_EN)
#define hal_set_cdc_anc0_ffa_reset_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_FFa_RESET_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFa_RESET_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFa_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFa_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFa_RESET_EN ANC_CONTROL17

 /* Field CDC_ANC0_FFa_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffa_shift() hal_get_register_field8(ANC_CONTROL19,CDC_ANC0_FFa_SHIFT)
#define hal_set_cdc_anc0_ffa_shift(x) hal_set_register_field(ANC_CONTROL19,CDC_ANC0_FFa_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFa_SHIFT ANC_CONTROL19
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFa_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFa_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFa_SHIFT ANC_CONTROL19

 /* Field CDC_ANC0_FFb_CLK_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffb_clk_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_FFb_CLK_EN)
#define hal_set_cdc_anc0_ffb_clk_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_FFb_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFb_CLK_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFb_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFb_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFb_CLK_EN ANC_CONTROL17

 /* Field CDC_ANC0_FFb_GAIN_UPDATED */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffb_gain_updated() hal_get_register_field8(ANC_STATUS0,CDC_ANC0_FFb_GAIN_UPDATED)
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFb_GAIN_UPDATED ANC_STATUS0
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFb_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFb_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFb_GAIN_UPDATED ANC_STATUS0

 /* Field CDC_ANC0_FFb_IN_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffb_in_en() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_FFb_IN_EN)
#define hal_set_cdc_anc0_ffb_in_en(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_FFb_IN_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFb_IN_EN ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFb_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFb_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFb_IN_EN ANC_CONTROL18

 /* Field CDC_ANC0_FFb_RESET_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffb_reset_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_FFb_RESET_EN)
#define hal_set_cdc_anc0_ffb_reset_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_FFb_RESET_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFb_RESET_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFb_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFb_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFb_RESET_EN ANC_CONTROL17

 /* Field CDC_ANC0_FFb_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_ffb_shift() hal_get_register_field8(ANC_CONTROL19,CDC_ANC0_FFb_SHIFT)
#define hal_set_cdc_anc0_ffb_shift(x) hal_set_register_field(ANC_CONTROL19,CDC_ANC0_FFb_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_FFb_SHIFT ANC_CONTROL19
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_FFb_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_FFb_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_FFb_SHIFT ANC_CONTROL19

 /* Field CDC_ANC0_IIR_ADAPT_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_iir_adapt_ctl() hal_get_register_field8(ANC_CONTROL23,CDC_ANC0_IIR_ADAPT_CTL)
#define hal_set_cdc_anc0_iir_adapt_ctl(x) hal_set_register_field(ANC_CONTROL23,CDC_ANC0_IIR_ADAPT_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_IIR_ADAPT_CTL ANC_CONTROL23
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_IIR_ADAPT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_IIR_ADAPT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_IIR_ADAPT_CTL ANC_CONTROL23

 /* Field CDC_ANC0_IIR_COEFF_1_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_iir_coeff_1_ctl() hal_get_register_field8(CDC_ANC0_IIR_COEFF_1_CTL,CDC_ANC0_IIR_COEFF_1_CTL)
#define hal_set_cdc_anc0_iir_coeff_1_ctl(x) hal_set_register_field(CDC_ANC0_IIR_COEFF_1_CTL,CDC_ANC0_IIR_COEFF_1_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_IIR_COEFF_1_CTL CDC_ANC0_IIR_COEFF_1_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_IIR_COEFF_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_1_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_IIR_COEFF_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_1_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_IIR_COEFF_1_CTL CDC_ANC0_IIR_COEFF_1_CTL

 /* Field CDC_ANC0_IIR_COEFF_2_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_iir_coeff_2_ctl() hal_get_register_field8(CDC_ANC0_IIR_COEFF_2_CTL,CDC_ANC0_IIR_COEFF_2_CTL)
#define hal_set_cdc_anc0_iir_coeff_2_ctl(x) hal_set_register_field(CDC_ANC0_IIR_COEFF_2_CTL,CDC_ANC0_IIR_COEFF_2_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_IIR_COEFF_2_CTL CDC_ANC0_IIR_COEFF_2_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_IIR_COEFF_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_2_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_IIR_COEFF_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC0_IIR_COEFF_2_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_IIR_COEFF_2_CTL CDC_ANC0_IIR_COEFF_2_CTL

 /* Field CDC_ANC0_LPF_FB_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_fb_ctl() hal_get_register_field8(ANC_CONTROL21,CDC_ANC0_LPF_FB_CTL)
#define hal_set_cdc_anc0_lpf_fb_ctl(x) hal_set_register_field(ANC_CONTROL21,CDC_ANC0_LPF_FB_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FB_CTL ANC_CONTROL21
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FB_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FB_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FB_CTL ANC_CONTROL21

 /* Field CDC_ANC0_LPF_FB_S1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_fb_s1() hal_get_register_field8(ANC_CONTROL21,CDC_ANC0_LPF_FB_S1)
#define hal_set_cdc_anc0_lpf_fb_s1(x) hal_set_register_field(ANC_CONTROL21,CDC_ANC0_LPF_FB_S1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FB_S1 ANC_CONTROL21
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FB_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FB_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FB_S1 ANC_CONTROL21

 /* Field CDC_ANC0_LPF_FB_S2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_fb_s2() hal_get_register_field8(ANC_CONTROL21,CDC_ANC0_LPF_FB_S2)
#define hal_set_cdc_anc0_lpf_fb_s2(x) hal_set_register_field(ANC_CONTROL21,CDC_ANC0_LPF_FB_S2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FB_S2 ANC_CONTROL21
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FB_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FB_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FB_S2 ANC_CONTROL21

 /* Field CDC_ANC0_LPF_FF_A_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_ff_a_ctl() hal_get_register_field8(ANC_CONTROL20,CDC_ANC0_LPF_FF_A_CTL)
#define hal_set_cdc_anc0_lpf_ff_a_ctl(x) hal_set_register_field(ANC_CONTROL20,CDC_ANC0_LPF_FF_A_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FF_A_CTL ANC_CONTROL20
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FF_A_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FF_A_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FF_A_CTL ANC_CONTROL20

 /* Field CDC_ANC0_LPF_FF_B_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_ff_b_ctl() hal_get_register_field8(ANC_CONTROL20,CDC_ANC0_LPF_FF_B_CTL)
#define hal_set_cdc_anc0_lpf_ff_b_ctl(x) hal_set_register_field(ANC_CONTROL20,CDC_ANC0_LPF_FF_B_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FF_B_CTL ANC_CONTROL20
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FF_B_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FF_B_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FF_B_CTL ANC_CONTROL20

 /* Field CDC_ANC0_LPF_FFa_S1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_ffa_s1() hal_get_register_field8(ANC_CONTROL20,CDC_ANC0_LPF_FFa_S1)
#define hal_set_cdc_anc0_lpf_ffa_s1(x) hal_set_register_field(ANC_CONTROL20,CDC_ANC0_LPF_FFa_S1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FFa_S1 ANC_CONTROL20
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FFa_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FFa_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FFa_S1 ANC_CONTROL20

 /* Field CDC_ANC0_LPF_FFa_S2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_ffa_s2() hal_get_register_field8(ANC_CONTROL20,CDC_ANC0_LPF_FFa_S2)
#define hal_set_cdc_anc0_lpf_ffa_s2(x) hal_set_register_field(ANC_CONTROL20,CDC_ANC0_LPF_FFa_S2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FFa_S2 ANC_CONTROL20
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FFa_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FFa_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FFa_S2 ANC_CONTROL20

 /* Field CDC_ANC0_LPF_FFb_S1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_ffb_s1() hal_get_register_field8(ANC_CONTROL20,CDC_ANC0_LPF_FFb_S1)
#define hal_set_cdc_anc0_lpf_ffb_s1(x) hal_set_register_field(ANC_CONTROL20,CDC_ANC0_LPF_FFb_S1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FFb_S1 ANC_CONTROL20
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FFb_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FFb_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FFb_S1 ANC_CONTROL20

 /* Field CDC_ANC0_LPF_FFb_S2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_lpf_ffb_s2() hal_get_register_field8(ANC_CONTROL20,CDC_ANC0_LPF_FFb_S2)
#define hal_set_cdc_anc0_lpf_ffb_s2(x) hal_set_register_field(ANC_CONTROL20,CDC_ANC0_LPF_FFb_S2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_LPF_FFb_S2 ANC_CONTROL20
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_LPF_FFb_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_LPF_FFb_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_LPF_FFb_S2 ANC_CONTROL20

 /* Field CDC_ANC0_MAX_OUTPUT_AMPL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_max_output_ampl() hal_get_register_field16(ANC_CONTROL11,CDC_ANC0_MAX_OUTPUT_AMPL)
#define hal_set_cdc_anc0_max_output_ampl(x) hal_set_register_field(ANC_CONTROL11,CDC_ANC0_MAX_OUTPUT_AMPL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_MAX_OUTPUT_AMPL ANC_CONTROL11
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_MAX_OUTPUT_AMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL11, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_MAX_OUTPUT_AMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL11, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_MAX_OUTPUT_AMPL ANC_CONTROL11

 /* Field CDC_ANC0_MODE_1_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_mode_1_ctl() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_MODE_1_CTL)
#define hal_set_cdc_anc0_mode_1_ctl(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_MODE_1_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_MODE_1_CTL ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_MODE_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_MODE_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_MODE_1_CTL ANC_CONTROL18

 /* Field CDC_ANC0_MODE_2_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_mode_2_ctl() hal_get_register_field8(ANC_CONTROL18,CDC_ANC0_MODE_2_CTL)
#define hal_set_cdc_anc0_mode_2_ctl(x) hal_set_register_field(ANC_CONTROL18,CDC_ANC0_MODE_2_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_MODE_2_CTL ANC_CONTROL18
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_MODE_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_MODE_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_MODE_2_CTL ANC_CONTROL18

 /* Field CDC_ANC0_RESERVED7_4_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_reserved7_4() hal_get_register_field8(ANC_CONTROL19,CDC_ANC0_RESERVED7_4)
#define hal_set_cdc_anc0_reserved7_4(x) hal_set_register_field(ANC_CONTROL19,CDC_ANC0_RESERVED7_4,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_RESERVED7_4 ANC_CONTROL19
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_RESERVED7_4(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_RESERVED7_4(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_RESERVED7_4 ANC_CONTROL19

 /* Field CDC_ANC0_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_shift() hal_get_register_field8(ANC_CONTROL22,CDC_ANC0_SHIFT)
#define hal_set_cdc_anc0_shift(x) hal_set_register_field(ANC_CONTROL22,CDC_ANC0_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_SHIFT ANC_CONTROL22
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_SHIFT ANC_CONTROL22

 /* Field CDC_ANC0_SMARTLNQ_A_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_smartlnq_a_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_SMARTLNQ_A_EN)
#define hal_set_cdc_anc0_smartlnq_a_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_SMARTLNQ_A_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_SMARTLNQ_A_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_SMARTLNQ_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_SMARTLNQ_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_SMARTLNQ_A_EN ANC_CONTROL17

 /* Field CDC_ANC0_SMARTLNQ_B_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_smartlnq_b_en() hal_get_register_field8(ANC_CONTROL17,CDC_ANC0_SMARTLNQ_B_EN)
#define hal_set_cdc_anc0_smartlnq_b_en(x) hal_set_register_field(ANC_CONTROL17,CDC_ANC0_SMARTLNQ_B_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_SMARTLNQ_B_EN ANC_CONTROL17
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_SMARTLNQ_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_SMARTLNQ_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_SMARTLNQ_B_EN ANC_CONTROL17

 /* Field CDC_ANC0_SMLPF_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_smlpf_ctl() hal_get_register_field8(ANC_CONTROL22,CDC_ANC0_SMLPF_CTL)
#define hal_set_cdc_anc0_smlpf_ctl(x) hal_set_register_field(ANC_CONTROL22,CDC_ANC0_SMLPF_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_SMLPF_CTL ANC_CONTROL22
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_SMLPF_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_SMLPF_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_SMLPF_CTL ANC_CONTROL22

 /* Field CDC_ANC0_VOLUME_EN */
 /* Accessor macros */
#define hal_get_cdc_anc0_volume_en() hal_get_register_field8(ANC_CONTROL9,CDC_ANC0_VOLUME_EN)
#define hal_set_cdc_anc0_volume_en(x) hal_set_register_field(ANC_CONTROL9,CDC_ANC0_VOLUME_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_VOLUME_EN ANC_CONTROL9
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_VOLUME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_VOLUME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_VOLUME_EN ANC_CONTROL9

 /* Field CDC_ANC0_VOLUME_SHIFT_1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_volume_shift_1() hal_get_register_field8(ANC_CONTROL9,CDC_ANC0_VOLUME_SHIFT_1)
#define hal_set_cdc_anc0_volume_shift_1(x) hal_set_register_field(ANC_CONTROL9,CDC_ANC0_VOLUME_SHIFT_1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_VOLUME_SHIFT_1 ANC_CONTROL9
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_VOLUME_SHIFT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_VOLUME_SHIFT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_VOLUME_SHIFT_1 ANC_CONTROL9

 /* Field CDC_ANC0_VOLUME_SHIFT_2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_volume_shift_2() hal_get_register_field8(ANC_CONTROL9,CDC_ANC0_VOLUME_SHIFT_2)
#define hal_set_cdc_anc0_volume_shift_2(x) hal_set_register_field(ANC_CONTROL9,CDC_ANC0_VOLUME_SHIFT_2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_VOLUME_SHIFT_2 ANC_CONTROL9
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_VOLUME_SHIFT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_VOLUME_SHIFT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_VOLUME_SHIFT_2 ANC_CONTROL9

 /* Field CDC_ANC0_VOLUME_SHIFT_MAIN_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_volume_shift_main() hal_get_register_field8(ANC_CONTROL9,CDC_ANC0_VOLUME_SHIFT_MAIN)
#define hal_set_cdc_anc0_volume_shift_main(x) hal_set_register_field(ANC_CONTROL9,CDC_ANC0_VOLUME_SHIFT_MAIN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_VOLUME_SHIFT_MAIN ANC_CONTROL9
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_VOLUME_SHIFT_MAIN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_VOLUME_SHIFT_MAIN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_VOLUME_SHIFT_MAIN ANC_CONTROL9

 /* Field CDC_ANC0_ZCD_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc0_zcd_shift() hal_get_register_field8(ANC_CONTROL22,CDC_ANC0_ZCD_SHIFT)
#define hal_set_cdc_anc0_zcd_shift(x) hal_set_register_field(ANC_CONTROL22,CDC_ANC0_ZCD_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC0_ZCD_SHIFT ANC_CONTROL22
#define FIELDS_MASKS_SHIFTED_CDC_ANC0_ZCD_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC0_ZCD_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC0_ZCD_SHIFT ANC_CONTROL22

 /* Field CDC_ANC1_ANC_ADC_DMIC_A_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_adc_dmic_a_sel() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_ADC_DMIC_A_SEL)
#define hal_set_cdc_anc1_anc_adc_dmic_a_sel(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_ADC_DMIC_A_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_ADC_DMIC_A_SEL ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_ADC_DMIC_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_ADC_DMIC_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_ADC_DMIC_A_SEL ANC_CONTROL30

 /* Field CDC_ANC1_ANC_ADC_DMIC_B_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_adc_dmic_b_sel() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_ADC_DMIC_B_SEL)
#define hal_set_cdc_anc1_anc_adc_dmic_b_sel(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_ADC_DMIC_B_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_ADC_DMIC_B_SEL ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_ADC_DMIC_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_ADC_DMIC_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_ADC_DMIC_B_SEL ANC_CONTROL30

 /* Field CDC_ANC1_ANC_DCFILT_A_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_dcfilt_a_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_DCFILT_A_EN)
#define hal_set_cdc_anc1_anc_dcfilt_a_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_DCFILT_A_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_DCFILT_A_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_DCFILT_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_DCFILT_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_DCFILT_A_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_DCFILT_B_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_dcfilt_b_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_DCFILT_B_EN)
#define hal_set_cdc_anc1_anc_dcfilt_b_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_DCFILT_B_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_DCFILT_B_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_DCFILT_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_DCFILT_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_DCFILT_B_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_DMIC_X0P5_A_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_dmic_x0p5_a_sel() hal_get_register_field8(ANC_CONTROL40,CDC_ANC1_ANC_DMIC_X0P5_A_SEL)
#define hal_set_cdc_anc1_anc_dmic_x0p5_a_sel(x) hal_set_register_field(ANC_CONTROL40,CDC_ANC1_ANC_DMIC_X0P5_A_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_DMIC_X0P5_A_SEL ANC_CONTROL40
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_DMIC_X0P5_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_DMIC_X0P5_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_DMIC_X0P5_A_SEL ANC_CONTROL40

 /* Field CDC_ANC1_ANC_DMIC_X0P5_B_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_dmic_x0p5_b_sel() hal_get_register_field8(ANC_CONTROL40,CDC_ANC1_ANC_DMIC_X0P5_B_SEL)
#define hal_set_cdc_anc1_anc_dmic_x0p5_b_sel(x) hal_set_register_field(ANC_CONTROL40,CDC_ANC1_ANC_DMIC_X0P5_B_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_DMIC_X0P5_B_SEL ANC_CONTROL40
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_DMIC_X0P5_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_DMIC_X0P5_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_DMIC_X0P5_B_SEL ANC_CONTROL40

 /* Field CDC_ANC1_ANC_DMIC_X2_A_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_dmic_x2_a_sel() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_DMIC_X2_A_SEL)
#define hal_set_cdc_anc1_anc_dmic_x2_a_sel(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_DMIC_X2_A_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_DMIC_X2_A_SEL ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_DMIC_X2_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_DMIC_X2_A_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_DMIC_X2_A_SEL ANC_CONTROL30

 /* Field CDC_ANC1_ANC_DMIC_X2_B_SEL */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_dmic_x2_b_sel() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_DMIC_X2_B_SEL)
#define hal_set_cdc_anc1_anc_dmic_x2_b_sel(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_DMIC_X2_B_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_DMIC_X2_B_SEL ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_DMIC_X2_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_DMIC_X2_B_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_DMIC_X2_B_SEL ANC_CONTROL30

 /* Field CDC_ANC1_ANC_FBGAIN_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_fbgain_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_FBGAIN_EN)
#define hal_set_cdc_anc1_anc_fbgain_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_FBGAIN_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_FBGAIN_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_FBGAIN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_FBGAIN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_FBGAIN_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_FB_TUNE_DSM_CLR */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_fb_tune_dsm_clr() hal_get_register_field8(ANC_CONTROL40,CDC_ANC1_ANC_FB_TUNE_DSM_CLR)
#define hal_set_cdc_anc1_anc_fb_tune_dsm_clr(x) hal_set_register_field(ANC_CONTROL40,CDC_ANC1_ANC_FB_TUNE_DSM_CLR,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_FB_TUNE_DSM_CLR ANC_CONTROL40
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_FB_TUNE_DSM_CLR(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_FB_TUNE_DSM_CLR(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_FB_TUNE_DSM_CLR ANC_CONTROL40

 /* Field CDC_ANC1_ANC_FB_TUNE_DSM_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_fb_tune_dsm_en() hal_get_register_field8(ANC_CONTROL40,CDC_ANC1_ANC_FB_TUNE_DSM_EN)
#define hal_set_cdc_anc1_anc_fb_tune_dsm_en(x) hal_set_register_field(ANC_CONTROL40,CDC_ANC1_ANC_FB_TUNE_DSM_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_FB_TUNE_DSM_EN ANC_CONTROL40
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_FB_TUNE_DSM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_FB_TUNE_DSM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_FB_TUNE_DSM_EN ANC_CONTROL40

 /* Field CDC_ANC1_ANC_FFGAIN_A_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_ffgain_a_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_FFGAIN_A_EN)
#define hal_set_cdc_anc1_anc_ffgain_a_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_FFGAIN_A_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_FFGAIN_A_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_FFGAIN_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_FFGAIN_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_FFGAIN_A_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_FFGAIN_B_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_ffgain_b_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_FFGAIN_B_EN)
#define hal_set_cdc_anc1_anc_ffgain_b_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_FFGAIN_B_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_FFGAIN_B_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_FFGAIN_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_FFGAIN_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_FFGAIN_B_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_FFLE_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_ffle_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_FFLE_EN)
#define hal_set_cdc_anc1_anc_ffle_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_FFLE_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_FFLE_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_FFLE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_FFLE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_FFLE_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_OUTMIX_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_outmix_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_OUTMIX_EN)
#define hal_set_cdc_anc1_anc_outmix_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_OUTMIX_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_OUTMIX_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_OUTMIX_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_OUTMIX_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_OUTMIX_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_OUT_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_out_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_OUT_EN)
#define hal_set_cdc_anc1_anc_out_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_OUT_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_OUT_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_OUT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_OUT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_OUT_EN ANC_CONTROL30

 /* Field CDC_ANC1_ANC_SMLPF_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_anc_smlpf_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_ANC_SMLPF_EN)
#define hal_set_cdc_anc1_anc_smlpf_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_ANC_SMLPF_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ANC_SMLPF_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ANC_SMLPF_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ANC_SMLPF_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ANC_SMLPF_EN ANC_CONTROL30

 /* Field CDC_ANC1_AUTO_INC */
 /* Accessor macros */
#define hal_get_cdc_anc1_auto_inc() hal_get_register_field8(CDC_ANC1_IIR_COEFF_1_CTL,CDC_ANC1_AUTO_INC)
#define hal_set_cdc_anc1_auto_inc(x) hal_set_register_field(CDC_ANC1_IIR_COEFF_1_CTL,CDC_ANC1_AUTO_INC,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_AUTO_INC CDC_ANC1_IIR_COEFF_1_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_AUTO_INC(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_1_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_AUTO_INC(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_1_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_AUTO_INC CDC_ANC1_IIR_COEFF_1_CTL

 /* Field CDC_ANC1_A_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_a_shift() hal_get_register_field8(ANC_CONTROL34,CDC_ANC1_A_SHIFT)
#define hal_set_cdc_anc1_a_shift(x) hal_set_register_field(ANC_CONTROL34,CDC_ANC1_A_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_A_SHIFT ANC_CONTROL34
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_A_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_A_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_A_SHIFT ANC_CONTROL34

 /* Field CDC_ANC1_B_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_b_shift() hal_get_register_field8(ANC_CONTROL34,CDC_ANC1_B_SHIFT)
#define hal_set_cdc_anc1_b_shift(x) hal_set_register_field(ANC_CONTROL34,CDC_ANC1_B_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_B_SHIFT ANC_CONTROL34
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_B_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_B_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_B_SHIFT ANC_CONTROL34

 /* Field CDC_ANC1_CLK_RESET_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_clk_reset_ctl() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_CLK_RESET_CTL)
#define hal_set_cdc_anc1_clk_reset_ctl(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_CLK_RESET_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_CLK_RESET_CTL ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_CLK_RESET_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_CLK_RESET_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_CLK_RESET_CTL ANC_CONTROL29

 /* Field CDC_ANC1_COEF_ADAPTIVE */
 /* Accessor macros */
#define hal_get_cdc_anc1_coef_adaptive() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_COEF_ADAPTIVE)
#define hal_set_cdc_anc1_coef_adaptive(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_COEF_ADAPTIVE,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_COEF_ADAPTIVE ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_COEF_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_COEF_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_COEF_ADAPTIVE ANC_CONTROL35

 /* Field CDC_ANC1_COEF_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_coef() hal_get_register_field8(CDC_ANC1_IIR_COEFF_2_CTL,CDC_ANC1_COEF)
#define hal_set_cdc_anc1_coef(x) hal_set_register_field(CDC_ANC1_IIR_COEFF_2_CTL,CDC_ANC1_COEF,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_COEF CDC_ANC1_IIR_COEFF_2_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_COEF(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_2_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_COEF(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_2_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_COEF CDC_ANC1_IIR_COEFF_2_CTL

 /* Field CDC_ANC1_COEF_PTR_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_coef_ptr() hal_get_register_field8(CDC_ANC1_IIR_COEFF_1_CTL,CDC_ANC1_COEF_PTR)
#define hal_set_cdc_anc1_coef_ptr(x) hal_set_register_field(CDC_ANC1_IIR_COEFF_1_CTL,CDC_ANC1_COEF_PTR,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_COEF_PTR CDC_ANC1_IIR_COEFF_1_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_COEF_PTR(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_1_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_COEF_PTR(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_1_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_COEF_PTR CDC_ANC1_IIR_COEFF_1_CTL

 /* Field CDC_ANC1_COEF_SMP_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_coef_smp_en() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_COEF_SMP_EN)
#define hal_set_cdc_anc1_coef_smp_en(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_COEF_SMP_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_COEF_SMP_EN ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_COEF_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_COEF_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_COEF_SMP_EN ANC_CONTROL35

 /* Field CDC_ANC1_COEF_UPDATE_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_coef_update_en() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_COEF_UPDATE_EN)
#define hal_set_cdc_anc1_coef_update_en(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_COEF_UPDATE_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_COEF_UPDATE_EN ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_COEF_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_COEF_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_COEF_UPDATE_EN ANC_CONTROL35

 /* Field CDC_ANC1_DCFLT_SHIFT_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_dcflt_shift_ctl() hal_get_register_field8(ANC_CONTROL34,CDC_ANC1_DCFLT_SHIFT_CTL)
#define hal_set_cdc_anc1_dcflt_shift_ctl(x) hal_set_register_field(ANC_CONTROL34,CDC_ANC1_DCFLT_SHIFT_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_DCFLT_SHIFT_CTL ANC_CONTROL34
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_DCFLT_SHIFT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_DCFLT_SHIFT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_DCFLT_SHIFT_CTL ANC_CONTROL34

 /* Field CDC_ANC1_FB_CLK_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_fb_clk_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_FB_CLK_EN)
#define hal_set_cdc_anc1_fb_clk_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_FB_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FB_CLK_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FB_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FB_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FB_CLK_EN ANC_CONTROL29

 /* Field CDC_ANC1_FB_GAIN_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_fb_gain_ctl() hal_get_register_field8(ANC_CONTROL39,CDC_ANC1_FB_GAIN_CTL)
#define hal_set_cdc_anc1_fb_gain_ctl(x) hal_set_register_field(ANC_CONTROL39,CDC_ANC1_FB_GAIN_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FB_GAIN_CTL ANC_CONTROL39
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FB_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL39, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FB_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL39, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FB_GAIN_CTL ANC_CONTROL39

 /* Field CDC_ANC1_FB_GAIN_UPDATED */
 /* Accessor macros */
#define hal_get_cdc_anc1_fb_gain_updated() hal_get_register_field8(ANC_STATUS1,CDC_ANC1_FB_GAIN_UPDATED)
 /* Workings */
#define TYPE_OF_CDC_ANC1_FB_GAIN_UPDATED ANC_STATUS1
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FB_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FB_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FB_GAIN_UPDATED ANC_STATUS1

 /* Field CDC_ANC1_FB_LPF_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_fb_lpf_shift() hal_get_register_field8(ANC_CONTROL31,CDC_ANC1_FB_LPF_SHIFT)
#define hal_set_cdc_anc1_fb_lpf_shift(x) hal_set_register_field(ANC_CONTROL31,CDC_ANC1_FB_LPF_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FB_LPF_SHIFT ANC_CONTROL31
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FB_LPF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FB_LPF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FB_LPF_SHIFT ANC_CONTROL31

 /* Field CDC_ANC1_FB_ON_FBMON_IS_TRUE */
 /* Accessor macros */
#define hal_get_cdc_anc1_fb_on_fbmon_is_true() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_FB_ON_FBMON_IS_TRUE)
#define hal_set_cdc_anc1_fb_on_fbmon_is_true(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_FB_ON_FBMON_IS_TRUE,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FB_ON_FBMON_IS_TRUE ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FB_ON_FBMON_IS_TRUE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FB_ON_FBMON_IS_TRUE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FB_ON_FBMON_IS_TRUE ANC_CONTROL30

 /* Field CDC_ANC1_FB_RESET_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_fb_reset_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_FB_RESET_EN)
#define hal_set_cdc_anc1_fb_reset_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_FB_RESET_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FB_RESET_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FB_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FB_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FB_RESET_EN ANC_CONTROL29

 /* Field CDC_ANC1_FB_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_fb_shift() hal_get_register_field8(ANC_CONTROL31,CDC_ANC1_FB_SHIFT)
#define hal_set_cdc_anc1_fb_shift(x) hal_set_register_field(ANC_CONTROL31,CDC_ANC1_FB_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FB_SHIFT ANC_CONTROL31
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FB_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FB_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FB_SHIFT ANC_CONTROL31

 /* Field CDC_ANC1_FFGAIN_ADAPTIVE */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffgain_adaptive() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_FFGAIN_ADAPTIVE)
#define hal_set_cdc_anc1_ffgain_adaptive(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_FFGAIN_ADAPTIVE,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFGAIN_ADAPTIVE ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFGAIN_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFGAIN_ADAPTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFGAIN_ADAPTIVE ANC_CONTROL35

 /* Field CDC_ANC1_FFGAIN_SMP_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffgain_smp_en() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_FFGAIN_SMP_EN)
#define hal_set_cdc_anc1_ffgain_smp_en(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_FFGAIN_SMP_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFGAIN_SMP_EN ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFGAIN_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFGAIN_SMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFGAIN_SMP_EN ANC_CONTROL35

 /* Field CDC_ANC1_FFGAIN_UPDATE_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffgain_update_en() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_FFGAIN_UPDATE_EN)
#define hal_set_cdc_anc1_ffgain_update_en(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_FFGAIN_UPDATE_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFGAIN_UPDATE_EN ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFGAIN_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFGAIN_UPDATE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFGAIN_UPDATE_EN ANC_CONTROL35

 /* Field CDC_ANC1_FFGAIN_ZCD_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffgain_zcd_en() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_FFGAIN_ZCD_EN)
#define hal_set_cdc_anc1_ffgain_zcd_en(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_FFGAIN_ZCD_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFGAIN_ZCD_EN ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFGAIN_ZCD_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFGAIN_ZCD_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFGAIN_ZCD_EN ANC_CONTROL35

 /* Field CDC_ANC1_FF_A_GAIN_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_ff_a_gain_ctl() hal_get_register_field8(ANC_CONTROL38,CDC_ANC1_FF_A_GAIN_CTL)
#define hal_set_cdc_anc1_ff_a_gain_ctl(x) hal_set_register_field(ANC_CONTROL38,CDC_ANC1_FF_A_GAIN_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FF_A_GAIN_CTL ANC_CONTROL38
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FF_A_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL38, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FF_A_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL38, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FF_A_GAIN_CTL ANC_CONTROL38

 /* Field CDC_ANC1_FF_B_GAIN_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_ff_b_gain_ctl() hal_get_register_field8(ANC_CONTROL38,CDC_ANC1_FF_B_GAIN_CTL)
#define hal_set_cdc_anc1_ff_b_gain_ctl(x) hal_set_register_field(ANC_CONTROL38,CDC_ANC1_FF_B_GAIN_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FF_B_GAIN_CTL ANC_CONTROL38
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FF_B_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL38, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FF_B_GAIN_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL38, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FF_B_GAIN_CTL ANC_CONTROL38

 /* Field CDC_ANC1_FF_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_ff_shift() hal_get_register_field8(ANC_CONTROL31,CDC_ANC1_FF_SHIFT)
#define hal_set_cdc_anc1_ff_shift(x) hal_set_register_field(ANC_CONTROL31,CDC_ANC1_FF_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FF_SHIFT ANC_CONTROL31
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FF_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FF_SHIFT ANC_CONTROL31

 /* Field CDC_ANC1_FFa_CLK_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffa_clk_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_FFa_CLK_EN)
#define hal_set_cdc_anc1_ffa_clk_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_FFa_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFa_CLK_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFa_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFa_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFa_CLK_EN ANC_CONTROL29

 /* Field CDC_ANC1_FFa_GAIN_UPDATED */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffa_gain_updated() hal_get_register_field8(ANC_STATUS1,CDC_ANC1_FFa_GAIN_UPDATED)
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFa_GAIN_UPDATED ANC_STATUS1
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFa_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFa_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFa_GAIN_UPDATED ANC_STATUS1

 /* Field CDC_ANC1_FFa_IN_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffa_in_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_FFa_IN_EN)
#define hal_set_cdc_anc1_ffa_in_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_FFa_IN_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFa_IN_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFa_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFa_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFa_IN_EN ANC_CONTROL30

 /* Field CDC_ANC1_FFa_RESET_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffa_reset_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_FFa_RESET_EN)
#define hal_set_cdc_anc1_ffa_reset_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_FFa_RESET_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFa_RESET_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFa_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFa_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFa_RESET_EN ANC_CONTROL29

 /* Field CDC_ANC1_FFa_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffa_shift() hal_get_register_field8(ANC_CONTROL31,CDC_ANC1_FFa_SHIFT)
#define hal_set_cdc_anc1_ffa_shift(x) hal_set_register_field(ANC_CONTROL31,CDC_ANC1_FFa_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFa_SHIFT ANC_CONTROL31
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFa_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFa_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFa_SHIFT ANC_CONTROL31

 /* Field CDC_ANC1_FFb_CLK_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffb_clk_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_FFb_CLK_EN)
#define hal_set_cdc_anc1_ffb_clk_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_FFb_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFb_CLK_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFb_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFb_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFb_CLK_EN ANC_CONTROL29

 /* Field CDC_ANC1_FFb_GAIN_UPDATED */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffb_gain_updated() hal_get_register_field8(ANC_STATUS1,CDC_ANC1_FFb_GAIN_UPDATED)
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFb_GAIN_UPDATED ANC_STATUS1
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFb_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFb_GAIN_UPDATED(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFb_GAIN_UPDATED ANC_STATUS1

 /* Field CDC_ANC1_FFb_IN_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffb_in_en() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_FFb_IN_EN)
#define hal_set_cdc_anc1_ffb_in_en(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_FFb_IN_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFb_IN_EN ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFb_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFb_IN_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFb_IN_EN ANC_CONTROL30

 /* Field CDC_ANC1_FFb_RESET_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffb_reset_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_FFb_RESET_EN)
#define hal_set_cdc_anc1_ffb_reset_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_FFb_RESET_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFb_RESET_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFb_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFb_RESET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFb_RESET_EN ANC_CONTROL29

 /* Field CDC_ANC1_FFb_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_ffb_shift() hal_get_register_field8(ANC_CONTROL31,CDC_ANC1_FFb_SHIFT)
#define hal_set_cdc_anc1_ffb_shift(x) hal_set_register_field(ANC_CONTROL31,CDC_ANC1_FFb_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_FFb_SHIFT ANC_CONTROL31
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_FFb_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_FFb_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_FFb_SHIFT ANC_CONTROL31

 /* Field CDC_ANC1_IIR_ADAPT_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_iir_adapt_ctl() hal_get_register_field8(ANC_CONTROL35,CDC_ANC1_IIR_ADAPT_CTL)
#define hal_set_cdc_anc1_iir_adapt_ctl(x) hal_set_register_field(ANC_CONTROL35,CDC_ANC1_IIR_ADAPT_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_IIR_ADAPT_CTL ANC_CONTROL35
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_IIR_ADAPT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_IIR_ADAPT_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_IIR_ADAPT_CTL ANC_CONTROL35

 /* Field CDC_ANC1_IIR_COEFF_1_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_iir_coeff_1_ctl() hal_get_register_field8(CDC_ANC1_IIR_COEFF_1_CTL,CDC_ANC1_IIR_COEFF_1_CTL)
#define hal_set_cdc_anc1_iir_coeff_1_ctl(x) hal_set_register_field(CDC_ANC1_IIR_COEFF_1_CTL,CDC_ANC1_IIR_COEFF_1_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_IIR_COEFF_1_CTL CDC_ANC1_IIR_COEFF_1_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_IIR_COEFF_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_1_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_IIR_COEFF_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_1_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_IIR_COEFF_1_CTL CDC_ANC1_IIR_COEFF_1_CTL

 /* Field CDC_ANC1_IIR_COEFF_2_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_iir_coeff_2_ctl() hal_get_register_field8(CDC_ANC1_IIR_COEFF_2_CTL,CDC_ANC1_IIR_COEFF_2_CTL)
#define hal_set_cdc_anc1_iir_coeff_2_ctl(x) hal_set_register_field(CDC_ANC1_IIR_COEFF_2_CTL,CDC_ANC1_IIR_COEFF_2_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_IIR_COEFF_2_CTL CDC_ANC1_IIR_COEFF_2_CTL
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_IIR_COEFF_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_2_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_IIR_COEFF_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(CDC_ANC1_IIR_COEFF_2_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_IIR_COEFF_2_CTL CDC_ANC1_IIR_COEFF_2_CTL

 /* Field CDC_ANC1_LPF_FB_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_fb_ctl() hal_get_register_field8(ANC_CONTROL33,CDC_ANC1_LPF_FB_CTL)
#define hal_set_cdc_anc1_lpf_fb_ctl(x) hal_set_register_field(ANC_CONTROL33,CDC_ANC1_LPF_FB_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FB_CTL ANC_CONTROL33
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FB_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FB_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FB_CTL ANC_CONTROL33

 /* Field CDC_ANC1_LPF_FB_S1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_fb_s1() hal_get_register_field8(ANC_CONTROL33,CDC_ANC1_LPF_FB_S1)
#define hal_set_cdc_anc1_lpf_fb_s1(x) hal_set_register_field(ANC_CONTROL33,CDC_ANC1_LPF_FB_S1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FB_S1 ANC_CONTROL33
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FB_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FB_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FB_S1 ANC_CONTROL33

 /* Field CDC_ANC1_LPF_FB_S2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_fb_s2() hal_get_register_field8(ANC_CONTROL33,CDC_ANC1_LPF_FB_S2)
#define hal_set_cdc_anc1_lpf_fb_s2(x) hal_set_register_field(ANC_CONTROL33,CDC_ANC1_LPF_FB_S2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FB_S2 ANC_CONTROL33
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FB_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FB_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FB_S2 ANC_CONTROL33

 /* Field CDC_ANC1_LPF_FF_A_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_ff_a_ctl() hal_get_register_field8(ANC_CONTROL32,CDC_ANC1_LPF_FF_A_CTL)
#define hal_set_cdc_anc1_lpf_ff_a_ctl(x) hal_set_register_field(ANC_CONTROL32,CDC_ANC1_LPF_FF_A_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FF_A_CTL ANC_CONTROL32
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FF_A_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FF_A_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FF_A_CTL ANC_CONTROL32

 /* Field CDC_ANC1_LPF_FF_B_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_ff_b_ctl() hal_get_register_field8(ANC_CONTROL32,CDC_ANC1_LPF_FF_B_CTL)
#define hal_set_cdc_anc1_lpf_ff_b_ctl(x) hal_set_register_field(ANC_CONTROL32,CDC_ANC1_LPF_FF_B_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FF_B_CTL ANC_CONTROL32
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FF_B_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FF_B_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FF_B_CTL ANC_CONTROL32

 /* Field CDC_ANC1_LPF_FFa_S1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_ffa_s1() hal_get_register_field8(ANC_CONTROL32,CDC_ANC1_LPF_FFa_S1)
#define hal_set_cdc_anc1_lpf_ffa_s1(x) hal_set_register_field(ANC_CONTROL32,CDC_ANC1_LPF_FFa_S1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FFa_S1 ANC_CONTROL32
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FFa_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FFa_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FFa_S1 ANC_CONTROL32

 /* Field CDC_ANC1_LPF_FFa_S2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_ffa_s2() hal_get_register_field8(ANC_CONTROL32,CDC_ANC1_LPF_FFa_S2)
#define hal_set_cdc_anc1_lpf_ffa_s2(x) hal_set_register_field(ANC_CONTROL32,CDC_ANC1_LPF_FFa_S2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FFa_S2 ANC_CONTROL32
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FFa_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FFa_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FFa_S2 ANC_CONTROL32

 /* Field CDC_ANC1_LPF_FFb_S1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_ffb_s1() hal_get_register_field8(ANC_CONTROL32,CDC_ANC1_LPF_FFb_S1)
#define hal_set_cdc_anc1_lpf_ffb_s1(x) hal_set_register_field(ANC_CONTROL32,CDC_ANC1_LPF_FFb_S1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FFb_S1 ANC_CONTROL32
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FFb_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FFb_S1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FFb_S1 ANC_CONTROL32

 /* Field CDC_ANC1_LPF_FFb_S2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_lpf_ffb_s2() hal_get_register_field8(ANC_CONTROL32,CDC_ANC1_LPF_FFb_S2)
#define hal_set_cdc_anc1_lpf_ffb_s2(x) hal_set_register_field(ANC_CONTROL32,CDC_ANC1_LPF_FFb_S2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_LPF_FFb_S2 ANC_CONTROL32
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_LPF_FFb_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_LPF_FFb_S2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_LPF_FFb_S2 ANC_CONTROL32

 /* Field CDC_ANC1_MAX_OUTPUT_AMPL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_max_output_ampl() hal_get_register_field16(ANC_CONTROL12,CDC_ANC1_MAX_OUTPUT_AMPL)
#define hal_set_cdc_anc1_max_output_ampl(x) hal_set_register_field(ANC_CONTROL12,CDC_ANC1_MAX_OUTPUT_AMPL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_MAX_OUTPUT_AMPL ANC_CONTROL12
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_MAX_OUTPUT_AMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL12, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_MAX_OUTPUT_AMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL12, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_MAX_OUTPUT_AMPL ANC_CONTROL12

 /* Field CDC_ANC1_MODE_1_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_mode_1_ctl() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_MODE_1_CTL)
#define hal_set_cdc_anc1_mode_1_ctl(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_MODE_1_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_MODE_1_CTL ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_MODE_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_MODE_1_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_MODE_1_CTL ANC_CONTROL30

 /* Field CDC_ANC1_MODE_2_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_mode_2_ctl() hal_get_register_field8(ANC_CONTROL30,CDC_ANC1_MODE_2_CTL)
#define hal_set_cdc_anc1_mode_2_ctl(x) hal_set_register_field(ANC_CONTROL30,CDC_ANC1_MODE_2_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_MODE_2_CTL ANC_CONTROL30
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_MODE_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_MODE_2_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_MODE_2_CTL ANC_CONTROL30

 /* Field CDC_ANC1_RESERVED7_4_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_reserved7_4() hal_get_register_field8(ANC_CONTROL31,CDC_ANC1_RESERVED7_4)
#define hal_set_cdc_anc1_reserved7_4(x) hal_set_register_field(ANC_CONTROL31,CDC_ANC1_RESERVED7_4,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_RESERVED7_4 ANC_CONTROL31
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_RESERVED7_4(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_RESERVED7_4(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_RESERVED7_4 ANC_CONTROL31

 /* Field CDC_ANC1_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_shift() hal_get_register_field8(ANC_CONTROL34,CDC_ANC1_SHIFT)
#define hal_set_cdc_anc1_shift(x) hal_set_register_field(ANC_CONTROL34,CDC_ANC1_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_SHIFT ANC_CONTROL34
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_SHIFT ANC_CONTROL34

 /* Field CDC_ANC1_SMARTLNQ_A_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_smartlnq_a_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_SMARTLNQ_A_EN)
#define hal_set_cdc_anc1_smartlnq_a_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_SMARTLNQ_A_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_SMARTLNQ_A_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_SMARTLNQ_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_SMARTLNQ_A_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_SMARTLNQ_A_EN ANC_CONTROL29

 /* Field CDC_ANC1_SMARTLNQ_B_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_smartlnq_b_en() hal_get_register_field8(ANC_CONTROL29,CDC_ANC1_SMARTLNQ_B_EN)
#define hal_set_cdc_anc1_smartlnq_b_en(x) hal_set_register_field(ANC_CONTROL29,CDC_ANC1_SMARTLNQ_B_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_SMARTLNQ_B_EN ANC_CONTROL29
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_SMARTLNQ_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_SMARTLNQ_B_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_SMARTLNQ_B_EN ANC_CONTROL29

 /* Field CDC_ANC1_SMLPF_CTL_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_smlpf_ctl() hal_get_register_field8(ANC_CONTROL34,CDC_ANC1_SMLPF_CTL)
#define hal_set_cdc_anc1_smlpf_ctl(x) hal_set_register_field(ANC_CONTROL34,CDC_ANC1_SMLPF_CTL,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_SMLPF_CTL ANC_CONTROL34
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_SMLPF_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_SMLPF_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_SMLPF_CTL ANC_CONTROL34

 /* Field CDC_ANC1_VOLUME_EN */
 /* Accessor macros */
#define hal_get_cdc_anc1_volume_en() hal_get_register_field8(ANC_CONTROL10,CDC_ANC1_VOLUME_EN)
#define hal_set_cdc_anc1_volume_en(x) hal_set_register_field(ANC_CONTROL10,CDC_ANC1_VOLUME_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_VOLUME_EN ANC_CONTROL10
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_VOLUME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_VOLUME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_VOLUME_EN ANC_CONTROL10

 /* Field CDC_ANC1_VOLUME_SHIFT_1_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_volume_shift_1() hal_get_register_field8(ANC_CONTROL10,CDC_ANC1_VOLUME_SHIFT_1)
#define hal_set_cdc_anc1_volume_shift_1(x) hal_set_register_field(ANC_CONTROL10,CDC_ANC1_VOLUME_SHIFT_1,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_VOLUME_SHIFT_1 ANC_CONTROL10
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_VOLUME_SHIFT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_VOLUME_SHIFT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_VOLUME_SHIFT_1 ANC_CONTROL10

 /* Field CDC_ANC1_VOLUME_SHIFT_2_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_volume_shift_2() hal_get_register_field8(ANC_CONTROL10,CDC_ANC1_VOLUME_SHIFT_2)
#define hal_set_cdc_anc1_volume_shift_2(x) hal_set_register_field(ANC_CONTROL10,CDC_ANC1_VOLUME_SHIFT_2,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_VOLUME_SHIFT_2 ANC_CONTROL10
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_VOLUME_SHIFT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_VOLUME_SHIFT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_VOLUME_SHIFT_2 ANC_CONTROL10

 /* Field CDC_ANC1_VOLUME_SHIFT_MAIN_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_volume_shift_main() hal_get_register_field8(ANC_CONTROL10,CDC_ANC1_VOLUME_SHIFT_MAIN)
#define hal_set_cdc_anc1_volume_shift_main(x) hal_set_register_field(ANC_CONTROL10,CDC_ANC1_VOLUME_SHIFT_MAIN,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_VOLUME_SHIFT_MAIN ANC_CONTROL10
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_VOLUME_SHIFT_MAIN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_VOLUME_SHIFT_MAIN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_VOLUME_SHIFT_MAIN ANC_CONTROL10

 /* Field CDC_ANC1_ZCD_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_cdc_anc1_zcd_shift() hal_get_register_field8(ANC_CONTROL34,CDC_ANC1_ZCD_SHIFT)
#define hal_set_cdc_anc1_zcd_shift(x) hal_set_register_field(ANC_CONTROL34,CDC_ANC1_ZCD_SHIFT,(x))
 /* Workings */
#define TYPE_OF_CDC_ANC1_ZCD_SHIFT ANC_CONTROL34
#define FIELDS_MASKS_SHIFTED_CDC_ANC1_ZCD_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_ANC1_ZCD_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_ANC1_ZCD_SHIFT ANC_CONTROL34

 /* Field CDC_CLK_RST_CTRL_FS_CLR_EN */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_fs_clr_en() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CLR_EN)
#define hal_set_cdc_clk_rst_ctrl_fs_clr_en(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CLR_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_FS_CLR_EN ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_FS_CLR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_FS_CLR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_FS_CLR_EN ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_FS_CNT_CONTROL_LSB */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_fs_cnt_control() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CNT_CONTROL)
#define hal_set_cdc_clk_rst_ctrl_fs_cnt_control(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CNT_CONTROL,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_FS_CNT_CONTROL ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_FS_CNT_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_FS_CNT_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_FS_CNT_CONTROL ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_FS_CNT_EN */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_fs_cnt_en() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CNT_EN)
#define hal_set_cdc_clk_rst_ctrl_fs_cnt_en(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CNT_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_FS_CNT_EN ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_FS_CNT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_FS_CNT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_FS_CNT_EN ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_FS_CNT_RESERVED_BITS7_5_LSB */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_fs_cnt_reserved_bits7_5() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CNT_RESERVED_BITS7_5)
#define hal_set_cdc_clk_rst_ctrl_fs_cnt_reserved_bits7_5(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_CNT_RESERVED_BITS7_5,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_FS_CNT_RESERVED_BITS7_5 ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_FS_CNT_RESERVED_BITS7_5(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_FS_CNT_RESERVED_BITS7_5(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_FS_CNT_RESERVED_BITS7_5 ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_FS_X2_SEL */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_fs_x2_sel() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_X2_SEL)
#define hal_set_cdc_clk_rst_ctrl_fs_x2_sel(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_FS_X2_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_FS_X2_SEL ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_FS_X2_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_FS_X2_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_FS_X2_SEL ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_MCLK_CONTROL_LSB */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_mclk_control() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_MCLK_CONTROL)
#define hal_set_cdc_clk_rst_ctrl_mclk_control(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_MCLK_CONTROL,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_MCLK_CONTROL ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_MCLK_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_MCLK_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_MCLK_CONTROL ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_MCLK_EN */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_mclk_en() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_MCLK_EN)
#define hal_set_cdc_clk_rst_ctrl_mclk_en(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_MCLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_MCLK_EN ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_MCLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_MCLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_MCLK_EN ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_MCLK_SEL */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_mclk_sel() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_MCLK_SEL)
#define hal_set_cdc_clk_rst_ctrl_mclk_sel(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_MCLK_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_MCLK_SEL ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_MCLK_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_MCLK_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_MCLK_SEL ANC_CONTROL1

 /* Field CDC_CLK_RST_CTRL_RESERVED_BITS7_3_LSB */
 /* Accessor macros */
#define hal_get_cdc_clk_rst_ctrl_reserved_bits7_3() hal_get_register_field8(ANC_CONTROL1,CDC_CLK_RST_CTRL_RESERVED_BITS7_3)
#define hal_set_cdc_clk_rst_ctrl_reserved_bits7_3(x) hal_set_register_field(ANC_CONTROL1,CDC_CLK_RST_CTRL_RESERVED_BITS7_3,(x))
 /* Workings */
#define TYPE_OF_CDC_CLK_RST_CTRL_RESERVED_BITS7_3 ANC_CONTROL1
#define FIELDS_MASKS_SHIFTED_CDC_CLK_RST_CTRL_RESERVED_BITS7_3(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_CLK_RST_CTRL_RESERVED_BITS7_3(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_CLK_RST_CTRL_RESERVED_BITS7_3 ANC_CONTROL1

 /* Field CDC_DEBUG_ANC_EN */
 /* Accessor macros */
#define hal_get_cdc_debug_anc_en() hal_get_register_field8(ANC_CONTROL0,CDC_DEBUG_ANC_EN)
#define hal_set_cdc_debug_anc_en(x) hal_set_register_field(ANC_CONTROL0,CDC_DEBUG_ANC_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_DEBUG_ANC_EN ANC_CONTROL0
#define FIELDS_MASKS_SHIFTED_CDC_DEBUG_ANC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_DEBUG_ANC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_DEBUG_ANC_EN ANC_CONTROL0

 /* Field CDC_DEBUG_ANC_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_debug_anc_sel() hal_get_register_field8(ANC_CONTROL0,CDC_DEBUG_ANC_SEL)
#define hal_set_cdc_debug_anc_sel(x) hal_set_register_field(ANC_CONTROL0,CDC_DEBUG_ANC_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_DEBUG_ANC_SEL ANC_CONTROL0
#define FIELDS_MASKS_SHIFTED_CDC_DEBUG_ANC_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_DEBUG_ANC_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_DEBUG_ANC_SEL ANC_CONTROL0

 /* Field CDC_DEBUG_CLK_EN */
 /* Accessor macros */
#define hal_get_cdc_debug_clk_en() hal_get_register_field8(ANC_CONTROL0,CDC_DEBUG_CLK_EN)
#define hal_set_cdc_debug_clk_en(x) hal_set_register_field(ANC_CONTROL0,CDC_DEBUG_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_CDC_DEBUG_CLK_EN ANC_CONTROL0
#define FIELDS_MASKS_SHIFTED_CDC_DEBUG_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_DEBUG_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_DEBUG_CLK_EN ANC_CONTROL0

 /* Field CDC_DEBUG_FS_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_debug_fs_sel() hal_get_register_field8(ANC_CONTROL0,CDC_DEBUG_FS_SEL)
#define hal_set_cdc_debug_fs_sel(x) hal_set_register_field(ANC_CONTROL0,CDC_DEBUG_FS_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_DEBUG_FS_SEL ANC_CONTROL0
#define FIELDS_MASKS_SHIFTED_CDC_DEBUG_FS_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_DEBUG_FS_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_DEBUG_FS_SEL ANC_CONTROL0

 /* Field CDC_TX_INP_MUX_ADC_MUX10_CFG0_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux10_cfg0() hal_get_register_field8(ANC_CONTROL13,CDC_TX_INP_MUX_ADC_MUX10_CFG0)
#define hal_set_cdc_tx_inp_mux_adc_mux10_cfg0(x) hal_set_register_field(ANC_CONTROL13,CDC_TX_INP_MUX_ADC_MUX10_CFG0,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX10_CFG0 ANC_CONTROL13
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX10_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX10_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX10_CFG0 ANC_CONTROL13

 /* Field CDC_TX_INP_MUX_ADC_MUX11_CFG0_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux11_cfg0() hal_get_register_field8(ANC_CONTROL14,CDC_TX_INP_MUX_ADC_MUX11_CFG0)
#define hal_set_cdc_tx_inp_mux_adc_mux11_cfg0(x) hal_set_register_field(ANC_CONTROL14,CDC_TX_INP_MUX_ADC_MUX11_CFG0,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX11_CFG0 ANC_CONTROL14
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX11_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX11_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX11_CFG0 ANC_CONTROL14

 /* Field CDC_TX_INP_MUX_ADC_MUX12_CFG0_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux12_cfg0() hal_get_register_field8(ANC_CONTROL15,CDC_TX_INP_MUX_ADC_MUX12_CFG0)
#define hal_set_cdc_tx_inp_mux_adc_mux12_cfg0(x) hal_set_register_field(ANC_CONTROL15,CDC_TX_INP_MUX_ADC_MUX12_CFG0,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX12_CFG0 ANC_CONTROL15
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX12_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX12_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX12_CFG0 ANC_CONTROL15

 /* Field CDC_TX_INP_MUX_ADC_MUX13_CFG0_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux13_cfg0() hal_get_register_field8(ANC_CONTROL16,CDC_TX_INP_MUX_ADC_MUX13_CFG0)
#define hal_set_cdc_tx_inp_mux_adc_mux13_cfg0(x) hal_set_register_field(ANC_CONTROL16,CDC_TX_INP_MUX_ADC_MUX13_CFG0,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX13_CFG0 ANC_CONTROL16
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX13_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX13_CFG0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX13_CFG0 ANC_CONTROL16

 /* Field CDC_TX_INP_MUX_ADC_MUX_10_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux_10_sel() hal_get_register_field8(ANC_CONTROL13,CDC_TX_INP_MUX_ADC_MUX_10_SEL)
#define hal_set_cdc_tx_inp_mux_adc_mux_10_sel(x) hal_set_register_field(ANC_CONTROL13,CDC_TX_INP_MUX_ADC_MUX_10_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX_10_SEL ANC_CONTROL13
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_10_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_10_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX_10_SEL ANC_CONTROL13

 /* Field CDC_TX_INP_MUX_ADC_MUX_11_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux_11_sel() hal_get_register_field8(ANC_CONTROL14,CDC_TX_INP_MUX_ADC_MUX_11_SEL)
#define hal_set_cdc_tx_inp_mux_adc_mux_11_sel(x) hal_set_register_field(ANC_CONTROL14,CDC_TX_INP_MUX_ADC_MUX_11_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX_11_SEL ANC_CONTROL14
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_11_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_11_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX_11_SEL ANC_CONTROL14

 /* Field CDC_TX_INP_MUX_ADC_MUX_12_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux_12_sel() hal_get_register_field8(ANC_CONTROL15,CDC_TX_INP_MUX_ADC_MUX_12_SEL)
#define hal_set_cdc_tx_inp_mux_adc_mux_12_sel(x) hal_set_register_field(ANC_CONTROL15,CDC_TX_INP_MUX_ADC_MUX_12_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX_12_SEL ANC_CONTROL15
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_12_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_12_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX_12_SEL ANC_CONTROL15

 /* Field CDC_TX_INP_MUX_ADC_MUX_13_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_adc_mux_13_sel() hal_get_register_field8(ANC_CONTROL16,CDC_TX_INP_MUX_ADC_MUX_13_SEL)
#define hal_set_cdc_tx_inp_mux_adc_mux_13_sel(x) hal_set_register_field(ANC_CONTROL16,CDC_TX_INP_MUX_ADC_MUX_13_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_ADC_MUX_13_SEL ANC_CONTROL16
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_13_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_ADC_MUX_13_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_ADC_MUX_13_SEL ANC_CONTROL16

 /* Field CDC_TX_INP_MUX_AMIC_MUX_10_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_amic_mux_10_sel() hal_get_register_field8(ANC_CONTROL13,CDC_TX_INP_MUX_AMIC_MUX_10_SEL)
#define hal_set_cdc_tx_inp_mux_amic_mux_10_sel(x) hal_set_register_field(ANC_CONTROL13,CDC_TX_INP_MUX_AMIC_MUX_10_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_AMIC_MUX_10_SEL ANC_CONTROL13
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_10_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_10_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_AMIC_MUX_10_SEL ANC_CONTROL13

 /* Field CDC_TX_INP_MUX_AMIC_MUX_11_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_amic_mux_11_sel() hal_get_register_field8(ANC_CONTROL14,CDC_TX_INP_MUX_AMIC_MUX_11_SEL)
#define hal_set_cdc_tx_inp_mux_amic_mux_11_sel(x) hal_set_register_field(ANC_CONTROL14,CDC_TX_INP_MUX_AMIC_MUX_11_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_AMIC_MUX_11_SEL ANC_CONTROL14
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_11_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_11_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_AMIC_MUX_11_SEL ANC_CONTROL14

 /* Field CDC_TX_INP_MUX_AMIC_MUX_12_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_amic_mux_12_sel() hal_get_register_field8(ANC_CONTROL15,CDC_TX_INP_MUX_AMIC_MUX_12_SEL)
#define hal_set_cdc_tx_inp_mux_amic_mux_12_sel(x) hal_set_register_field(ANC_CONTROL15,CDC_TX_INP_MUX_AMIC_MUX_12_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_AMIC_MUX_12_SEL ANC_CONTROL15
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_12_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_12_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_AMIC_MUX_12_SEL ANC_CONTROL15

 /* Field CDC_TX_INP_MUX_AMIC_MUX_13_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_amic_mux_13_sel() hal_get_register_field8(ANC_CONTROL16,CDC_TX_INP_MUX_AMIC_MUX_13_SEL)
#define hal_set_cdc_tx_inp_mux_amic_mux_13_sel(x) hal_set_register_field(ANC_CONTROL16,CDC_TX_INP_MUX_AMIC_MUX_13_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_AMIC_MUX_13_SEL ANC_CONTROL16
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_13_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_AMIC_MUX_13_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_AMIC_MUX_13_SEL ANC_CONTROL16

 /* Field CDC_TX_INP_MUX_DMIC_MUX_10_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_dmic_mux_10_sel() hal_get_register_field8(ANC_CONTROL13,CDC_TX_INP_MUX_DMIC_MUX_10_SEL)
#define hal_set_cdc_tx_inp_mux_dmic_mux_10_sel(x) hal_set_register_field(ANC_CONTROL13,CDC_TX_INP_MUX_DMIC_MUX_10_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_DMIC_MUX_10_SEL ANC_CONTROL13
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_10_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_10_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_DMIC_MUX_10_SEL ANC_CONTROL13

 /* Field CDC_TX_INP_MUX_DMIC_MUX_11_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_dmic_mux_11_sel() hal_get_register_field8(ANC_CONTROL14,CDC_TX_INP_MUX_DMIC_MUX_11_SEL)
#define hal_set_cdc_tx_inp_mux_dmic_mux_11_sel(x) hal_set_register_field(ANC_CONTROL14,CDC_TX_INP_MUX_DMIC_MUX_11_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_DMIC_MUX_11_SEL ANC_CONTROL14
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_11_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_11_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_DMIC_MUX_11_SEL ANC_CONTROL14

 /* Field CDC_TX_INP_MUX_DMIC_MUX_12_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_dmic_mux_12_sel() hal_get_register_field8(ANC_CONTROL15,CDC_TX_INP_MUX_DMIC_MUX_12_SEL)
#define hal_set_cdc_tx_inp_mux_dmic_mux_12_sel(x) hal_set_register_field(ANC_CONTROL15,CDC_TX_INP_MUX_DMIC_MUX_12_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_DMIC_MUX_12_SEL ANC_CONTROL15
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_12_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_12_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_DMIC_MUX_12_SEL ANC_CONTROL15

 /* Field CDC_TX_INP_MUX_DMIC_MUX_13_SEL_LSB */
 /* Accessor macros */
#define hal_get_cdc_tx_inp_mux_dmic_mux_13_sel() hal_get_register_field8(ANC_CONTROL16,CDC_TX_INP_MUX_DMIC_MUX_13_SEL)
#define hal_set_cdc_tx_inp_mux_dmic_mux_13_sel(x) hal_set_register_field(ANC_CONTROL16,CDC_TX_INP_MUX_DMIC_MUX_13_SEL,(x))
 /* Workings */
#define TYPE_OF_CDC_TX_INP_MUX_DMIC_MUX_13_SEL ANC_CONTROL16
#define FIELDS_MASKS_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_13_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CDC_TX_INP_MUX_DMIC_MUX_13_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CDC_TX_INP_MUX_DMIC_MUX_13_SEL ANC_CONTROL16

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ANC_CONTROL0_ANC_CONTROL0
#define CHECK_FIELD_TYPE_ANC_CONTROL0_END
#define CHECK_FIELD_TYPE_ANC_CONTROL1_ANC_CONTROL1
#define CHECK_FIELD_TYPE_ANC_CONTROL1_END
#define CHECK_FIELD_TYPE_ANC_CONTROL10_ANC_CONTROL10
#define CHECK_FIELD_TYPE_ANC_CONTROL10_END
#define CHECK_FIELD_TYPE_ANC_CONTROL11_ANC_CONTROL11
#define CHECK_FIELD_TYPE_ANC_CONTROL11_END
#define CHECK_FIELD_TYPE_ANC_CONTROL12_ANC_CONTROL12
#define CHECK_FIELD_TYPE_ANC_CONTROL12_END
#define CHECK_FIELD_TYPE_ANC_CONTROL13_ANC_CONTROL13
#define CHECK_FIELD_TYPE_ANC_CONTROL13_END
#define CHECK_FIELD_TYPE_ANC_CONTROL14_ANC_CONTROL14
#define CHECK_FIELD_TYPE_ANC_CONTROL14_END
#define CHECK_FIELD_TYPE_ANC_CONTROL15_ANC_CONTROL15
#define CHECK_FIELD_TYPE_ANC_CONTROL15_END
#define CHECK_FIELD_TYPE_ANC_CONTROL16_ANC_CONTROL16
#define CHECK_FIELD_TYPE_ANC_CONTROL16_END
#define CHECK_FIELD_TYPE_ANC_CONTROL17_ANC_CONTROL17
#define CHECK_FIELD_TYPE_ANC_CONTROL17_END
#define CHECK_FIELD_TYPE_ANC_CONTROL18_ANC_CONTROL18
#define CHECK_FIELD_TYPE_ANC_CONTROL18_END
#define CHECK_FIELD_TYPE_ANC_CONTROL19_ANC_CONTROL19
#define CHECK_FIELD_TYPE_ANC_CONTROL19_END
#define CHECK_FIELD_TYPE_ANC_CONTROL20_ANC_CONTROL20
#define CHECK_FIELD_TYPE_ANC_CONTROL20_END
#define CHECK_FIELD_TYPE_ANC_CONTROL21_ANC_CONTROL21
#define CHECK_FIELD_TYPE_ANC_CONTROL21_END
#define CHECK_FIELD_TYPE_ANC_CONTROL22_ANC_CONTROL22
#define CHECK_FIELD_TYPE_ANC_CONTROL22_END
#define CHECK_FIELD_TYPE_ANC_CONTROL23_ANC_CONTROL23
#define CHECK_FIELD_TYPE_ANC_CONTROL23_END
#define CHECK_FIELD_TYPE_ANC_CONTROL26_ANC_CONTROL26
#define CHECK_FIELD_TYPE_ANC_CONTROL26_END
#define CHECK_FIELD_TYPE_ANC_CONTROL27_ANC_CONTROL27
#define CHECK_FIELD_TYPE_ANC_CONTROL27_END
#define CHECK_FIELD_TYPE_ANC_CONTROL28_ANC_CONTROL28
#define CHECK_FIELD_TYPE_ANC_CONTROL28_END
#define CHECK_FIELD_TYPE_ANC_CONTROL29_ANC_CONTROL29
#define CHECK_FIELD_TYPE_ANC_CONTROL29_END
#define CHECK_FIELD_TYPE_ANC_CONTROL30_ANC_CONTROL30
#define CHECK_FIELD_TYPE_ANC_CONTROL30_END
#define CHECK_FIELD_TYPE_ANC_CONTROL31_ANC_CONTROL31
#define CHECK_FIELD_TYPE_ANC_CONTROL31_END
#define CHECK_FIELD_TYPE_ANC_CONTROL32_ANC_CONTROL32
#define CHECK_FIELD_TYPE_ANC_CONTROL32_END
#define CHECK_FIELD_TYPE_ANC_CONTROL33_ANC_CONTROL33
#define CHECK_FIELD_TYPE_ANC_CONTROL33_END
#define CHECK_FIELD_TYPE_ANC_CONTROL34_ANC_CONTROL34
#define CHECK_FIELD_TYPE_ANC_CONTROL34_END
#define CHECK_FIELD_TYPE_ANC_CONTROL35_ANC_CONTROL35
#define CHECK_FIELD_TYPE_ANC_CONTROL35_END
#define CHECK_FIELD_TYPE_ANC_CONTROL38_ANC_CONTROL38
#define CHECK_FIELD_TYPE_ANC_CONTROL38_END
#define CHECK_FIELD_TYPE_ANC_CONTROL39_ANC_CONTROL39
#define CHECK_FIELD_TYPE_ANC_CONTROL39_END
#define CHECK_FIELD_TYPE_ANC_CONTROL40_ANC_CONTROL40
#define CHECK_FIELD_TYPE_ANC_CONTROL40_END
#define CHECK_FIELD_TYPE_ANC_CONTROL9_ANC_CONTROL9
#define CHECK_FIELD_TYPE_ANC_CONTROL9_END
#define CHECK_FIELD_TYPE_ANC_STATUS0_ANC_STATUS0
#define CHECK_FIELD_TYPE_ANC_STATUS0_END
#define CHECK_FIELD_TYPE_ANC_STATUS1_ANC_STATUS1
#define CHECK_FIELD_TYPE_ANC_STATUS1_END
#define CHECK_FIELD_TYPE_CDC_ANC0_IIR_COEFF_1_CTL_CDC_ANC0_IIR_COEFF_1_CTL
#define CHECK_FIELD_TYPE_CDC_ANC0_IIR_COEFF_1_CTL_END
#define CHECK_FIELD_TYPE_CDC_ANC0_IIR_COEFF_2_CTL_CDC_ANC0_IIR_COEFF_2_CTL
#define CHECK_FIELD_TYPE_CDC_ANC0_IIR_COEFF_2_CTL_END
#define CHECK_FIELD_TYPE_CDC_ANC1_IIR_COEFF_1_CTL_CDC_ANC1_IIR_COEFF_1_CTL
#define CHECK_FIELD_TYPE_CDC_ANC1_IIR_COEFF_1_CTL_END
#define CHECK_FIELD_TYPE_CDC_ANC1_IIR_COEFF_2_CTL_CDC_ANC1_IIR_COEFF_2_CTL
#define CHECK_FIELD_TYPE_CDC_ANC1_IIR_COEFF_2_CTL_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL10(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL10(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL10, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL11(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL11, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL11(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL11, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL12(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL12, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL12(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL12, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL13(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL13(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL13, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL14(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL14(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL14, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL15(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL15(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL15, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL16(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL16(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL17(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL17(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL17, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL18(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL18(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL18, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL19(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL19(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL19, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL20(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL20(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL20, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL21(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL21(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL21, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL22(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL22(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL22, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL23(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL23(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL23, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL26(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL26, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL26(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL26, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL27(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL27, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL27(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL27, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL28(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL28(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL28, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL29(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL29(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL29, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL30(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL30(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL30, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL31(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL31(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL31, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL32(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL32(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL32, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL33(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL33(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL33, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL34(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL34(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL34, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL35(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL35(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL35, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL38(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL38, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL38(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL38, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL39(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL39, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL39(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL39, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL40(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL40(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL40, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_CONTROL9(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_CONTROL9(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_CONTROL9, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_STATUS0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_STATUS0(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_ANC_STATUS1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ANC_STATUS1(next, val, rest) \
   (CHECK_FIELD_TYPE(ANC_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define ANC_CONTROL0_REG_BITS (10u)
#define hal_set_reg_anc_control0(x) hal_set_register(ANC_CONTROL0, x, 1)
#define hal_get_reg_anc_control0() hal_get_register(ANC_CONTROL0, 1)
#define ANC_CONTROL1_REG_BITS (16u)
#define hal_set_reg_anc_control1(x) hal_set_register(ANC_CONTROL1, x, 1)
#define hal_get_reg_anc_control1() hal_get_register(ANC_CONTROL1, 1)
#define ANC_CONTROL10_REG_BITS (7u)
#define hal_set_reg_anc_control10(x) hal_set_register(ANC_CONTROL10, x, 1)
#define hal_get_reg_anc_control10() hal_get_register(ANC_CONTROL10, 1)
#define ANC_CONTROL11_REG_BITS (16u)
#define hal_set_reg_anc_control11(x) hal_set_register(ANC_CONTROL11, x, 1)
#define hal_get_reg_anc_control11() hal_get_register(ANC_CONTROL11, 1)
#define ANC_CONTROL12_REG_BITS (16u)
#define hal_set_reg_anc_control12(x) hal_set_register(ANC_CONTROL12, x, 1)
#define hal_get_reg_anc_control12() hal_get_register(ANC_CONTROL12, 1)
#define ANC_CONTROL13_REG_BITS (8u)
#define hal_set_reg_anc_control13(x) hal_set_register(ANC_CONTROL13, x, 1)
#define hal_get_reg_anc_control13() hal_get_register(ANC_CONTROL13, 1)
#define ANC_CONTROL14_REG_BITS (8u)
#define hal_set_reg_anc_control14(x) hal_set_register(ANC_CONTROL14, x, 1)
#define hal_get_reg_anc_control14() hal_get_register(ANC_CONTROL14, 1)
#define ANC_CONTROL15_REG_BITS (8u)
#define hal_set_reg_anc_control15(x) hal_set_register(ANC_CONTROL15, x, 1)
#define hal_get_reg_anc_control15() hal_get_register(ANC_CONTROL15, 1)
#define ANC_CONTROL16_REG_BITS (8u)
#define hal_set_reg_anc_control16(x) hal_set_register(ANC_CONTROL16, x, 1)
#define hal_get_reg_anc_control16() hal_get_register(ANC_CONTROL16, 1)
#define ANC_CONTROL17_REG_BITS (8u)
#define hal_set_reg_anc_control17(x) hal_set_register(ANC_CONTROL17, x, 1)
#define hal_get_reg_anc_control17() hal_get_register(ANC_CONTROL17, 1)
#define ANC_CONTROL18_REG_BITS (16u)
#define hal_set_reg_anc_control18(x) hal_set_register(ANC_CONTROL18, x, 1)
#define hal_get_reg_anc_control18() hal_get_register(ANC_CONTROL18, 1)
#define ANC_CONTROL19_REG_BITS (16u)
#define hal_set_reg_anc_control19(x) hal_set_register(ANC_CONTROL19, x, 1)
#define hal_get_reg_anc_control19() hal_get_register(ANC_CONTROL19, 1)
#define ANC_CONTROL20_REG_BITS (16u)
#define hal_set_reg_anc_control20(x) hal_set_register(ANC_CONTROL20, x, 1)
#define hal_get_reg_anc_control20() hal_get_register(ANC_CONTROL20, 1)
#define ANC_CONTROL21_REG_BITS (8u)
#define hal_set_reg_anc_control21(x) hal_set_register(ANC_CONTROL21, x, 1)
#define hal_get_reg_anc_control21() hal_get_register(ANC_CONTROL21, 1)
#define ANC_CONTROL22_REG_BITS (16u)
#define hal_set_reg_anc_control22(x) hal_set_register(ANC_CONTROL22, x, 1)
#define hal_get_reg_anc_control22() hal_get_register(ANC_CONTROL22, 1)
#define ANC_CONTROL23_REG_BITS (8u)
#define hal_set_reg_anc_control23(x) hal_set_register(ANC_CONTROL23, x, 1)
#define hal_get_reg_anc_control23() hal_get_register(ANC_CONTROL23, 1)
#define ANC_CONTROL24_REG_BITS (8u)
#define hal_set_reg_anc_control24(x) hal_set_register(ANC_CONTROL24, x, 1)
#define hal_get_reg_anc_control24() hal_get_register(ANC_CONTROL24, 1)
#define ANC_CONTROL25_REG_BITS (8u)
#define hal_set_reg_anc_control25(x) hal_set_register(ANC_CONTROL25, x, 1)
#define hal_get_reg_anc_control25() hal_get_register(ANC_CONTROL25, 1)
#define ANC_CONTROL26_REG_BITS (16u)
#define hal_set_reg_anc_control26(x) hal_set_register(ANC_CONTROL26, x, 1)
#define hal_get_reg_anc_control26() hal_get_register(ANC_CONTROL26, 1)
#define ANC_CONTROL27_REG_BITS (8u)
#define hal_set_reg_anc_control27(x) hal_set_register(ANC_CONTROL27, x, 1)
#define hal_get_reg_anc_control27() hal_get_register(ANC_CONTROL27, 1)
#define ANC_CONTROL28_REG_BITS (4u)
#define hal_set_reg_anc_control28(x) hal_set_register(ANC_CONTROL28, x, 1)
#define hal_get_reg_anc_control28() hal_get_register(ANC_CONTROL28, 1)
#define ANC_CONTROL29_REG_BITS (8u)
#define hal_set_reg_anc_control29(x) hal_set_register(ANC_CONTROL29, x, 1)
#define hal_get_reg_anc_control29() hal_get_register(ANC_CONTROL29, 1)
#define ANC_CONTROL30_REG_BITS (16u)
#define hal_set_reg_anc_control30(x) hal_set_register(ANC_CONTROL30, x, 1)
#define hal_get_reg_anc_control30() hal_get_register(ANC_CONTROL30, 1)
#define ANC_CONTROL31_REG_BITS (16u)
#define hal_set_reg_anc_control31(x) hal_set_register(ANC_CONTROL31, x, 1)
#define hal_get_reg_anc_control31() hal_get_register(ANC_CONTROL31, 1)
#define ANC_CONTROL32_REG_BITS (16u)
#define hal_set_reg_anc_control32(x) hal_set_register(ANC_CONTROL32, x, 1)
#define hal_get_reg_anc_control32() hal_get_register(ANC_CONTROL32, 1)
#define ANC_CONTROL33_REG_BITS (8u)
#define hal_set_reg_anc_control33(x) hal_set_register(ANC_CONTROL33, x, 1)
#define hal_get_reg_anc_control33() hal_get_register(ANC_CONTROL33, 1)
#define ANC_CONTROL34_REG_BITS (16u)
#define hal_set_reg_anc_control34(x) hal_set_register(ANC_CONTROL34, x, 1)
#define hal_get_reg_anc_control34() hal_get_register(ANC_CONTROL34, 1)
#define ANC_CONTROL35_REG_BITS (8u)
#define hal_set_reg_anc_control35(x) hal_set_register(ANC_CONTROL35, x, 1)
#define hal_get_reg_anc_control35() hal_get_register(ANC_CONTROL35, 1)
#define ANC_CONTROL36_REG_BITS (8u)
#define hal_set_reg_anc_control36(x) hal_set_register(ANC_CONTROL36, x, 1)
#define hal_get_reg_anc_control36() hal_get_register(ANC_CONTROL36, 1)
#define ANC_CONTROL37_REG_BITS (8u)
#define hal_set_reg_anc_control37(x) hal_set_register(ANC_CONTROL37, x, 1)
#define hal_get_reg_anc_control37() hal_get_register(ANC_CONTROL37, 1)
#define ANC_CONTROL38_REG_BITS (16u)
#define hal_set_reg_anc_control38(x) hal_set_register(ANC_CONTROL38, x, 1)
#define hal_get_reg_anc_control38() hal_get_register(ANC_CONTROL38, 1)
#define ANC_CONTROL39_REG_BITS (8u)
#define hal_set_reg_anc_control39(x) hal_set_register(ANC_CONTROL39, x, 1)
#define hal_get_reg_anc_control39() hal_get_register(ANC_CONTROL39, 1)
#define ANC_CONTROL40_REG_BITS (4u)
#define hal_set_reg_anc_control40(x) hal_set_register(ANC_CONTROL40, x, 1)
#define hal_get_reg_anc_control40() hal_get_register(ANC_CONTROL40, 1)
#define ANC_CONTROL9_REG_BITS (7u)
#define hal_set_reg_anc_control9(x) hal_set_register(ANC_CONTROL9, x, 1)
#define hal_get_reg_anc_control9() hal_get_register(ANC_CONTROL9, 1)
#define ANC_STATUS0_REG_BITS (3u)
#define hal_get_reg_anc_status0() hal_get_register(ANC_STATUS0, 1)
#define ANC_STATUS1_REG_BITS (3u)
#define hal_get_reg_anc_status1() hal_get_register(ANC_STATUS1, 1)
#define CDC_ANC0_IIR_COEFF_1_CTL_REG_BITS (8u)
#define hal_set_reg_cdc_anc0_iir_coeff_1_ctl(x) hal_set_register(CDC_ANC0_IIR_COEFF_1_CTL, x, 1)
#define hal_get_reg_cdc_anc0_iir_coeff_1_ctl() hal_get_register(CDC_ANC0_IIR_COEFF_1_CTL, 1)
#define CDC_ANC0_IIR_COEFF_2_CTL_REG_BITS (8u)
#define hal_set_reg_cdc_anc0_iir_coeff_2_ctl(x) hal_set_register(CDC_ANC0_IIR_COEFF_2_CTL, x, 1)
#define hal_get_reg_cdc_anc0_iir_coeff_2_ctl() hal_get_register(CDC_ANC0_IIR_COEFF_2_CTL, 1)
#define CDC_ANC1_IIR_COEFF_1_CTL_REG_BITS (8u)
#define hal_set_reg_cdc_anc1_iir_coeff_1_ctl(x) hal_set_register(CDC_ANC1_IIR_COEFF_1_CTL, x, 1)
#define hal_get_reg_cdc_anc1_iir_coeff_1_ctl() hal_get_register(CDC_ANC1_IIR_COEFF_1_CTL, 1)
#define CDC_ANC1_IIR_COEFF_2_CTL_REG_BITS (8u)
#define hal_set_reg_cdc_anc1_iir_coeff_2_ctl(x) hal_set_register(CDC_ANC1_IIR_COEFF_2_CTL, x, 1)
#define hal_get_reg_cdc_anc1_iir_coeff_2_ctl() hal_get_register(CDC_ANC1_IIR_COEFF_2_CTL, 1)

 /* Workings */
#define SETTER_FOR_ANC_CONTROL0 hal_set_reg_anc_control0
#define GETTER_FOR_ANC_CONTROL0 hal_get_reg_anc_control0
#define SETTER_FOR_ANC_CONTROL1 hal_set_reg_anc_control1
#define GETTER_FOR_ANC_CONTROL1 hal_get_reg_anc_control1
#define SETTER_FOR_ANC_CONTROL10 hal_set_reg_anc_control10
#define GETTER_FOR_ANC_CONTROL10 hal_get_reg_anc_control10
#define SETTER_FOR_ANC_CONTROL11 hal_set_reg_anc_control11
#define GETTER_FOR_ANC_CONTROL11 hal_get_reg_anc_control11
#define SETTER_FOR_ANC_CONTROL12 hal_set_reg_anc_control12
#define GETTER_FOR_ANC_CONTROL12 hal_get_reg_anc_control12
#define SETTER_FOR_ANC_CONTROL13 hal_set_reg_anc_control13
#define GETTER_FOR_ANC_CONTROL13 hal_get_reg_anc_control13
#define SETTER_FOR_ANC_CONTROL14 hal_set_reg_anc_control14
#define GETTER_FOR_ANC_CONTROL14 hal_get_reg_anc_control14
#define SETTER_FOR_ANC_CONTROL15 hal_set_reg_anc_control15
#define GETTER_FOR_ANC_CONTROL15 hal_get_reg_anc_control15
#define SETTER_FOR_ANC_CONTROL16 hal_set_reg_anc_control16
#define GETTER_FOR_ANC_CONTROL16 hal_get_reg_anc_control16
#define SETTER_FOR_ANC_CONTROL17 hal_set_reg_anc_control17
#define GETTER_FOR_ANC_CONTROL17 hal_get_reg_anc_control17
#define SETTER_FOR_ANC_CONTROL18 hal_set_reg_anc_control18
#define GETTER_FOR_ANC_CONTROL18 hal_get_reg_anc_control18
#define SETTER_FOR_ANC_CONTROL19 hal_set_reg_anc_control19
#define GETTER_FOR_ANC_CONTROL19 hal_get_reg_anc_control19
#define SETTER_FOR_ANC_CONTROL20 hal_set_reg_anc_control20
#define GETTER_FOR_ANC_CONTROL20 hal_get_reg_anc_control20
#define SETTER_FOR_ANC_CONTROL21 hal_set_reg_anc_control21
#define GETTER_FOR_ANC_CONTROL21 hal_get_reg_anc_control21
#define SETTER_FOR_ANC_CONTROL22 hal_set_reg_anc_control22
#define GETTER_FOR_ANC_CONTROL22 hal_get_reg_anc_control22
#define SETTER_FOR_ANC_CONTROL23 hal_set_reg_anc_control23
#define GETTER_FOR_ANC_CONTROL23 hal_get_reg_anc_control23
#define SETTER_FOR_ANC_CONTROL24 hal_set_reg_anc_control24
#define GETTER_FOR_ANC_CONTROL24 hal_get_reg_anc_control24
#define SETTER_FOR_ANC_CONTROL25 hal_set_reg_anc_control25
#define GETTER_FOR_ANC_CONTROL25 hal_get_reg_anc_control25
#define SETTER_FOR_ANC_CONTROL26 hal_set_reg_anc_control26
#define GETTER_FOR_ANC_CONTROL26 hal_get_reg_anc_control26
#define SETTER_FOR_ANC_CONTROL27 hal_set_reg_anc_control27
#define GETTER_FOR_ANC_CONTROL27 hal_get_reg_anc_control27
#define SETTER_FOR_ANC_CONTROL28 hal_set_reg_anc_control28
#define GETTER_FOR_ANC_CONTROL28 hal_get_reg_anc_control28
#define SETTER_FOR_ANC_CONTROL29 hal_set_reg_anc_control29
#define GETTER_FOR_ANC_CONTROL29 hal_get_reg_anc_control29
#define SETTER_FOR_ANC_CONTROL30 hal_set_reg_anc_control30
#define GETTER_FOR_ANC_CONTROL30 hal_get_reg_anc_control30
#define SETTER_FOR_ANC_CONTROL31 hal_set_reg_anc_control31
#define GETTER_FOR_ANC_CONTROL31 hal_get_reg_anc_control31
#define SETTER_FOR_ANC_CONTROL32 hal_set_reg_anc_control32
#define GETTER_FOR_ANC_CONTROL32 hal_get_reg_anc_control32
#define SETTER_FOR_ANC_CONTROL33 hal_set_reg_anc_control33
#define GETTER_FOR_ANC_CONTROL33 hal_get_reg_anc_control33
#define SETTER_FOR_ANC_CONTROL34 hal_set_reg_anc_control34
#define GETTER_FOR_ANC_CONTROL34 hal_get_reg_anc_control34
#define SETTER_FOR_ANC_CONTROL35 hal_set_reg_anc_control35
#define GETTER_FOR_ANC_CONTROL35 hal_get_reg_anc_control35
#define SETTER_FOR_ANC_CONTROL36 hal_set_reg_anc_control36
#define GETTER_FOR_ANC_CONTROL36 hal_get_reg_anc_control36
#define SETTER_FOR_ANC_CONTROL37 hal_set_reg_anc_control37
#define GETTER_FOR_ANC_CONTROL37 hal_get_reg_anc_control37
#define SETTER_FOR_ANC_CONTROL38 hal_set_reg_anc_control38
#define GETTER_FOR_ANC_CONTROL38 hal_get_reg_anc_control38
#define SETTER_FOR_ANC_CONTROL39 hal_set_reg_anc_control39
#define GETTER_FOR_ANC_CONTROL39 hal_get_reg_anc_control39
#define SETTER_FOR_ANC_CONTROL40 hal_set_reg_anc_control40
#define GETTER_FOR_ANC_CONTROL40 hal_get_reg_anc_control40
#define SETTER_FOR_ANC_CONTROL9 hal_set_reg_anc_control9
#define GETTER_FOR_ANC_CONTROL9 hal_get_reg_anc_control9
#define GETTER_FOR_ANC_STATUS0 hal_get_reg_anc_status0
#define GETTER_FOR_ANC_STATUS1 hal_get_reg_anc_status1
#define SETTER_FOR_CDC_ANC0_IIR_COEFF_1_CTL hal_set_reg_cdc_anc0_iir_coeff_1_ctl
#define GETTER_FOR_CDC_ANC0_IIR_COEFF_1_CTL hal_get_reg_cdc_anc0_iir_coeff_1_ctl
#define SETTER_FOR_CDC_ANC0_IIR_COEFF_2_CTL hal_set_reg_cdc_anc0_iir_coeff_2_ctl
#define GETTER_FOR_CDC_ANC0_IIR_COEFF_2_CTL hal_get_reg_cdc_anc0_iir_coeff_2_ctl
#define SETTER_FOR_CDC_ANC1_IIR_COEFF_1_CTL hal_set_reg_cdc_anc1_iir_coeff_1_ctl
#define GETTER_FOR_CDC_ANC1_IIR_COEFF_1_CTL hal_get_reg_cdc_anc1_iir_coeff_1_ctl
#define SETTER_FOR_CDC_ANC1_IIR_COEFF_2_CTL hal_set_reg_cdc_anc1_iir_coeff_2_ctl
#define GETTER_FOR_CDC_ANC1_IIR_COEFF_2_CTL hal_get_reg_cdc_anc1_iir_coeff_2_ctl

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_ANC) */
#endif /* __HAL_MACROS_H__MODULE_ANC */







#ifndef __HAL_MACROS_H__MODULE_K32_MC_INTER_PROC_KEYHOLE
#define __HAL_MACROS_H__MODULE_K32_MC_INTER_PROC_KEYHOLE

/* -- Kalimba 32-bit Multicore inter-processor communication keyhole register block -- */

 /* Field INTER_PROC_KEYHOLE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_addr() hal_get_register_field32(INTER_PROC_KEYHOLE_ADDR,INTER_PROC_KEYHOLE_ADDR)
#define hal_set_inter_proc_keyhole_addr(x) hal_set_register_field(INTER_PROC_KEYHOLE_ADDR,INTER_PROC_KEYHOLE_ADDR,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_ADDR INTER_PROC_KEYHOLE_ADDR
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_ADDR INTER_PROC_KEYHOLE_ADDR

 /* Field INTER_PROC_KEYHOLE_CTRL_BYTE_SEL_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_byte_sel() hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_BYTE_SEL)
#define hal_set_inter_proc_keyhole_ctrl_byte_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_BYTE_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_CTRL_CPU_SEL_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_cpu_sel() hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_CPU_SEL)
#define hal_set_inter_proc_keyhole_ctrl_cpu_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_CPU_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_CPU_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_CPU_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_CPU_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_CPU_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_pm_dm_sel() ((inter_proc_keyhole_ctrl_pm_dm_sel) hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL))
#define hal_set_inter_proc_keyhole_ctrl_pm_dm_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_read_write_sel() ((inter_proc_keyhole_ctrl_read_write_sel) hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL))
#define hal_set_inter_proc_keyhole_ctrl_read_write_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_READ_DATA_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_read_data() hal_get_register_field32(INTER_PROC_KEYHOLE_READ_DATA,INTER_PROC_KEYHOLE_READ_DATA)
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_READ_DATA INTER_PROC_KEYHOLE_READ_DATA
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_READ_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_READ_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_READ_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_READ_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_READ_DATA INTER_PROC_KEYHOLE_READ_DATA

 /* Field INTER_PROC_KEYHOLE_WRITE_DATA_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_write_data() hal_get_register_field32(INTER_PROC_KEYHOLE_WRITE_DATA,INTER_PROC_KEYHOLE_WRITE_DATA)
#define hal_set_inter_proc_keyhole_write_data(x) hal_set_register_field(INTER_PROC_KEYHOLE_WRITE_DATA,INTER_PROC_KEYHOLE_WRITE_DATA,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_WRITE_DATA INTER_PROC_KEYHOLE_WRITE_DATA
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_WRITE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_WRITE_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_WRITE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_WRITE_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_WRITE_DATA INTER_PROC_KEYHOLE_WRITE_DATA

 /* Field K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p0_access_permission() ((k32_mc_inter_proc_keyhole__p0_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p0_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Field K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p1_access_permission() ((k32_mc_inter_proc_keyhole__p1_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p1_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Field K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p2_access_permission() ((k32_mc_inter_proc_keyhole__p2_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p2_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Field K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p3_access_permission() ((k32_mc_inter_proc_keyhole__p3_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p3_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ACCESS_CTRL_INTER_PROC_KEYHOLE_ACCESS_CTRL
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ADDR_INTER_PROC_KEYHOLE_ADDR
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ADDR_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_CTRL_INTER_PROC_KEYHOLE_CTRL
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_CTRL_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_READ_DATA_INTER_PROC_KEYHOLE_READ_DATA
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_READ_DATA_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_WRITE_DATA_INTER_PROC_KEYHOLE_WRITE_DATA
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_WRITE_DATA_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define INTER_PROC_KEYHOLE_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_inter_proc_keyhole_access_ctrl(x) hal_set_register(INTER_PROC_KEYHOLE_ACCESS_CTRL, x, 1)
#define hal_get_reg_inter_proc_keyhole_access_ctrl() hal_get_register(INTER_PROC_KEYHOLE_ACCESS_CTRL, 1)
#define INTER_PROC_KEYHOLE_ADDR_REG_BITS (32u)
#define hal_set_reg_inter_proc_keyhole_addr(x) hal_set_register(INTER_PROC_KEYHOLE_ADDR, x, 1)
#define hal_get_reg_inter_proc_keyhole_addr() hal_get_register(INTER_PROC_KEYHOLE_ADDR, 1)
#define INTER_PROC_KEYHOLE_CTRL_REG_BITS (8u)
#define hal_set_reg_inter_proc_keyhole_ctrl(x) hal_set_register(INTER_PROC_KEYHOLE_CTRL, x, 1)
#define hal_get_reg_inter_proc_keyhole_ctrl() hal_get_register(INTER_PROC_KEYHOLE_CTRL, 1)
#define INTER_PROC_KEYHOLE_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_inter_proc_keyhole_mutex_lock(x) hal_set_register(INTER_PROC_KEYHOLE_MUTEX_LOCK, x, 1)
#define hal_get_reg_inter_proc_keyhole_mutex_lock() hal_get_register(INTER_PROC_KEYHOLE_MUTEX_LOCK, 1)
#define INTER_PROC_KEYHOLE_READ_DATA_REG_BITS (32u)
#define hal_get_reg_inter_proc_keyhole_read_data() hal_get_register(INTER_PROC_KEYHOLE_READ_DATA, 1)
#define INTER_PROC_KEYHOLE_STATUS_REG_BITS (1u)
#define hal_get_reg_inter_proc_keyhole_status() hal_get_register(INTER_PROC_KEYHOLE_STATUS, 1)
#define INTER_PROC_KEYHOLE_WRITE_DATA_REG_BITS (32u)
#define hal_set_reg_inter_proc_keyhole_write_data(x) hal_set_register(INTER_PROC_KEYHOLE_WRITE_DATA, x, 1)
#define hal_get_reg_inter_proc_keyhole_write_data() hal_get_register(INTER_PROC_KEYHOLE_WRITE_DATA, 1)

 /* Workings */
#define SETTER_FOR_INTER_PROC_KEYHOLE_ACCESS_CTRL hal_set_reg_inter_proc_keyhole_access_ctrl
#define GETTER_FOR_INTER_PROC_KEYHOLE_ACCESS_CTRL hal_get_reg_inter_proc_keyhole_access_ctrl
#define SETTER_FOR_INTER_PROC_KEYHOLE_ADDR hal_set_reg_inter_proc_keyhole_addr
#define GETTER_FOR_INTER_PROC_KEYHOLE_ADDR hal_get_reg_inter_proc_keyhole_addr
#define SETTER_FOR_INTER_PROC_KEYHOLE_CTRL hal_set_reg_inter_proc_keyhole_ctrl
#define GETTER_FOR_INTER_PROC_KEYHOLE_CTRL hal_get_reg_inter_proc_keyhole_ctrl
#define SETTER_FOR_INTER_PROC_KEYHOLE_MUTEX_LOCK hal_set_reg_inter_proc_keyhole_mutex_lock
#define GETTER_FOR_INTER_PROC_KEYHOLE_MUTEX_LOCK hal_get_reg_inter_proc_keyhole_mutex_lock
#define GETTER_FOR_INTER_PROC_KEYHOLE_READ_DATA hal_get_reg_inter_proc_keyhole_read_data
#define GETTER_FOR_INTER_PROC_KEYHOLE_STATUS hal_get_reg_inter_proc_keyhole_status
#define SETTER_FOR_INTER_PROC_KEYHOLE_WRITE_DATA hal_set_reg_inter_proc_keyhole_write_data
#define GETTER_FOR_INTER_PROC_KEYHOLE_WRITE_DATA hal_get_reg_inter_proc_keyhole_write_data

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MC_INTER_PROC_KEYHOLE) */








#if defined(IO_DEFS_MODULE_K32_MC_CONTROL) 

#ifndef __HAL_MACROS_H__MODULE_K32_MC_CONTROL
#define __HAL_MACROS_H__MODULE_K32_MC_CONTROL

/* -- Kalimba general control registers for various functions that don't relate to the other registers at this level -- */

 /* Field K32_MC_CONTROL__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_control__p0_access_permission() ((k32_mc_control__p0_access_permission) hal_get_register_field8(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P0_ACCESS_PERMISSION))
#define hal_set_k32_mc_control__p0_access_permission(x) hal_set_register_field(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_CONTROL__P0_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_CONTROL__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_CONTROL__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_CONTROL__P0_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL

 /* Field K32_MC_CONTROL__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_control__p1_access_permission() ((k32_mc_control__p1_access_permission) hal_get_register_field8(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P1_ACCESS_PERMISSION))
#define hal_set_k32_mc_control__p1_access_permission(x) hal_set_register_field(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_CONTROL__P1_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_CONTROL__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_CONTROL__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_CONTROL__P1_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL

 /* Field K32_MC_CONTROL__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_control__p2_access_permission() ((k32_mc_control__p2_access_permission) hal_get_register_field8(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P2_ACCESS_PERMISSION))
#define hal_set_k32_mc_control__p2_access_permission(x) hal_set_register_field(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_CONTROL__P2_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_CONTROL__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_CONTROL__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_CONTROL__P2_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL

 /* Field K32_MC_CONTROL__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_control__p3_access_permission() ((k32_mc_control__p3_access_permission) hal_get_register_field8(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P3_ACCESS_PERMISSION))
#define hal_set_k32_mc_control__p3_access_permission(x) hal_set_register_field(KALIMBA_CONTROL_ACCESS_CTRL,K32_MC_CONTROL__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_CONTROL__P3_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_CONTROL__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_CONTROL__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_CONTROL__P3_ACCESS_PERMISSION KALIMBA_CONTROL_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_KALIMBA_CONTROL_ACCESS_CTRL_KALIMBA_CONTROL_ACCESS_CTRL
#define CHECK_FIELD_TYPE_KALIMBA_CONTROL_ACCESS_CTRL_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_KALIMBA_CONTROL_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_CONTROL_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_CONTROL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define KALIMBA_CONTROL_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_kalimba_control_access_ctrl(x) hal_set_register(KALIMBA_CONTROL_ACCESS_CTRL, x, 1)
#define hal_get_reg_kalimba_control_access_ctrl() hal_get_register(KALIMBA_CONTROL_ACCESS_CTRL, 1)
#define KALIMBA_CONTROL_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_kalimba_control_mutex_lock(x) hal_set_register(KALIMBA_CONTROL_MUTEX_LOCK, x, 1)
#define hal_get_reg_kalimba_control_mutex_lock() hal_get_register(KALIMBA_CONTROL_MUTEX_LOCK, 1)
#define KALIMBA_DEBUG_SELECT_REG_BITS (5u)
#define hal_set_reg_kalimba_debug_select(x) hal_set_register(KALIMBA_DEBUG_SELECT, x, 1)
#define hal_get_reg_kalimba_debug_select() hal_get_register(KALIMBA_DEBUG_SELECT, 1)

 /* Workings */
#define SETTER_FOR_KALIMBA_CONTROL_ACCESS_CTRL hal_set_reg_kalimba_control_access_ctrl
#define GETTER_FOR_KALIMBA_CONTROL_ACCESS_CTRL hal_get_reg_kalimba_control_access_ctrl
#define SETTER_FOR_KALIMBA_CONTROL_MUTEX_LOCK hal_set_reg_kalimba_control_mutex_lock
#define GETTER_FOR_KALIMBA_CONTROL_MUTEX_LOCK hal_get_reg_kalimba_control_mutex_lock
#define SETTER_FOR_KALIMBA_DEBUG_SELECT hal_set_reg_kalimba_debug_select
#define GETTER_FOR_KALIMBA_DEBUG_SELECT hal_get_reg_kalimba_debug_select

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MC_CONTROL) */
#endif /* __HAL_MACROS_H__MODULE_K32_MC_CONTROL */








#ifndef __HAL_MACROS_H__MODULE_K32_CORE
#define __HAL_MACROS_H__MODULE_K32_CORE

/* -- Kalimba 32-bit Core Control registers -- */

 /* Field ADDSUB_SATURATE_ON_OVERFLOW */
 /* Accessor macros */
#define hal_get_addsub_saturate_on_overflow() hal_get_register_field8(ARITHMETIC_MODE,ADDSUB_SATURATE_ON_OVERFLOW)
#define hal_set_addsub_saturate_on_overflow(x) hal_set_register_field(ARITHMETIC_MODE,ADDSUB_SATURATE_ON_OVERFLOW,(x))
 /* Workings */
#define TYPE_OF_ADDSUB_SATURATE_ON_OVERFLOW ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_ADDSUB_SATURATE_ON_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ADDSUB_SATURATE_ON_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ADDSUB_SATURATE_ON_OVERFLOW ARITHMETIC_MODE

 /* Field ARITHMETIC_16BIT_MODE */
 /* Accessor macros */
#define hal_get_arithmetic_16bit_mode() hal_get_register_field8(ARITHMETIC_MODE,ARITHMETIC_16BIT_MODE)
#define hal_set_arithmetic_16bit_mode(x) hal_set_register_field(ARITHMETIC_MODE,ARITHMETIC_16BIT_MODE,(x))
 /* Workings */
#define TYPE_OF_ARITHMETIC_16BIT_MODE ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_ARITHMETIC_16BIT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ARITHMETIC_16BIT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ARITHMETIC_16BIT_MODE ARITHMETIC_MODE

 /* Field BITREVERSE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_addr() hal_get_register_field32(BITREVERSE_ADDR,BITREVERSE_ADDR)
 /* Workings */
#define TYPE_OF_BITREVERSE_ADDR BITREVERSE_ADDR
#define FIELDS_MASKS_SHIFTED_BITREVERSE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_ADDR BITREVERSE_ADDR

 /* Field BITREVERSE_DATA16_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_data16() hal_get_register_field32(BITREVERSE_DATA16,BITREVERSE_DATA16)
 /* Workings */
#define TYPE_OF_BITREVERSE_DATA16 BITREVERSE_DATA16
#define FIELDS_MASKS_SHIFTED_BITREVERSE_DATA16(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_DATA16(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_DATA16 BITREVERSE_DATA16

 /* Field BITREVERSE_DATA_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_data() hal_get_register_field32(BITREVERSE_DATA,BITREVERSE_DATA)
 /* Workings */
#define TYPE_OF_BITREVERSE_DATA BITREVERSE_DATA
#define FIELDS_MASKS_SHIFTED_BITREVERSE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_DATA BITREVERSE_DATA

 /* Field BITREVERSE_VAL_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_val() hal_get_register_field32(BITREVERSE_VAL,BITREVERSE_VAL)
#define hal_set_bitreverse_val(x) hal_set_register_field(BITREVERSE_VAL,BITREVERSE_VAL,(x))
 /* Workings */
#define TYPE_OF_BITREVERSE_VAL BITREVERSE_VAL
#define FIELDS_MASKS_SHIFTED_BITREVERSE_VAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_VAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_VAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_VAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_VAL BITREVERSE_VAL

 /* Field DBG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_dbg_counters_en() hal_get_register_field8(DBG_COUNTERS_EN,DBG_COUNTERS_EN)
#define hal_set_dbg_counters_en(x) hal_set_register_field(DBG_COUNTERS_EN,DBG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_DBG_COUNTERS_EN DBG_COUNTERS_EN
#define FIELDS_MASKS_SHIFTED_DBG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DBG_COUNTERS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DBG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DBG_COUNTERS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DBG_COUNTERS_EN DBG_COUNTERS_EN

 /* Field DISABLE_FRAC_MULT_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_frac_mult_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_FRAC_MULT_ROUNDING)
#define hal_set_disable_frac_mult_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_FRAC_MULT_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_FRAC_MULT_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_FRAC_MULT_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_FRAC_MULT_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_FRAC_MULT_ROUNDING ARITHMETIC_MODE

 /* Field DISABLE_RMAC_STORE_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_rmac_store_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_RMAC_STORE_ROUNDING)
#define hal_set_disable_rmac_store_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_RMAC_STORE_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_RMAC_STORE_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_RMAC_STORE_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_RMAC_STORE_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_RMAC_STORE_ROUNDING ARITHMETIC_MODE

 /* Field DISABLE_UNBIASED_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_unbiased_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_UNBIASED_ROUNDING)
#define hal_set_disable_unbiased_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_UNBIASED_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_UNBIASED_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_UNBIASED_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_UNBIASED_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_UNBIASED_ROUNDING ARITHMETIC_MODE

 /* Field FRAME_POINTER_LSB */
 /* Accessor macros */
#define hal_get_frame_pointer() hal_get_register_field32(FRAME_POINTER,FRAME_POINTER)
#define hal_set_frame_pointer(x) hal_set_register_field(FRAME_POINTER,FRAME_POINTER,(x))
 /* Workings */
#define TYPE_OF_FRAME_POINTER FRAME_POINTER
#define FIELDS_MASKS_SHIFTED_FRAME_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(FRAME_POINTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FRAME_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(FRAME_POINTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FRAME_POINTER FRAME_POINTER

 /* Field MM_DOLOOP_END_LSB */
 /* Accessor macros */
#define hal_get_mm_doloop_end() hal_get_register_field32(MM_DOLOOP_END,MM_DOLOOP_END)
#define hal_set_mm_doloop_end(x) hal_set_register_field(MM_DOLOOP_END,MM_DOLOOP_END,(x))
 /* Workings */
#define TYPE_OF_MM_DOLOOP_END MM_DOLOOP_END
#define FIELDS_MASKS_SHIFTED_MM_DOLOOP_END(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_END, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_DOLOOP_END(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_END, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_DOLOOP_END MM_DOLOOP_END

 /* Field MM_DOLOOP_START_LSB */
 /* Accessor macros */
#define hal_get_mm_doloop_start() hal_get_register_field32(MM_DOLOOP_START,MM_DOLOOP_START)
#define hal_set_mm_doloop_start(x) hal_set_register_field(MM_DOLOOP_START,MM_DOLOOP_START,(x))
 /* Workings */
#define TYPE_OF_MM_DOLOOP_START MM_DOLOOP_START
#define FIELDS_MASKS_SHIFTED_MM_DOLOOP_START(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_START, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_DOLOOP_START(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_START, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_DOLOOP_START MM_DOLOOP_START

 /* Field MM_QUOTIENT_LSB */
 /* Accessor macros */
#define hal_get_mm_quotient() hal_get_register_field32(MM_QUOTIENT,MM_QUOTIENT)
#define hal_set_mm_quotient(x) hal_set_register_field(MM_QUOTIENT,MM_QUOTIENT,(x))
 /* Workings */
#define TYPE_OF_MM_QUOTIENT MM_QUOTIENT
#define FIELDS_MASKS_SHIFTED_MM_QUOTIENT(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_QUOTIENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_QUOTIENT(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_QUOTIENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_QUOTIENT MM_QUOTIENT

 /* Field MM_REM_LSB */
 /* Accessor macros */
#define hal_get_mm_rem() hal_get_register_field32(MM_REM,MM_REM)
#define hal_set_mm_rem(x) hal_set_register_field(MM_REM,MM_REM,(x))
 /* Workings */
#define TYPE_OF_MM_REM MM_REM
#define FIELDS_MASKS_SHIFTED_MM_REM(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_REM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_REM(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_REM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_REM MM_REM

 /* Field MM_RINTLINK_LSB */
 /* Accessor macros */
#define hal_get_mm_rintlink() hal_get_register_field32(MM_RINTLINK,MM_RINTLINK)
#define hal_set_mm_rintlink(x) hal_set_register_field(MM_RINTLINK,MM_RINTLINK,(x))
 /* Workings */
#define TYPE_OF_MM_RINTLINK MM_RINTLINK
#define FIELDS_MASKS_SHIFTED_MM_RINTLINK(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_RINTLINK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_RINTLINK(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_RINTLINK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_RINTLINK MM_RINTLINK

 /* Field NUM_CORE_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_core_stalls() hal_get_register_field32(NUM_CORE_STALLS,NUM_CORE_STALLS)
 /* Workings */
#define TYPE_OF_NUM_CORE_STALLS NUM_CORE_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_CORE_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_CORE_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_CORE_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_CORE_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_CORE_STALLS NUM_CORE_STALLS

 /* Field NUM_INSTRS_LSB */
 /* Accessor macros */
#define hal_get_num_instrs() hal_get_register_field32(NUM_INSTRS,NUM_INSTRS)
 /* Workings */
#define TYPE_OF_NUM_INSTRS NUM_INSTRS
#define FIELDS_MASKS_SHIFTED_NUM_INSTRS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTRS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_INSTRS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTRS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_INSTRS NUM_INSTRS

 /* Field NUM_INSTR_EXPAND_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_instr_expand_stalls() hal_get_register_field32(NUM_INSTR_EXPAND_STALLS,NUM_INSTR_EXPAND_STALLS)
 /* Workings */
#define TYPE_OF_NUM_INSTR_EXPAND_STALLS NUM_INSTR_EXPAND_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_INSTR_EXPAND_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTR_EXPAND_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_INSTR_EXPAND_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTR_EXPAND_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_INSTR_EXPAND_STALLS NUM_INSTR_EXPAND_STALLS

 /* Field NUM_MEM_ACCESS_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_mem_access_stalls() hal_get_register_field32(NUM_MEM_ACCESS_STALLS,NUM_MEM_ACCESS_STALLS)
 /* Workings */
#define TYPE_OF_NUM_MEM_ACCESS_STALLS NUM_MEM_ACCESS_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_MEM_ACCESS_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_MEM_ACCESS_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_MEM_ACCESS_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_MEM_ACCESS_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_MEM_ACCESS_STALLS NUM_MEM_ACCESS_STALLS

 /* Field NUM_RUN_CLKS_LSB */
 /* Accessor macros */
#define hal_get_num_run_clks() hal_get_register_field32(NUM_RUN_CLKS,NUM_RUN_CLKS)
 /* Workings */
#define TYPE_OF_NUM_RUN_CLKS NUM_RUN_CLKS
#define FIELDS_MASKS_SHIFTED_NUM_RUN_CLKS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_RUN_CLKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_RUN_CLKS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_RUN_CLKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_RUN_CLKS NUM_RUN_CLKS

 /* Field PC_STATUS_LSB */
 /* Accessor macros */
#define hal_get_pc_status() hal_get_register_field32(PC_STATUS,PC_STATUS)
 /* Workings */
#define TYPE_OF_PC_STATUS PC_STATUS
#define FIELDS_MASKS_SHIFTED_PC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(PC_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(PC_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PC_STATUS PC_STATUS

 /* Field STACK_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_stack_end_addr() hal_get_register_field32(STACK_END_ADDR,STACK_END_ADDR)
#define hal_set_stack_end_addr(x) hal_set_register_field(STACK_END_ADDR,STACK_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_STACK_END_ADDR STACK_END_ADDR
#define FIELDS_MASKS_SHIFTED_STACK_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_END_ADDR STACK_END_ADDR

 /* Field STACK_OVERFLOW_PC_LSB */
 /* Accessor macros */
#define hal_get_stack_overflow_pc() hal_get_register_field32(STACK_OVERFLOW_PC,STACK_OVERFLOW_PC)
 /* Workings */
#define TYPE_OF_STACK_OVERFLOW_PC STACK_OVERFLOW_PC
#define FIELDS_MASKS_SHIFTED_STACK_OVERFLOW_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_OVERFLOW_PC, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_OVERFLOW_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_OVERFLOW_PC, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_OVERFLOW_PC STACK_OVERFLOW_PC

 /* Field STACK_POINTER_LSB */
 /* Accessor macros */
#define hal_get_stack_pointer() hal_get_register_field32(STACK_POINTER,STACK_POINTER)
#define hal_set_stack_pointer(x) hal_set_register_field(STACK_POINTER,STACK_POINTER,(x))
 /* Workings */
#define TYPE_OF_STACK_POINTER STACK_POINTER
#define FIELDS_MASKS_SHIFTED_STACK_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_POINTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_POINTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_POINTER STACK_POINTER

 /* Field STACK_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_stack_start_addr() hal_get_register_field32(STACK_START_ADDR,STACK_START_ADDR)
#define hal_set_stack_start_addr(x) hal_set_register_field(STACK_START_ADDR,STACK_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_STACK_START_ADDR STACK_START_ADDR
#define FIELDS_MASKS_SHIFTED_STACK_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_START_ADDR STACK_START_ADDR

 /* Field TEST_REG_0_LSB */
 /* Accessor macros */
#define hal_get_test_reg_0() hal_get_register_field32(TEST_REG_0,TEST_REG_0)
#define hal_set_test_reg_0(x) hal_set_register_field(TEST_REG_0,TEST_REG_0,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_0 TEST_REG_0
#define FIELDS_MASKS_SHIFTED_TEST_REG_0(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_0(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_0 TEST_REG_0

 /* Field TEST_REG_1_LSB */
 /* Accessor macros */
#define hal_get_test_reg_1() hal_get_register_field32(TEST_REG_1,TEST_REG_1)
#define hal_set_test_reg_1(x) hal_set_register_field(TEST_REG_1,TEST_REG_1,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_1 TEST_REG_1
#define FIELDS_MASKS_SHIFTED_TEST_REG_1(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_1(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_1 TEST_REG_1

 /* Field TEST_REG_2_LSB */
 /* Accessor macros */
#define hal_get_test_reg_2() hal_get_register_field32(TEST_REG_2,TEST_REG_2)
#define hal_set_test_reg_2(x) hal_set_register_field(TEST_REG_2,TEST_REG_2,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_2 TEST_REG_2
#define FIELDS_MASKS_SHIFTED_TEST_REG_2(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_2(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_2 TEST_REG_2

 /* Field TEST_REG_3_LSB */
 /* Accessor macros */
#define hal_get_test_reg_3() hal_get_register_field32(TEST_REG_3,TEST_REG_3)
#define hal_set_test_reg_3(x) hal_set_register_field(TEST_REG_3,TEST_REG_3,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_3 TEST_REG_3
#define FIELDS_MASKS_SHIFTED_TEST_REG_3(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_3(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_3 TEST_REG_3

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ARITHMETIC_MODE_ARITHMETIC_MODE
#define CHECK_FIELD_TYPE_ARITHMETIC_MODE_END
#define CHECK_FIELD_TYPE_BITREVERSE_ADDR_BITREVERSE_ADDR
#define CHECK_FIELD_TYPE_BITREVERSE_ADDR_END
#define CHECK_FIELD_TYPE_BITREVERSE_DATA_BITREVERSE_DATA
#define CHECK_FIELD_TYPE_BITREVERSE_DATA_END
#define CHECK_FIELD_TYPE_BITREVERSE_DATA16_BITREVERSE_DATA16
#define CHECK_FIELD_TYPE_BITREVERSE_DATA16_END
#define CHECK_FIELD_TYPE_BITREVERSE_VAL_BITREVERSE_VAL
#define CHECK_FIELD_TYPE_BITREVERSE_VAL_END
#define CHECK_FIELD_TYPE_DBG_COUNTERS_EN_DBG_COUNTERS_EN
#define CHECK_FIELD_TYPE_DBG_COUNTERS_EN_END
#define CHECK_FIELD_TYPE_FRAME_POINTER_FRAME_POINTER
#define CHECK_FIELD_TYPE_FRAME_POINTER_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_END_MM_DOLOOP_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_END_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_START_MM_DOLOOP_START
#define CHECK_FIELD_TYPE_MM_DOLOOP_START_END
#define CHECK_FIELD_TYPE_MM_QUOTIENT_MM_QUOTIENT
#define CHECK_FIELD_TYPE_MM_QUOTIENT_END
#define CHECK_FIELD_TYPE_MM_REM_MM_REM
#define CHECK_FIELD_TYPE_MM_REM_END
#define CHECK_FIELD_TYPE_MM_RINTLINK_MM_RINTLINK
#define CHECK_FIELD_TYPE_MM_RINTLINK_END
#define CHECK_FIELD_TYPE_NUM_CORE_STALLS_NUM_CORE_STALLS
#define CHECK_FIELD_TYPE_NUM_CORE_STALLS_END
#define CHECK_FIELD_TYPE_NUM_INSTRS_NUM_INSTRS
#define CHECK_FIELD_TYPE_NUM_INSTRS_END
#define CHECK_FIELD_TYPE_NUM_INSTR_EXPAND_STALLS_NUM_INSTR_EXPAND_STALLS
#define CHECK_FIELD_TYPE_NUM_INSTR_EXPAND_STALLS_END
#define CHECK_FIELD_TYPE_NUM_MEM_ACCESS_STALLS_NUM_MEM_ACCESS_STALLS
#define CHECK_FIELD_TYPE_NUM_MEM_ACCESS_STALLS_END
#define CHECK_FIELD_TYPE_NUM_RUN_CLKS_NUM_RUN_CLKS
#define CHECK_FIELD_TYPE_NUM_RUN_CLKS_END
#define CHECK_FIELD_TYPE_PC_STATUS_PC_STATUS
#define CHECK_FIELD_TYPE_PC_STATUS_END
#define CHECK_FIELD_TYPE_STACK_END_ADDR_STACK_END_ADDR
#define CHECK_FIELD_TYPE_STACK_END_ADDR_END
#define CHECK_FIELD_TYPE_STACK_OVERFLOW_PC_STACK_OVERFLOW_PC
#define CHECK_FIELD_TYPE_STACK_OVERFLOW_PC_END
#define CHECK_FIELD_TYPE_STACK_POINTER_STACK_POINTER
#define CHECK_FIELD_TYPE_STACK_POINTER_END
#define CHECK_FIELD_TYPE_STACK_START_ADDR_STACK_START_ADDR
#define CHECK_FIELD_TYPE_STACK_START_ADDR_END
#define CHECK_FIELD_TYPE_TEST_REG_0_TEST_REG_0
#define CHECK_FIELD_TYPE_TEST_REG_0_END
#define CHECK_FIELD_TYPE_TEST_REG_1_TEST_REG_1
#define CHECK_FIELD_TYPE_TEST_REG_1_END
#define CHECK_FIELD_TYPE_TEST_REG_2_TEST_REG_2
#define CHECK_FIELD_TYPE_TEST_REG_2_END
#define CHECK_FIELD_TYPE_TEST_REG_3_TEST_REG_3
#define CHECK_FIELD_TYPE_TEST_REG_3_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_ARITHMETIC_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ARITHMETIC_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define ARITHMETIC_MODE_REG_BITS (5u)
#define hal_set_reg_arithmetic_mode(x) hal_set_register(ARITHMETIC_MODE, x, 1)
#define hal_get_reg_arithmetic_mode() hal_get_register(ARITHMETIC_MODE, 1)
#define BITREVERSE_ADDR_REG_BITS (32u)
#define hal_get_reg_bitreverse_addr() hal_get_register(BITREVERSE_ADDR, 1)
#define BITREVERSE_DATA_REG_BITS (32u)
#define hal_get_reg_bitreverse_data() hal_get_register(BITREVERSE_DATA, 1)
#define BITREVERSE_DATA16_REG_BITS (32u)
#define hal_get_reg_bitreverse_data16() hal_get_register(BITREVERSE_DATA16, 1)
#define BITREVERSE_VAL_REG_BITS (32u)
#define hal_set_reg_bitreverse_val(x) hal_set_register(BITREVERSE_VAL, x, 1)
#define hal_get_reg_bitreverse_val() hal_get_register(BITREVERSE_VAL, 1)
#define DBG_COUNTERS_EN_REG_BITS (1u)
#define hal_set_reg_dbg_counters_en(x) hal_set_register(DBG_COUNTERS_EN, x, 1)
#define hal_get_reg_dbg_counters_en() hal_get_register(DBG_COUNTERS_EN, 1)
#define FRAME_POINTER_REG_BITS (32u)
#define hal_set_reg_frame_pointer(x) hal_set_register(FRAME_POINTER, x, 1)
#define hal_get_reg_frame_pointer() hal_get_register(FRAME_POINTER, 1)
#define MM_DOLOOP_END_REG_BITS (32u)
#define hal_set_reg_mm_doloop_end(x) hal_set_register(MM_DOLOOP_END, x, 1)
#define hal_get_reg_mm_doloop_end() hal_get_register(MM_DOLOOP_END, 1)
#define MM_DOLOOP_START_REG_BITS (32u)
#define hal_set_reg_mm_doloop_start(x) hal_set_register(MM_DOLOOP_START, x, 1)
#define hal_get_reg_mm_doloop_start() hal_get_register(MM_DOLOOP_START, 1)
#define MM_QUOTIENT_REG_BITS (32u)
#define hal_set_reg_mm_quotient(x) hal_set_register(MM_QUOTIENT, x, 1)
#define hal_get_reg_mm_quotient() hal_get_register(MM_QUOTIENT, 1)
#define MM_REM_REG_BITS (32u)
#define hal_set_reg_mm_rem(x) hal_set_register(MM_REM, x, 1)
#define hal_get_reg_mm_rem() hal_get_register(MM_REM, 1)
#define MM_RINTLINK_REG_BITS (32u)
#define hal_set_reg_mm_rintlink(x) hal_set_register(MM_RINTLINK, x, 1)
#define hal_get_reg_mm_rintlink() hal_get_register(MM_RINTLINK, 1)
#define NUM_CORE_STALLS_REG_BITS (32u)
#define hal_get_reg_num_core_stalls() hal_get_register(NUM_CORE_STALLS, 1)
#define NUM_INSTRS_REG_BITS (32u)
#define hal_get_reg_num_instrs() hal_get_register(NUM_INSTRS, 1)
#define NUM_INSTR_EXPAND_STALLS_REG_BITS (32u)
#define hal_get_reg_num_instr_expand_stalls() hal_get_register(NUM_INSTR_EXPAND_STALLS, 1)
#define NUM_MEM_ACCESS_STALLS_REG_BITS (32u)
#define hal_get_reg_num_mem_access_stalls() hal_get_register(NUM_MEM_ACCESS_STALLS, 1)
#define NUM_RUN_CLKS_REG_BITS (32u)
#define hal_get_reg_num_run_clks() hal_get_register(NUM_RUN_CLKS, 1)
#define PC_STATUS_REG_BITS (32u)
#define hal_get_reg_pc_status() hal_get_register(PC_STATUS, 1)
#define STACK_END_ADDR_REG_BITS (32u)
#define hal_set_reg_stack_end_addr(x) hal_set_register(STACK_END_ADDR, x, 1)
#define hal_get_reg_stack_end_addr() hal_get_register(STACK_END_ADDR, 1)
#define STACK_OVERFLOW_PC_REG_BITS (32u)
#define hal_get_reg_stack_overflow_pc() hal_get_register(STACK_OVERFLOW_PC, 1)
#define STACK_POINTER_REG_BITS (32u)
#define hal_set_reg_stack_pointer(x) hal_set_register(STACK_POINTER, x, 1)
#define hal_get_reg_stack_pointer() hal_get_register(STACK_POINTER, 1)
#define STACK_START_ADDR_REG_BITS (32u)
#define hal_set_reg_stack_start_addr(x) hal_set_register(STACK_START_ADDR, x, 1)
#define hal_get_reg_stack_start_addr() hal_get_register(STACK_START_ADDR, 1)
#define TEST_REG_0_REG_BITS (32u)
#define hal_set_reg_test_reg_0(x) hal_set_register(TEST_REG_0, x, 1)
#define hal_get_reg_test_reg_0() hal_get_register(TEST_REG_0, 1)
#define TEST_REG_1_REG_BITS (32u)
#define hal_set_reg_test_reg_1(x) hal_set_register(TEST_REG_1, x, 1)
#define hal_get_reg_test_reg_1() hal_get_register(TEST_REG_1, 1)
#define TEST_REG_2_REG_BITS (32u)
#define hal_set_reg_test_reg_2(x) hal_set_register(TEST_REG_2, x, 1)
#define hal_get_reg_test_reg_2() hal_get_register(TEST_REG_2, 1)
#define TEST_REG_3_REG_BITS (32u)
#define hal_set_reg_test_reg_3(x) hal_set_register(TEST_REG_3, x, 1)
#define hal_get_reg_test_reg_3() hal_get_register(TEST_REG_3, 1)

 /* Workings */
#define SETTER_FOR_ARITHMETIC_MODE hal_set_reg_arithmetic_mode
#define GETTER_FOR_ARITHMETIC_MODE hal_get_reg_arithmetic_mode
#define GETTER_FOR_BITREVERSE_ADDR hal_get_reg_bitreverse_addr
#define GETTER_FOR_BITREVERSE_DATA hal_get_reg_bitreverse_data
#define GETTER_FOR_BITREVERSE_DATA16 hal_get_reg_bitreverse_data16
#define SETTER_FOR_BITREVERSE_VAL hal_set_reg_bitreverse_val
#define GETTER_FOR_BITREVERSE_VAL hal_get_reg_bitreverse_val
#define SETTER_FOR_DBG_COUNTERS_EN hal_set_reg_dbg_counters_en
#define GETTER_FOR_DBG_COUNTERS_EN hal_get_reg_dbg_counters_en
#define SETTER_FOR_FRAME_POINTER hal_set_reg_frame_pointer
#define GETTER_FOR_FRAME_POINTER hal_get_reg_frame_pointer
#define SETTER_FOR_MM_DOLOOP_END hal_set_reg_mm_doloop_end
#define GETTER_FOR_MM_DOLOOP_END hal_get_reg_mm_doloop_end
#define SETTER_FOR_MM_DOLOOP_START hal_set_reg_mm_doloop_start
#define GETTER_FOR_MM_DOLOOP_START hal_get_reg_mm_doloop_start
#define SETTER_FOR_MM_QUOTIENT hal_set_reg_mm_quotient
#define GETTER_FOR_MM_QUOTIENT hal_get_reg_mm_quotient
#define SETTER_FOR_MM_REM hal_set_reg_mm_rem
#define GETTER_FOR_MM_REM hal_get_reg_mm_rem
#define SETTER_FOR_MM_RINTLINK hal_set_reg_mm_rintlink
#define GETTER_FOR_MM_RINTLINK hal_get_reg_mm_rintlink
#define GETTER_FOR_NUM_CORE_STALLS hal_get_reg_num_core_stalls
#define GETTER_FOR_NUM_INSTRS hal_get_reg_num_instrs
#define GETTER_FOR_NUM_INSTR_EXPAND_STALLS hal_get_reg_num_instr_expand_stalls
#define GETTER_FOR_NUM_MEM_ACCESS_STALLS hal_get_reg_num_mem_access_stalls
#define GETTER_FOR_NUM_RUN_CLKS hal_get_reg_num_run_clks
#define GETTER_FOR_PC_STATUS hal_get_reg_pc_status
#define SETTER_FOR_STACK_END_ADDR hal_set_reg_stack_end_addr
#define GETTER_FOR_STACK_END_ADDR hal_get_reg_stack_end_addr
#define GETTER_FOR_STACK_OVERFLOW_PC hal_get_reg_stack_overflow_pc
#define SETTER_FOR_STACK_POINTER hal_set_reg_stack_pointer
#define GETTER_FOR_STACK_POINTER hal_get_reg_stack_pointer
#define SETTER_FOR_STACK_START_ADDR hal_set_reg_stack_start_addr
#define GETTER_FOR_STACK_START_ADDR hal_get_reg_stack_start_addr
#define SETTER_FOR_TEST_REG_0 hal_set_reg_test_reg_0
#define GETTER_FOR_TEST_REG_0 hal_get_reg_test_reg_0
#define SETTER_FOR_TEST_REG_1 hal_set_reg_test_reg_1
#define GETTER_FOR_TEST_REG_1 hal_get_reg_test_reg_1
#define SETTER_FOR_TEST_REG_2 hal_set_reg_test_reg_2
#define GETTER_FOR_TEST_REG_2 hal_get_reg_test_reg_2
#define SETTER_FOR_TEST_REG_3 hal_set_reg_test_reg_3
#define GETTER_FOR_TEST_REG_3 hal_get_reg_test_reg_3

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_CORE) */





#ifndef __HAL_MACROS_H__MODULE_K32_MONITOR
#define __HAL_MACROS_H__MODULE_K32_MONITOR

/* -- Kalimba 32-bit Monitor Control registers. -- */

 /* Field DM1_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,DM1_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_dm1_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,DM1_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field DM1_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_end_addr() hal_get_register_field32(DM1_PROG_EXCEPTION_REGION_END_ADDR,DM1_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_dm1_prog_exception_region_end_addr(x) hal_set_register_field(DM1_PROG_EXCEPTION_REGION_END_ADDR,DM1_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_END_ADDR DM1_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR DM1_PROG_EXCEPTION_REGION_END_ADDR

 /* Field DM1_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_start_addr() hal_get_register_field32(DM1_PROG_EXCEPTION_REGION_START_ADDR,DM1_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_dm1_prog_exception_region_start_addr(x) hal_set_register_field(DM1_PROG_EXCEPTION_REGION_START_ADDR,DM1_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_START_ADDR DM1_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR DM1_PROG_EXCEPTION_REGION_START_ADDR

 /* Field DM2_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,DM2_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_dm2_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,DM2_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field DM2_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_end_addr() hal_get_register_field32(DM2_PROG_EXCEPTION_REGION_END_ADDR,DM2_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_dm2_prog_exception_region_end_addr(x) hal_set_register_field(DM2_PROG_EXCEPTION_REGION_END_ADDR,DM2_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_END_ADDR DM2_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR DM2_PROG_EXCEPTION_REGION_END_ADDR

 /* Field DM2_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_start_addr() hal_get_register_field32(DM2_PROG_EXCEPTION_REGION_START_ADDR,DM2_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_dm2_prog_exception_region_start_addr(x) hal_set_register_field(DM2_PROG_EXCEPTION_REGION_START_ADDR,DM2_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_START_ADDR DM2_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR DM2_PROG_EXCEPTION_REGION_START_ADDR

 /* Field EXCEPTION_EN_BREAK */
 /* Accessor macros */
#define hal_get_exception_en_break() hal_get_register_field8(EXCEPTION_EN,EXCEPTION_EN_BREAK)
#define hal_set_exception_en_break(x) hal_set_register_field(EXCEPTION_EN,EXCEPTION_EN_BREAK,(x))
 /* Workings */
#define TYPE_OF_EXCEPTION_EN_BREAK EXCEPTION_EN
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN_BREAK(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN_BREAK(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_EN_BREAK EXCEPTION_EN

 /* Field EXCEPTION_EN_IRQ */
 /* Accessor macros */
#define hal_get_exception_en_irq() hal_get_register_field8(EXCEPTION_EN,EXCEPTION_EN_IRQ)
#define hal_set_exception_en_irq(x) hal_set_register_field(EXCEPTION_EN,EXCEPTION_EN_IRQ,(x))
 /* Workings */
#define TYPE_OF_EXCEPTION_EN_IRQ EXCEPTION_EN
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN_IRQ(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN_IRQ(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_EN_IRQ EXCEPTION_EN

 /* Field EXCEPTION_PC_LSB */
 /* Accessor macros */
#define hal_get_exception_pc() hal_get_register_field32(EXCEPTION_PC,EXCEPTION_PC)
 /* Workings */
#define TYPE_OF_EXCEPTION_PC EXCEPTION_PC
#define FIELDS_MASKS_SHIFTED_EXCEPTION_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_PC, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_PC, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_PC EXCEPTION_PC

 /* Field PM_PROG_EXCEPTION_OOB_ENABLE */
 /* Accessor macros */
#define hal_get_pm_prog_exception_oob_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_OOB_ENABLE)
#define hal_set_pm_prog_exception_oob_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_OOB_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_OOB_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_OOB_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_OOB_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_OOB_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field PM_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_pm_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field PM_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_end_addr() hal_get_register_field32(PM_PROG_EXCEPTION_REGION_END_ADDR,PM_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_pm_prog_exception_region_end_addr(x) hal_set_register_field(PM_PROG_EXCEPTION_REGION_END_ADDR,PM_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_END_ADDR PM_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR PM_PROG_EXCEPTION_REGION_END_ADDR

 /* Field PM_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_start_addr() hal_get_register_field32(PM_PROG_EXCEPTION_REGION_START_ADDR,PM_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_pm_prog_exception_region_start_addr(x) hal_set_register_field(PM_PROG_EXCEPTION_REGION_START_ADDR,PM_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_START_ADDR PM_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR PM_PROG_EXCEPTION_REGION_START_ADDR

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_END_ADDR_DM1_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_START_ADDR_DM1_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_END_ADDR_DM2_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_START_ADDR_DM2_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_EXCEPTION_EN_EXCEPTION_EN
#define CHECK_FIELD_TYPE_EXCEPTION_EN_END
#define CHECK_FIELD_TYPE_EXCEPTION_PC_EXCEPTION_PC
#define CHECK_FIELD_TYPE_EXCEPTION_PC_END
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_END_ADDR_PM_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_START_ADDR_PM_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_PROG_EXCEPTION_REGION_ENABLE_PROG_EXCEPTION_REGION_ENABLE
#define CHECK_FIELD_TYPE_PROG_EXCEPTION_REGION_ENABLE_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define DM1_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_dm1_prog_exception_region_end_addr(x) hal_set_register(DM1_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_dm1_prog_exception_region_end_addr() hal_get_register(DM1_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define DM1_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_dm1_prog_exception_region_start_addr(x) hal_set_register(DM1_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_dm1_prog_exception_region_start_addr() hal_get_register(DM1_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define DM2_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_dm2_prog_exception_region_end_addr(x) hal_set_register(DM2_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_dm2_prog_exception_region_end_addr() hal_get_register(DM2_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define DM2_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_dm2_prog_exception_region_start_addr(x) hal_set_register(DM2_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_dm2_prog_exception_region_start_addr() hal_get_register(DM2_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define EXCEPTION_EN_REG_BITS (2u)
#define hal_set_reg_exception_en(x) hal_set_register(EXCEPTION_EN, x, 1)
#define hal_get_reg_exception_en() hal_get_register(EXCEPTION_EN, 1)
#define EXCEPTION_PC_REG_BITS (32u)
#define hal_get_reg_exception_pc() hal_get_register(EXCEPTION_PC, 1)
#define EXCEPTION_TYPE_REG_BITS (4u)
#define hal_get_reg_exception_type() hal_get_register(EXCEPTION_TYPE, 1)
#define PM_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_pm_prog_exception_region_end_addr(x) hal_set_register(PM_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_pm_prog_exception_region_end_addr() hal_get_register(PM_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define PM_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_pm_prog_exception_region_start_addr(x) hal_set_register(PM_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_pm_prog_exception_region_start_addr() hal_get_register(PM_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define PROG_EXCEPTION_REGION_ENABLE_REG_BITS (4u)
#define hal_set_reg_prog_exception_region_enable(x) hal_set_register(PROG_EXCEPTION_REGION_ENABLE, x, 1)
#define hal_get_reg_prog_exception_region_enable() hal_get_register(PROG_EXCEPTION_REGION_ENABLE, 1)

 /* Workings */
#define SETTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_dm1_prog_exception_region_end_addr
#define GETTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_dm1_prog_exception_region_end_addr
#define SETTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_dm1_prog_exception_region_start_addr
#define GETTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_dm1_prog_exception_region_start_addr
#define SETTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_dm2_prog_exception_region_end_addr
#define GETTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_dm2_prog_exception_region_end_addr
#define SETTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_dm2_prog_exception_region_start_addr
#define GETTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_dm2_prog_exception_region_start_addr
#define SETTER_FOR_EXCEPTION_EN hal_set_reg_exception_en
#define GETTER_FOR_EXCEPTION_EN hal_get_reg_exception_en
#define GETTER_FOR_EXCEPTION_PC hal_get_reg_exception_pc
#define GETTER_FOR_EXCEPTION_TYPE hal_get_reg_exception_type
#define SETTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_pm_prog_exception_region_end_addr
#define GETTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_pm_prog_exception_region_end_addr
#define SETTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_pm_prog_exception_region_start_addr
#define GETTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_pm_prog_exception_region_start_addr
#define SETTER_FOR_PROG_EXCEPTION_REGION_ENABLE hal_set_reg_prog_exception_region_enable
#define GETTER_FOR_PROG_EXCEPTION_REGION_ENABLE hal_get_reg_prog_exception_region_enable

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MONITOR) */



#if defined(IO_DEFS_MODULE_AOV) 

#ifndef __HAL_MACROS_H__MODULE_AOV
#define __HAL_MACROS_H__MODULE_AOV

/* -- AoV registers -- */

 /* Field AOV_CTL_CLR_VAD_FIRED */
 /* Accessor macros */
#define hal_get_aov_ctl_clr_vad_fired() hal_get_register_field8(AOV_CTL,AOV_CTL_CLR_VAD_FIRED)
#define hal_set_aov_ctl_clr_vad_fired(x) hal_set_register_field(AOV_CTL,AOV_CTL_CLR_VAD_FIRED,(x))
 /* Workings */
#define TYPE_OF_AOV_CTL_CLR_VAD_FIRED AOV_CTL
#define FIELDS_MASKS_SHIFTED_AOV_CTL_CLR_VAD_FIRED(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL_CLR_VAD_FIRED(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_CTL_CLR_VAD_FIRED AOV_CTL

 /* Field AOV_CTL_DRAIN_BUFFER_ENABLE */
 /* Accessor macros */
#define hal_get_aov_ctl_drain_buffer_enable() hal_get_register_field8(AOV_CTL,AOV_CTL_DRAIN_BUFFER_ENABLE)
#define hal_set_aov_ctl_drain_buffer_enable(x) hal_set_register_field(AOV_CTL,AOV_CTL_DRAIN_BUFFER_ENABLE,(x))
 /* Workings */
#define TYPE_OF_AOV_CTL_DRAIN_BUFFER_ENABLE AOV_CTL
#define FIELDS_MASKS_SHIFTED_AOV_CTL_DRAIN_BUFFER_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL_DRAIN_BUFFER_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_CTL_DRAIN_BUFFER_ENABLE AOV_CTL

 /* Field AOV_CTL_ENABLE */
 /* Accessor macros */
#define hal_get_aov_ctl_enable() hal_get_register_field8(AOV_CTL,AOV_CTL_ENABLE)
#define hal_set_aov_ctl_enable(x) hal_set_register_field(AOV_CTL,AOV_CTL_ENABLE,(x))
 /* Workings */
#define TYPE_OF_AOV_CTL_ENABLE AOV_CTL
#define FIELDS_MASKS_SHIFTED_AOV_CTL_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_CTL_ENABLE AOV_CTL

 /* Field AOV_CTL_FREEZE_ON_ERROR */
 /* Accessor macros */
#define hal_get_aov_ctl_freeze_on_error() hal_get_register_field8(AOV_CTL,AOV_CTL_FREEZE_ON_ERROR)
#define hal_set_aov_ctl_freeze_on_error(x) hal_set_register_field(AOV_CTL,AOV_CTL_FREEZE_ON_ERROR,(x))
 /* Workings */
#define TYPE_OF_AOV_CTL_FREEZE_ON_ERROR AOV_CTL
#define FIELDS_MASKS_SHIFTED_AOV_CTL_FREEZE_ON_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL_FREEZE_ON_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_CTL_FREEZE_ON_ERROR AOV_CTL

 /* Field AOV_CTL_KCODEC_SEL_LSB */
 /* Accessor macros */
#define hal_get_aov_ctl_kcodec_sel() hal_get_register_field8(AOV_CTL,AOV_CTL_KCODEC_SEL)
#define hal_set_aov_ctl_kcodec_sel(x) hal_set_register_field(AOV_CTL,AOV_CTL_KCODEC_SEL,(x))
 /* Workings */
#define TYPE_OF_AOV_CTL_KCODEC_SEL AOV_CTL
#define FIELDS_MASKS_SHIFTED_AOV_CTL_KCODEC_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL_KCODEC_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_CTL_KCODEC_SEL AOV_CTL

 /* Field AOV_CTL_PAUSE_RAM_FILL */
 /* Accessor macros */
#define hal_get_aov_ctl_pause_ram_fill() hal_get_register_field8(AOV_CTL,AOV_CTL_PAUSE_RAM_FILL)
#define hal_set_aov_ctl_pause_ram_fill(x) hal_set_register_field(AOV_CTL,AOV_CTL_PAUSE_RAM_FILL,(x))
 /* Workings */
#define TYPE_OF_AOV_CTL_PAUSE_RAM_FILL AOV_CTL
#define FIELDS_MASKS_SHIFTED_AOV_CTL_PAUSE_RAM_FILL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL_PAUSE_RAM_FILL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_CTL_PAUSE_RAM_FILL AOV_CTL

 /* Field AOV_CTL_VAD_ENABLE */
 /* Accessor macros */
#define hal_get_aov_ctl_vad_enable() hal_get_register_field8(AOV_CTL,AOV_CTL_VAD_ENABLE)
#define hal_set_aov_ctl_vad_enable(x) hal_set_register_field(AOV_CTL,AOV_CTL_VAD_ENABLE,(x))
 /* Workings */
#define TYPE_OF_AOV_CTL_VAD_ENABLE AOV_CTL
#define FIELDS_MASKS_SHIFTED_AOV_CTL_VAD_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL_VAD_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_CTL_VAD_ENABLE AOV_CTL

 /* Field AOV_DEBUG_SELECT_LSB */
 /* Accessor macros */
#define hal_get_aov_debug_select() hal_get_register_field8(AOV_DEBUG_SELECT,AOV_DEBUG_SELECT)
#define hal_set_aov_debug_select(x) hal_set_register_field(AOV_DEBUG_SELECT,AOV_DEBUG_SELECT,(x))
 /* Workings */
#define TYPE_OF_AOV_DEBUG_SELECT AOV_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_AOV_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_DEBUG_SELECT AOV_DEBUG_SELECT

 /* Field AOV_EVENT_RAM0_EMPTY */
 /* Accessor macros */
#define hal_get_aov_event_ram0_empty_event_clear() hal_get_register_field8(AOV_EVENT_CLEAR,AOV_EVENT_RAM0_EMPTY)
#define hal_set_aov_event_ram0_empty_event_clear(x) hal_set_register_field(AOV_EVENT_CLEAR,AOV_EVENT_RAM0_EMPTY,(x))
#define hal_get_aov_event_ram0_empty_event_mask() hal_get_register_field8(AOV_EVENT_MASK,AOV_EVENT_RAM0_EMPTY)
#define hal_set_aov_event_ram0_empty_event_mask(x) hal_set_register_field(AOV_EVENT_MASK,AOV_EVENT_RAM0_EMPTY,(x))
#define hal_get_aov_event_ram0_empty_event_status() hal_get_register_field8(AOV_EVENT_STATUS,AOV_EVENT_RAM0_EMPTY)
#define hal_get_aov_event_ram0_empty_wakeup_mask() hal_get_register_field8(AOV_WAKEUP_MASK,AOV_EVENT_RAM0_EMPTY)
#define hal_set_aov_event_ram0_empty_wakeup_mask(x) hal_set_register_field(AOV_WAKEUP_MASK,AOV_EVENT_RAM0_EMPTY,(x))
 /* Workings */
#define TYPE_OF_AOV_EVENT_RAM0_EMPTY AOV_EVENTS
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_RAM0_EMPTY(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_RAM0_EMPTY(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_EVENT_RAM0_EMPTY AOV_EVENTS

 /* Field AOV_EVENT_RAM0_FULL */
 /* Accessor macros */
#define hal_get_aov_event_ram0_full_event_clear() hal_get_register_field8(AOV_EVENT_CLEAR,AOV_EVENT_RAM0_FULL)
#define hal_set_aov_event_ram0_full_event_clear(x) hal_set_register_field(AOV_EVENT_CLEAR,AOV_EVENT_RAM0_FULL,(x))
#define hal_get_aov_event_ram0_full_event_mask() hal_get_register_field8(AOV_EVENT_MASK,AOV_EVENT_RAM0_FULL)
#define hal_set_aov_event_ram0_full_event_mask(x) hal_set_register_field(AOV_EVENT_MASK,AOV_EVENT_RAM0_FULL,(x))
#define hal_get_aov_event_ram0_full_event_status() hal_get_register_field8(AOV_EVENT_STATUS,AOV_EVENT_RAM0_FULL)
#define hal_get_aov_event_ram0_full_wakeup_mask() hal_get_register_field8(AOV_WAKEUP_MASK,AOV_EVENT_RAM0_FULL)
#define hal_set_aov_event_ram0_full_wakeup_mask(x) hal_set_register_field(AOV_WAKEUP_MASK,AOV_EVENT_RAM0_FULL,(x))
 /* Workings */
#define TYPE_OF_AOV_EVENT_RAM0_FULL AOV_EVENTS
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_RAM0_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_RAM0_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_EVENT_RAM0_FULL AOV_EVENTS

 /* Field AOV_EVENT_RAM1_EMPTY */
 /* Accessor macros */
#define hal_get_aov_event_ram1_empty_event_clear() hal_get_register_field8(AOV_EVENT_CLEAR,AOV_EVENT_RAM1_EMPTY)
#define hal_set_aov_event_ram1_empty_event_clear(x) hal_set_register_field(AOV_EVENT_CLEAR,AOV_EVENT_RAM1_EMPTY,(x))
#define hal_get_aov_event_ram1_empty_event_mask() hal_get_register_field8(AOV_EVENT_MASK,AOV_EVENT_RAM1_EMPTY)
#define hal_set_aov_event_ram1_empty_event_mask(x) hal_set_register_field(AOV_EVENT_MASK,AOV_EVENT_RAM1_EMPTY,(x))
#define hal_get_aov_event_ram1_empty_event_status() hal_get_register_field8(AOV_EVENT_STATUS,AOV_EVENT_RAM1_EMPTY)
#define hal_get_aov_event_ram1_empty_wakeup_mask() hal_get_register_field8(AOV_WAKEUP_MASK,AOV_EVENT_RAM1_EMPTY)
#define hal_set_aov_event_ram1_empty_wakeup_mask(x) hal_set_register_field(AOV_WAKEUP_MASK,AOV_EVENT_RAM1_EMPTY,(x))
 /* Workings */
#define TYPE_OF_AOV_EVENT_RAM1_EMPTY AOV_EVENTS
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_RAM1_EMPTY(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_RAM1_EMPTY(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_EVENT_RAM1_EMPTY AOV_EVENTS

 /* Field AOV_EVENT_RAM1_FULL */
 /* Accessor macros */
#define hal_get_aov_event_ram1_full_event_clear() hal_get_register_field8(AOV_EVENT_CLEAR,AOV_EVENT_RAM1_FULL)
#define hal_set_aov_event_ram1_full_event_clear(x) hal_set_register_field(AOV_EVENT_CLEAR,AOV_EVENT_RAM1_FULL,(x))
#define hal_get_aov_event_ram1_full_event_mask() hal_get_register_field8(AOV_EVENT_MASK,AOV_EVENT_RAM1_FULL)
#define hal_set_aov_event_ram1_full_event_mask(x) hal_set_register_field(AOV_EVENT_MASK,AOV_EVENT_RAM1_FULL,(x))
#define hal_get_aov_event_ram1_full_event_status() hal_get_register_field8(AOV_EVENT_STATUS,AOV_EVENT_RAM1_FULL)
#define hal_get_aov_event_ram1_full_wakeup_mask() hal_get_register_field8(AOV_WAKEUP_MASK,AOV_EVENT_RAM1_FULL)
#define hal_set_aov_event_ram1_full_wakeup_mask(x) hal_set_register_field(AOV_WAKEUP_MASK,AOV_EVENT_RAM1_FULL,(x))
 /* Workings */
#define TYPE_OF_AOV_EVENT_RAM1_FULL AOV_EVENTS
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_RAM1_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_RAM1_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_EVENT_RAM1_FULL AOV_EVENTS

 /* Field AOV_EVENT_RAM_OVERRUN */
 /* Accessor macros */
#define hal_get_aov_event_ram_overrun_event_clear() hal_get_register_field8(AOV_EVENT_CLEAR,AOV_EVENT_RAM_OVERRUN)
#define hal_set_aov_event_ram_overrun_event_clear(x) hal_set_register_field(AOV_EVENT_CLEAR,AOV_EVENT_RAM_OVERRUN,(x))
#define hal_get_aov_event_ram_overrun_event_mask() hal_get_register_field8(AOV_EVENT_MASK,AOV_EVENT_RAM_OVERRUN)
#define hal_set_aov_event_ram_overrun_event_mask(x) hal_set_register_field(AOV_EVENT_MASK,AOV_EVENT_RAM_OVERRUN,(x))
#define hal_get_aov_event_ram_overrun_event_status() hal_get_register_field8(AOV_EVENT_STATUS,AOV_EVENT_RAM_OVERRUN)
#define hal_get_aov_event_ram_overrun_wakeup_mask() hal_get_register_field8(AOV_WAKEUP_MASK,AOV_EVENT_RAM_OVERRUN)
#define hal_set_aov_event_ram_overrun_wakeup_mask(x) hal_set_register_field(AOV_WAKEUP_MASK,AOV_EVENT_RAM_OVERRUN,(x))
 /* Workings */
#define TYPE_OF_AOV_EVENT_RAM_OVERRUN AOV_EVENTS
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_RAM_OVERRUN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_RAM_OVERRUN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_EVENT_RAM_OVERRUN AOV_EVENTS

 /* Field AOV_EVENT_VAD_NEG_EVENT */
 /* Accessor macros */
#define hal_get_aov_event_vad_neg_event_event_clear() hal_get_register_field8(AOV_EVENT_CLEAR,AOV_EVENT_VAD_NEG_EVENT)
#define hal_set_aov_event_vad_neg_event_event_clear(x) hal_set_register_field(AOV_EVENT_CLEAR,AOV_EVENT_VAD_NEG_EVENT,(x))
#define hal_get_aov_event_vad_neg_event_event_mask() hal_get_register_field8(AOV_EVENT_MASK,AOV_EVENT_VAD_NEG_EVENT)
#define hal_set_aov_event_vad_neg_event_event_mask(x) hal_set_register_field(AOV_EVENT_MASK,AOV_EVENT_VAD_NEG_EVENT,(x))
#define hal_get_aov_event_vad_neg_event_event_status() hal_get_register_field8(AOV_EVENT_STATUS,AOV_EVENT_VAD_NEG_EVENT)
#define hal_get_aov_event_vad_neg_event_wakeup_mask() hal_get_register_field8(AOV_WAKEUP_MASK,AOV_EVENT_VAD_NEG_EVENT)
#define hal_set_aov_event_vad_neg_event_wakeup_mask(x) hal_set_register_field(AOV_WAKEUP_MASK,AOV_EVENT_VAD_NEG_EVENT,(x))
 /* Workings */
#define TYPE_OF_AOV_EVENT_VAD_NEG_EVENT AOV_EVENTS
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_VAD_NEG_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_VAD_NEG_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_EVENT_VAD_NEG_EVENT AOV_EVENTS

 /* Field AOV_EVENT_VAD_POS_EVENT */
 /* Accessor macros */
#define hal_get_aov_event_vad_pos_event_event_clear() hal_get_register_field8(AOV_EVENT_CLEAR,AOV_EVENT_VAD_POS_EVENT)
#define hal_set_aov_event_vad_pos_event_event_clear(x) hal_set_register_field(AOV_EVENT_CLEAR,AOV_EVENT_VAD_POS_EVENT,(x))
#define hal_get_aov_event_vad_pos_event_event_mask() hal_get_register_field8(AOV_EVENT_MASK,AOV_EVENT_VAD_POS_EVENT)
#define hal_set_aov_event_vad_pos_event_event_mask(x) hal_set_register_field(AOV_EVENT_MASK,AOV_EVENT_VAD_POS_EVENT,(x))
#define hal_get_aov_event_vad_pos_event_event_status() hal_get_register_field8(AOV_EVENT_STATUS,AOV_EVENT_VAD_POS_EVENT)
#define hal_get_aov_event_vad_pos_event_wakeup_mask() hal_get_register_field8(AOV_WAKEUP_MASK,AOV_EVENT_VAD_POS_EVENT)
#define hal_set_aov_event_vad_pos_event_wakeup_mask(x) hal_set_register_field(AOV_WAKEUP_MASK,AOV_EVENT_VAD_POS_EVENT,(x))
 /* Workings */
#define TYPE_OF_AOV_EVENT_VAD_POS_EVENT AOV_EVENTS
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_VAD_POS_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_VAD_POS_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_EVENT_VAD_POS_EVENT AOV_EVENTS

 /* Field AOV_KEYHOLE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_aov_keyhole_addr() hal_get_register_field16(AOV_KEYHOLE,AOV_KEYHOLE_ADDR)
#define hal_set_aov_keyhole_addr(x) hal_set_register_field(AOV_KEYHOLE,AOV_KEYHOLE_ADDR,(x))
 /* Workings */
#define TYPE_OF_AOV_KEYHOLE_ADDR AOV_KEYHOLE
#define FIELDS_MASKS_SHIFTED_AOV_KEYHOLE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_KEYHOLE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_KEYHOLE_ADDR AOV_KEYHOLE

 /* Field AOV_KEYHOLE_FORCE_RAM_SEL */
 /* Accessor macros */
#define hal_get_aov_keyhole_force_ram_sel() hal_get_register_field8(AOV_KEYHOLE,AOV_KEYHOLE_FORCE_RAM_SEL)
#define hal_set_aov_keyhole_force_ram_sel(x) hal_set_register_field(AOV_KEYHOLE,AOV_KEYHOLE_FORCE_RAM_SEL,(x))
 /* Workings */
#define TYPE_OF_AOV_KEYHOLE_FORCE_RAM_SEL AOV_KEYHOLE
#define FIELDS_MASKS_SHIFTED_AOV_KEYHOLE_FORCE_RAM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_KEYHOLE_FORCE_RAM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_KEYHOLE_FORCE_RAM_SEL AOV_KEYHOLE

 /* Field AOV_KEYHOLE_RAM_SEL */
 /* Accessor macros */
#define hal_get_aov_keyhole_ram_sel() hal_get_register_field8(AOV_KEYHOLE,AOV_KEYHOLE_RAM_SEL)
#define hal_set_aov_keyhole_ram_sel(x) hal_set_register_field(AOV_KEYHOLE,AOV_KEYHOLE_RAM_SEL,(x))
 /* Workings */
#define TYPE_OF_AOV_KEYHOLE_RAM_SEL AOV_KEYHOLE
#define FIELDS_MASKS_SHIFTED_AOV_KEYHOLE_RAM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_KEYHOLE_RAM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_KEYHOLE_RAM_SEL AOV_KEYHOLE

 /* Field AOV_KEYHOLE_READ_DATA_LSB */
 /* Accessor macros */
#define hal_get_aov_keyhole_read_data() hal_get_register_field32(AOV_KEYHOLE_READ_DATA,AOV_KEYHOLE_READ_DATA)
 /* Workings */
#define TYPE_OF_AOV_KEYHOLE_READ_DATA AOV_KEYHOLE_READ_DATA
#define FIELDS_MASKS_SHIFTED_AOV_KEYHOLE_READ_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE_READ_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_KEYHOLE_READ_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE_READ_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_KEYHOLE_READ_DATA AOV_KEYHOLE_READ_DATA

 /* Field AOV_RAM0_EMAW_LSB */
 /* Accessor macros */
#define hal_get_aov_ram0_emaw() hal_get_register_field8(AOV_RAMS_EMA,AOV_RAM0_EMAW)
#define hal_set_aov_ram0_emaw(x) hal_set_register_field(AOV_RAMS_EMA,AOV_RAM0_EMAW,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM0_EMAW AOV_RAMS_EMA
#define FIELDS_MASKS_SHIFTED_AOV_RAM0_EMAW(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM0_EMAW(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM0_EMAW AOV_RAMS_EMA

 /* Field AOV_RAM0_EMA_LSB */
 /* Accessor macros */
#define hal_get_aov_ram0_ema() hal_get_register_field8(AOV_RAMS_EMA,AOV_RAM0_EMA)
#define hal_set_aov_ram0_ema(x) hal_set_register_field(AOV_RAMS_EMA,AOV_RAM0_EMA,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM0_EMA AOV_RAMS_EMA
#define FIELDS_MASKS_SHIFTED_AOV_RAM0_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM0_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM0_EMA AOV_RAMS_EMA

 /* Field AOV_RAM0_RAWL */
 /* Accessor macros */
#define hal_get_aov_ram0_rawl() hal_get_register_field8(AOV_RAMS_RAWL,AOV_RAM0_RAWL)
#define hal_set_aov_ram0_rawl(x) hal_set_register_field(AOV_RAMS_RAWL,AOV_RAM0_RAWL,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM0_RAWL AOV_RAMS_RAWL
#define FIELDS_MASKS_SHIFTED_AOV_RAM0_RAWL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM0_RAWL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM0_RAWL AOV_RAMS_RAWL

 /* Field AOV_RAM0_RAWLM_LSB */
 /* Accessor macros */
#define hal_get_aov_ram0_rawlm() hal_get_register_field8(AOV_RAMS_RAWL,AOV_RAM0_RAWLM)
#define hal_set_aov_ram0_rawlm(x) hal_set_register_field(AOV_RAMS_RAWL,AOV_RAM0_RAWLM,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM0_RAWLM AOV_RAMS_RAWL
#define FIELDS_MASKS_SHIFTED_AOV_RAM0_RAWLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM0_RAWLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM0_RAWLM AOV_RAMS_RAWL

 /* Field AOV_RAM0_SEQ_ACT */
 /* Accessor macros */
#define hal_get_aov_ram0_seq_act() hal_get_register_field8(AOV_SEQUENCER_ACTIVE,AOV_RAM0_SEQ_ACT)
 /* Workings */
#define TYPE_OF_AOV_RAM0_SEQ_ACT AOV_SEQUENCER_ACTIVE
#define FIELDS_MASKS_SHIFTED_AOV_RAM0_SEQ_ACT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_SEQUENCER_ACTIVE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM0_SEQ_ACT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_SEQUENCER_ACTIVE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM0_SEQ_ACT AOV_SEQUENCER_ACTIVE

 /* Field AOV_RAM0_WABL */
 /* Accessor macros */
#define hal_get_aov_ram0_wabl() hal_get_register_field8(AOV_RAMS_WABL,AOV_RAM0_WABL)
#define hal_set_aov_ram0_wabl(x) hal_set_register_field(AOV_RAMS_WABL,AOV_RAM0_WABL,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM0_WABL AOV_RAMS_WABL
#define FIELDS_MASKS_SHIFTED_AOV_RAM0_WABL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM0_WABL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM0_WABL AOV_RAMS_WABL

 /* Field AOV_RAM0_WABLM_LSB */
 /* Accessor macros */
#define hal_get_aov_ram0_wablm() hal_get_register_field8(AOV_RAMS_WABL,AOV_RAM0_WABLM)
#define hal_set_aov_ram0_wablm(x) hal_set_register_field(AOV_RAMS_WABL,AOV_RAM0_WABLM,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM0_WABLM AOV_RAMS_WABL
#define FIELDS_MASKS_SHIFTED_AOV_RAM0_WABLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM0_WABLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM0_WABLM AOV_RAMS_WABL

 /* Field AOV_RAM1_EMAW_LSB */
 /* Accessor macros */
#define hal_get_aov_ram1_emaw() hal_get_register_field8(AOV_RAMS_EMA,AOV_RAM1_EMAW)
#define hal_set_aov_ram1_emaw(x) hal_set_register_field(AOV_RAMS_EMA,AOV_RAM1_EMAW,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM1_EMAW AOV_RAMS_EMA
#define FIELDS_MASKS_SHIFTED_AOV_RAM1_EMAW(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM1_EMAW(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM1_EMAW AOV_RAMS_EMA

 /* Field AOV_RAM1_EMA_LSB */
 /* Accessor macros */
#define hal_get_aov_ram1_ema() hal_get_register_field8(AOV_RAMS_EMA,AOV_RAM1_EMA)
#define hal_set_aov_ram1_ema(x) hal_set_register_field(AOV_RAMS_EMA,AOV_RAM1_EMA,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM1_EMA AOV_RAMS_EMA
#define FIELDS_MASKS_SHIFTED_AOV_RAM1_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM1_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM1_EMA AOV_RAMS_EMA

 /* Field AOV_RAM1_RAWL */
 /* Accessor macros */
#define hal_get_aov_ram1_rawl() hal_get_register_field8(AOV_RAMS_RAWL,AOV_RAM1_RAWL)
#define hal_set_aov_ram1_rawl(x) hal_set_register_field(AOV_RAMS_RAWL,AOV_RAM1_RAWL,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM1_RAWL AOV_RAMS_RAWL
#define FIELDS_MASKS_SHIFTED_AOV_RAM1_RAWL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM1_RAWL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM1_RAWL AOV_RAMS_RAWL

 /* Field AOV_RAM1_RAWLM_LSB */
 /* Accessor macros */
#define hal_get_aov_ram1_rawlm() hal_get_register_field8(AOV_RAMS_RAWL,AOV_RAM1_RAWLM)
#define hal_set_aov_ram1_rawlm(x) hal_set_register_field(AOV_RAMS_RAWL,AOV_RAM1_RAWLM,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM1_RAWLM AOV_RAMS_RAWL
#define FIELDS_MASKS_SHIFTED_AOV_RAM1_RAWLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM1_RAWLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM1_RAWLM AOV_RAMS_RAWL

 /* Field AOV_RAM1_SEQ_ACT */
 /* Accessor macros */
#define hal_get_aov_ram1_seq_act() hal_get_register_field8(AOV_SEQUENCER_ACTIVE,AOV_RAM1_SEQ_ACT)
 /* Workings */
#define TYPE_OF_AOV_RAM1_SEQ_ACT AOV_SEQUENCER_ACTIVE
#define FIELDS_MASKS_SHIFTED_AOV_RAM1_SEQ_ACT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_SEQUENCER_ACTIVE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM1_SEQ_ACT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_SEQUENCER_ACTIVE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM1_SEQ_ACT AOV_SEQUENCER_ACTIVE

 /* Field AOV_RAM1_WABL */
 /* Accessor macros */
#define hal_get_aov_ram1_wabl() hal_get_register_field8(AOV_RAMS_WABL,AOV_RAM1_WABL)
#define hal_set_aov_ram1_wabl(x) hal_set_register_field(AOV_RAMS_WABL,AOV_RAM1_WABL,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM1_WABL AOV_RAMS_WABL
#define FIELDS_MASKS_SHIFTED_AOV_RAM1_WABL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM1_WABL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM1_WABL AOV_RAMS_WABL

 /* Field AOV_RAM1_WABLM_LSB */
 /* Accessor macros */
#define hal_get_aov_ram1_wablm() hal_get_register_field8(AOV_RAMS_WABL,AOV_RAM1_WABLM)
#define hal_set_aov_ram1_wablm(x) hal_set_register_field(AOV_RAMS_WABL,AOV_RAM1_WABLM,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM1_WABLM AOV_RAMS_WABL
#define FIELDS_MASKS_SHIFTED_AOV_RAM1_WABLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM1_WABLM(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM1_WABLM AOV_RAMS_WABL

 /* Field AOV_RAMS_DS_RAM0 */
 /* Accessor macros */
#define hal_get_aov_rams_ds_ram0() hal_get_register_field8(AOV_RAMS_DS_EN,AOV_RAMS_DS_RAM0)
#define hal_set_aov_rams_ds_ram0(x) hal_set_register_field(AOV_RAMS_DS_EN,AOV_RAMS_DS_RAM0,(x))
 /* Workings */
#define TYPE_OF_AOV_RAMS_DS_RAM0 AOV_RAMS_DS_EN
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_DS_RAM0(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_DS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_DS_RAM0(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_DS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAMS_DS_RAM0 AOV_RAMS_DS_EN

 /* Field AOV_RAMS_DS_RAM1 */
 /* Accessor macros */
#define hal_get_aov_rams_ds_ram1() hal_get_register_field8(AOV_RAMS_DS_EN,AOV_RAMS_DS_RAM1)
#define hal_set_aov_rams_ds_ram1(x) hal_set_register_field(AOV_RAMS_DS_EN,AOV_RAMS_DS_RAM1,(x))
 /* Workings */
#define TYPE_OF_AOV_RAMS_DS_RAM1 AOV_RAMS_DS_EN
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_DS_RAM1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_DS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_DS_RAM1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_DS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAMS_DS_RAM1 AOV_RAMS_DS_EN

 /* Field AOV_RAMS_LS_RAM0 */
 /* Accessor macros */
#define hal_get_aov_rams_ls_ram0() hal_get_register_field8(AOV_RAMS_LS_EN,AOV_RAMS_LS_RAM0)
#define hal_set_aov_rams_ls_ram0(x) hal_set_register_field(AOV_RAMS_LS_EN,AOV_RAMS_LS_RAM0,(x))
 /* Workings */
#define TYPE_OF_AOV_RAMS_LS_RAM0 AOV_RAMS_LS_EN
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_LS_RAM0(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_LS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_LS_RAM0(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_LS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAMS_LS_RAM0 AOV_RAMS_LS_EN

 /* Field AOV_RAMS_LS_RAM1 */
 /* Accessor macros */
#define hal_get_aov_rams_ls_ram1() hal_get_register_field8(AOV_RAMS_LS_EN,AOV_RAMS_LS_RAM1)
#define hal_set_aov_rams_ls_ram1(x) hal_set_register_field(AOV_RAMS_LS_EN,AOV_RAMS_LS_RAM1,(x))
 /* Workings */
#define TYPE_OF_AOV_RAMS_LS_RAM1 AOV_RAMS_LS_EN
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_LS_RAM1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_LS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_LS_RAM1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_LS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAMS_LS_RAM1 AOV_RAMS_LS_EN

 /* Field AOV_RAMS_SD_RAM0 */
 /* Accessor macros */
#define hal_get_aov_rams_sd_ram0() hal_get_register_field8(AOV_RAMS_SD_EN,AOV_RAMS_SD_RAM0)
#define hal_set_aov_rams_sd_ram0(x) hal_set_register_field(AOV_RAMS_SD_EN,AOV_RAMS_SD_RAM0,(x))
 /* Workings */
#define TYPE_OF_AOV_RAMS_SD_RAM0 AOV_RAMS_SD_EN
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_SD_RAM0(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_SD_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_SD_RAM0(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_SD_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAMS_SD_RAM0 AOV_RAMS_SD_EN

 /* Field AOV_RAMS_SD_RAM1 */
 /* Accessor macros */
#define hal_get_aov_rams_sd_ram1() hal_get_register_field8(AOV_RAMS_SD_EN,AOV_RAMS_SD_RAM1)
#define hal_set_aov_rams_sd_ram1(x) hal_set_register_field(AOV_RAMS_SD_EN,AOV_RAMS_SD_RAM1,(x))
 /* Workings */
#define TYPE_OF_AOV_RAMS_SD_RAM1 AOV_RAMS_SD_EN
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_SD_RAM1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_SD_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_SD_RAM1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_SD_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAMS_SD_RAM1 AOV_RAMS_SD_EN

 /* Field AOV_RAM_CFG_MAX_ENTRIES_LSB */
 /* Accessor macros */
#define hal_get_aov_ram_cfg_max_entries() hal_get_register_field16(AOV_RAM_CFG,AOV_RAM_CFG_MAX_ENTRIES)
#define hal_set_aov_ram_cfg_max_entries(x) hal_set_register_field(AOV_RAM_CFG,AOV_RAM_CFG_MAX_ENTRIES,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM_CFG_MAX_ENTRIES AOV_RAM_CFG
#define FIELDS_MASKS_SHIFTED_AOV_RAM_CFG_MAX_ENTRIES(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM_CFG_MAX_ENTRIES(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM_CFG_MAX_ENTRIES AOV_RAM_CFG

 /* Field AOV_RAM_CFG_READ_LIMIT_LSB */
 /* Accessor macros */
#define hal_get_aov_ram_cfg_read_limit() hal_get_register_field8(AOV_RAM_CFG,AOV_RAM_CFG_READ_LIMIT)
#define hal_set_aov_ram_cfg_read_limit(x) hal_set_register_field(AOV_RAM_CFG,AOV_RAM_CFG_READ_LIMIT,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM_CFG_READ_LIMIT AOV_RAM_CFG
#define FIELDS_MASKS_SHIFTED_AOV_RAM_CFG_READ_LIMIT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM_CFG_READ_LIMIT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM_CFG_READ_LIMIT AOV_RAM_CFG

 /* Field AOV_RAM_CFG_STALL_LIMIT_LSB */
 /* Accessor macros */
#define hal_get_aov_ram_cfg_stall_limit() hal_get_register_field8(AOV_RAM_CFG,AOV_RAM_CFG_STALL_LIMIT)
#define hal_set_aov_ram_cfg_stall_limit(x) hal_set_register_field(AOV_RAM_CFG,AOV_RAM_CFG_STALL_LIMIT,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM_CFG_STALL_LIMIT AOV_RAM_CFG
#define FIELDS_MASKS_SHIFTED_AOV_RAM_CFG_STALL_LIMIT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM_CFG_STALL_LIMIT(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM_CFG_STALL_LIMIT AOV_RAM_CFG

 /* Field AOV_RAM_CFG_THRESHOLD_LSB */
 /* Accessor macros */
#define hal_get_aov_ram_cfg_threshold() hal_get_register_field8(AOV_RAM_CFG,AOV_RAM_CFG_THRESHOLD)
#define hal_set_aov_ram_cfg_threshold(x) hal_set_register_field(AOV_RAM_CFG,AOV_RAM_CFG_THRESHOLD,(x))
 /* Workings */
#define TYPE_OF_AOV_RAM_CFG_THRESHOLD AOV_RAM_CFG
#define FIELDS_MASKS_SHIFTED_AOV_RAM_CFG_THRESHOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM_CFG_THRESHOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV_RAM_CFG_THRESHOLD AOV_RAM_CFG

 /* Field AOV__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_aov__p0_access_permission() ((aov__p0_access_permission) hal_get_register_field8(AOV_ACCESS_CTRL,AOV__P0_ACCESS_PERMISSION))
#define hal_set_aov__p0_access_permission(x) hal_set_register_field(AOV_ACCESS_CTRL,AOV__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AOV__P0_ACCESS_PERMISSION AOV_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AOV__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV__P0_ACCESS_PERMISSION AOV_ACCESS_CTRL

 /* Field AOV__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_aov__p1_access_permission() ((aov__p1_access_permission) hal_get_register_field8(AOV_ACCESS_CTRL,AOV__P1_ACCESS_PERMISSION))
#define hal_set_aov__p1_access_permission(x) hal_set_register_field(AOV_ACCESS_CTRL,AOV__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AOV__P1_ACCESS_PERMISSION AOV_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AOV__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV__P1_ACCESS_PERMISSION AOV_ACCESS_CTRL

 /* Field AOV__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_aov__p2_access_permission() ((aov__p2_access_permission) hal_get_register_field8(AOV_ACCESS_CTRL,AOV__P2_ACCESS_PERMISSION))
#define hal_set_aov__p2_access_permission(x) hal_set_register_field(AOV_ACCESS_CTRL,AOV__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AOV__P2_ACCESS_PERMISSION AOV_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AOV__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV__P2_ACCESS_PERMISSION AOV_ACCESS_CTRL

 /* Field AOV__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_aov__p3_access_permission() ((aov__p3_access_permission) hal_get_register_field8(AOV_ACCESS_CTRL,AOV__P3_ACCESS_PERMISSION))
#define hal_set_aov__p3_access_permission(x) hal_set_register_field(AOV_ACCESS_CTRL,AOV__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AOV__P3_ACCESS_PERMISSION AOV_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AOV__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AOV__P3_ACCESS_PERMISSION AOV_ACCESS_CTRL

 /* Field OVERRUN_ERR */
 /* Accessor macros */
#define hal_get_overrun_err() hal_get_register_field8(AOV_RAM_IF_STATUS1,OVERRUN_ERR)
 /* Workings */
#define TYPE_OF_OVERRUN_ERR AOV_RAM_IF_STATUS1
#define FIELDS_MASKS_SHIFTED_OVERRUN_ERR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_OVERRUN_ERR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_OVERRUN_ERR AOV_RAM_IF_STATUS1

 /* Field RAM0_FULL */
 /* Accessor macros */
#define hal_get_ram0_full() hal_get_register_field8(AOV_RAM_IF_STATUS1,RAM0_FULL)
 /* Workings */
#define TYPE_OF_RAM0_FULL AOV_RAM_IF_STATUS1
#define FIELDS_MASKS_SHIFTED_RAM0_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM0_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM0_FULL AOV_RAM_IF_STATUS1

 /* Field RAM1_FULL */
 /* Accessor macros */
#define hal_get_ram1_full() hal_get_register_field8(AOV_RAM_IF_STATUS1,RAM1_FULL)
 /* Workings */
#define TYPE_OF_RAM1_FULL AOV_RAM_IF_STATUS1
#define FIELDS_MASKS_SHIFTED_RAM1_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM1_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM1_FULL AOV_RAM_IF_STATUS1

 /* Field RAM_PAUSED */
 /* Accessor macros */
#define hal_get_ram_paused() hal_get_register_field8(AOV_RAM_IF_STATUS1,RAM_PAUSED)
 /* Workings */
#define TYPE_OF_RAM_PAUSED AOV_RAM_IF_STATUS1
#define FIELDS_MASKS_SHIFTED_RAM_PAUSED(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM_PAUSED(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM_PAUSED AOV_RAM_IF_STATUS1

 /* Field RAM_RD_ADR_LSB */
 /* Accessor macros */
#define hal_get_ram_rd_adr() hal_get_register_field16(AOV_RAM_IF_STATUS2,RAM_RD_ADR)
 /* Workings */
#define TYPE_OF_RAM_RD_ADR AOV_RAM_IF_STATUS2
#define FIELDS_MASKS_SHIFTED_RAM_RD_ADR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM_RD_ADR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM_RD_ADR AOV_RAM_IF_STATUS2

 /* Field RAM_WRITE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_ram_write_addr() hal_get_register_field16(AOV_RAM_IF_STATUS2,RAM_WRITE_ADDR)
 /* Workings */
#define TYPE_OF_RAM_WRITE_ADDR AOV_RAM_IF_STATUS2
#define FIELDS_MASKS_SHIFTED_RAM_WRITE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM_WRITE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM_WRITE_ADDR AOV_RAM_IF_STATUS2

 /* Field RAM_WR_SEL */
 /* Accessor macros */
#define hal_get_ram_wr_sel() hal_get_register_field8(AOV_RAM_IF_STATUS2,RAM_WR_SEL)
 /* Workings */
#define TYPE_OF_RAM_WR_SEL AOV_RAM_IF_STATUS2
#define FIELDS_MASKS_SHIFTED_RAM_WR_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM_WR_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM_WR_SEL AOV_RAM_IF_STATUS2

 /* Field READ_STATE_LSB */
 /* Accessor macros */
#define hal_get_read_state() hal_get_register_field8(AOV_RAM_IF_STATUS1,READ_STATE)
 /* Workings */
#define TYPE_OF_READ_STATE AOV_RAM_IF_STATUS1
#define FIELDS_MASKS_SHIFTED_READ_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_READ_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_READ_STATE AOV_RAM_IF_STATUS1

 /* Field WRITE_STATE_LSB */
 /* Accessor macros */
#define hal_get_write_state() hal_get_register_field8(AOV_RAM_IF_STATUS1,WRITE_STATE)
 /* Workings */
#define TYPE_OF_WRITE_STATE AOV_RAM_IF_STATUS1
#define FIELDS_MASKS_SHIFTED_WRITE_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_WRITE_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_WRITE_STATE AOV_RAM_IF_STATUS1

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_AOV_ACCESS_CTRL_AOV_ACCESS_CTRL
#define CHECK_FIELD_TYPE_AOV_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_AOV_CTL_AOV_CTL
#define CHECK_FIELD_TYPE_AOV_CTL_END
#define CHECK_FIELD_TYPE_AOV_DEBUG_SELECT_AOV_DEBUG_SELECT
#define CHECK_FIELD_TYPE_AOV_DEBUG_SELECT_END
#define CHECK_FIELD_TYPE_AOV_EVENTS_AOV_EVENTS
#define CHECK_FIELD_TYPE_AOV_EVENTS_END
#define CHECK_FIELD_TYPE_AOV_EVENT_CLEAR_AOV_EVENTS
#define CHECK_FIELD_TYPE_AOV_EVENT_CLEAR_END
#define CHECK_FIELD_TYPE_AOV_EVENT_MASK_AOV_EVENTS
#define CHECK_FIELD_TYPE_AOV_EVENT_MASK_END
#define CHECK_FIELD_TYPE_AOV_EVENT_STATUS_AOV_EVENTS
#define CHECK_FIELD_TYPE_AOV_EVENT_STATUS_END
#define CHECK_FIELD_TYPE_AOV_KEYHOLE_AOV_KEYHOLE
#define CHECK_FIELD_TYPE_AOV_KEYHOLE_END
#define CHECK_FIELD_TYPE_AOV_KEYHOLE_READ_DATA_AOV_KEYHOLE_READ_DATA
#define CHECK_FIELD_TYPE_AOV_KEYHOLE_READ_DATA_END
#define CHECK_FIELD_TYPE_AOV_RAMS_DS_EN_AOV_RAMS_DS_EN
#define CHECK_FIELD_TYPE_AOV_RAMS_DS_EN_END
#define CHECK_FIELD_TYPE_AOV_RAMS_EMA_AOV_RAMS_EMA
#define CHECK_FIELD_TYPE_AOV_RAMS_EMA_END
#define CHECK_FIELD_TYPE_AOV_RAMS_LS_EN_AOV_RAMS_LS_EN
#define CHECK_FIELD_TYPE_AOV_RAMS_LS_EN_END
#define CHECK_FIELD_TYPE_AOV_RAMS_RAWL_AOV_RAMS_RAWL
#define CHECK_FIELD_TYPE_AOV_RAMS_RAWL_END
#define CHECK_FIELD_TYPE_AOV_RAMS_SD_EN_AOV_RAMS_SD_EN
#define CHECK_FIELD_TYPE_AOV_RAMS_SD_EN_END
#define CHECK_FIELD_TYPE_AOV_RAMS_WABL_AOV_RAMS_WABL
#define CHECK_FIELD_TYPE_AOV_RAMS_WABL_END
#define CHECK_FIELD_TYPE_AOV_RAM_CFG_AOV_RAM_CFG
#define CHECK_FIELD_TYPE_AOV_RAM_CFG_END
#define CHECK_FIELD_TYPE_AOV_RAM_IF_STATUS1_AOV_RAM_IF_STATUS1
#define CHECK_FIELD_TYPE_AOV_RAM_IF_STATUS1_END
#define CHECK_FIELD_TYPE_AOV_RAM_IF_STATUS2_AOV_RAM_IF_STATUS2
#define CHECK_FIELD_TYPE_AOV_RAM_IF_STATUS2_END
#define CHECK_FIELD_TYPE_AOV_SEQUENCER_ACTIVE_AOV_SEQUENCER_ACTIVE
#define CHECK_FIELD_TYPE_AOV_SEQUENCER_ACTIVE_END
#define CHECK_FIELD_TYPE_AOV_WAKEUP_MASK_AOV_EVENTS
#define CHECK_FIELD_TYPE_AOV_WAKEUP_MASK_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_AOV_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_EVENTS(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENTS(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENTS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENT_CLEAR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENT_CLEAR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_MASK(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENT_MASK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_MASK(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENT_MASK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_EVENT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENT_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_EVENT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_EVENT_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_KEYHOLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_KEYHOLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_KEYHOLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_DS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_DS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_DS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_DS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_LS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_LS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_LS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_LS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_RAWL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_RAWL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_RAWL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_SD_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_SD_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_SD_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_SD_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAMS_WABL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAMS_WABL(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAMS_WABL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAM_IF_STATUS1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM_IF_STATUS1(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_RAM_IF_STATUS2(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_RAM_IF_STATUS2(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_RAM_IF_STATUS2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_SEQUENCER_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_SEQUENCER_ACTIVE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_SEQUENCER_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_SEQUENCER_ACTIVE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AOV_WAKEUP_MASK(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_WAKEUP_MASK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AOV_WAKEUP_MASK(next, val, rest) \
   (CHECK_FIELD_TYPE(AOV_WAKEUP_MASK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define AOV_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_aov_access_ctrl(x) hal_set_register(AOV_ACCESS_CTRL, x, 1)
#define hal_get_reg_aov_access_ctrl() hal_get_register(AOV_ACCESS_CTRL, 1)
#define AOV_CTL_REG_BITS (9u)
#define hal_set_reg_aov_ctl(x) hal_set_register(AOV_CTL, x, 1)
#define hal_get_reg_aov_ctl() hal_get_register(AOV_CTL, 1)
#define AOV_DEBUG_SELECT_REG_BITS (4u)
#define hal_set_reg_aov_debug_select(x) hal_set_register(AOV_DEBUG_SELECT, x, 1)
#define hal_get_reg_aov_debug_select() hal_get_register(AOV_DEBUG_SELECT, 1)
#define AOV_EVENT_CLEAR_REG_BITS (7u)
#define hal_set_reg_aov_event_clear(x) hal_set_register(AOV_EVENT_CLEAR, x, 1)
#define hal_get_reg_aov_event_clear() hal_get_register(AOV_EVENT_CLEAR, 1)
#define AOV_EVENT_MASK_REG_BITS (7u)
#define hal_set_reg_aov_event_mask(x) hal_set_register(AOV_EVENT_MASK, x, 1)
#define hal_get_reg_aov_event_mask() hal_get_register(AOV_EVENT_MASK, 1)
#define AOV_EVENT_STATUS_REG_BITS (7u)
#define hal_get_reg_aov_event_status() hal_get_register(AOV_EVENT_STATUS, 1)
#define AOV_KEYHOLE_REG_BITS (13u)
#define hal_set_reg_aov_keyhole(x) hal_set_register(AOV_KEYHOLE, x, 1)
#define hal_get_reg_aov_keyhole() hal_get_register(AOV_KEYHOLE, 1)
#define AOV_KEYHOLE_READ_DATA_REG_BITS (24u)
#define hal_get_reg_aov_keyhole_read_data() hal_get_register(AOV_KEYHOLE_READ_DATA, 1)
#define AOV_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_aov_mutex_lock(x) hal_set_register(AOV_MUTEX_LOCK, x, 1)
#define hal_get_reg_aov_mutex_lock() hal_get_register(AOV_MUTEX_LOCK, 1)
#define AOV_RAMS_DS_EN_REG_BITS (2u)
#define hal_set_reg_aov_rams_ds_en(x) hal_set_register(AOV_RAMS_DS_EN, x, 1)
#define hal_get_reg_aov_rams_ds_en() hal_get_register(AOV_RAMS_DS_EN, 1)
#define AOV_RAMS_EMA_REG_BITS (10u)
#define hal_set_reg_aov_rams_ema(x) hal_set_register(AOV_RAMS_EMA, x, 1)
#define hal_get_reg_aov_rams_ema() hal_get_register(AOV_RAMS_EMA, 1)
#define AOV_RAMS_LS_EN_REG_BITS (2u)
#define hal_set_reg_aov_rams_ls_en(x) hal_set_register(AOV_RAMS_LS_EN, x, 1)
#define hal_get_reg_aov_rams_ls_en() hal_get_register(AOV_RAMS_LS_EN, 1)
#define AOV_RAMS_RAWL_REG_BITS (6u)
#define hal_set_reg_aov_rams_rawl(x) hal_set_register(AOV_RAMS_RAWL, x, 1)
#define hal_get_reg_aov_rams_rawl() hal_get_register(AOV_RAMS_RAWL, 1)
#define AOV_RAMS_SD_EN_REG_BITS (2u)
#define hal_set_reg_aov_rams_sd_en(x) hal_set_register(AOV_RAMS_SD_EN, x, 1)
#define hal_get_reg_aov_rams_sd_en() hal_get_register(AOV_RAMS_SD_EN, 1)
#define AOV_RAMS_WABL_REG_BITS (6u)
#define hal_set_reg_aov_rams_wabl(x) hal_set_register(AOV_RAMS_WABL, x, 1)
#define hal_get_reg_aov_rams_wabl() hal_get_register(AOV_RAMS_WABL, 1)
#define AOV_RAM_CFG_REG_BITS (23u)
#define hal_set_reg_aov_ram_cfg(x) hal_set_register(AOV_RAM_CFG, x, 1)
#define hal_get_reg_aov_ram_cfg() hal_get_register(AOV_RAM_CFG, 1)
#define AOV_RAM_IF_STATUS1_REG_BITS (9u)
#define hal_get_reg_aov_ram_if_status1() hal_get_register(AOV_RAM_IF_STATUS1, 1)
#define AOV_RAM_IF_STATUS2_REG_BITS (23u)
#define hal_get_reg_aov_ram_if_status2() hal_get_register(AOV_RAM_IF_STATUS2, 1)
#define AOV_SEQUENCER_ACTIVE_REG_BITS (2u)
#define hal_get_reg_aov_sequencer_active() hal_get_register(AOV_SEQUENCER_ACTIVE, 1)
#define AOV_WAKEUP_MASK_REG_BITS (7u)
#define hal_set_reg_aov_wakeup_mask(x) hal_set_register(AOV_WAKEUP_MASK, x, 1)
#define hal_get_reg_aov_wakeup_mask() hal_get_register(AOV_WAKEUP_MASK, 1)

 /* Workings */
#define SETTER_FOR_AOV_ACCESS_CTRL hal_set_reg_aov_access_ctrl
#define GETTER_FOR_AOV_ACCESS_CTRL hal_get_reg_aov_access_ctrl
#define SETTER_FOR_AOV_CTL hal_set_reg_aov_ctl
#define GETTER_FOR_AOV_CTL hal_get_reg_aov_ctl
#define SETTER_FOR_AOV_DEBUG_SELECT hal_set_reg_aov_debug_select
#define GETTER_FOR_AOV_DEBUG_SELECT hal_get_reg_aov_debug_select
#define SETTER_FOR_AOV_EVENT_CLEAR hal_set_reg_aov_event_clear
#define GETTER_FOR_AOV_EVENT_CLEAR hal_get_reg_aov_event_clear
#define SETTER_FOR_AOV_EVENT_MASK hal_set_reg_aov_event_mask
#define GETTER_FOR_AOV_EVENT_MASK hal_get_reg_aov_event_mask
#define GETTER_FOR_AOV_EVENT_STATUS hal_get_reg_aov_event_status
#define SETTER_FOR_AOV_KEYHOLE hal_set_reg_aov_keyhole
#define GETTER_FOR_AOV_KEYHOLE hal_get_reg_aov_keyhole
#define GETTER_FOR_AOV_KEYHOLE_READ_DATA hal_get_reg_aov_keyhole_read_data
#define SETTER_FOR_AOV_MUTEX_LOCK hal_set_reg_aov_mutex_lock
#define GETTER_FOR_AOV_MUTEX_LOCK hal_get_reg_aov_mutex_lock
#define SETTER_FOR_AOV_RAMS_DS_EN hal_set_reg_aov_rams_ds_en
#define GETTER_FOR_AOV_RAMS_DS_EN hal_get_reg_aov_rams_ds_en
#define SETTER_FOR_AOV_RAMS_EMA hal_set_reg_aov_rams_ema
#define GETTER_FOR_AOV_RAMS_EMA hal_get_reg_aov_rams_ema
#define SETTER_FOR_AOV_RAMS_LS_EN hal_set_reg_aov_rams_ls_en
#define GETTER_FOR_AOV_RAMS_LS_EN hal_get_reg_aov_rams_ls_en
#define SETTER_FOR_AOV_RAMS_RAWL hal_set_reg_aov_rams_rawl
#define GETTER_FOR_AOV_RAMS_RAWL hal_get_reg_aov_rams_rawl
#define SETTER_FOR_AOV_RAMS_SD_EN hal_set_reg_aov_rams_sd_en
#define GETTER_FOR_AOV_RAMS_SD_EN hal_get_reg_aov_rams_sd_en
#define SETTER_FOR_AOV_RAMS_WABL hal_set_reg_aov_rams_wabl
#define GETTER_FOR_AOV_RAMS_WABL hal_get_reg_aov_rams_wabl
#define SETTER_FOR_AOV_RAM_CFG hal_set_reg_aov_ram_cfg
#define GETTER_FOR_AOV_RAM_CFG hal_get_reg_aov_ram_cfg
#define GETTER_FOR_AOV_RAM_IF_STATUS1 hal_get_reg_aov_ram_if_status1
#define GETTER_FOR_AOV_RAM_IF_STATUS2 hal_get_reg_aov_ram_if_status2
#define GETTER_FOR_AOV_SEQUENCER_ACTIVE hal_get_reg_aov_sequencer_active
#define SETTER_FOR_AOV_WAKEUP_MASK hal_set_reg_aov_wakeup_mask
#define GETTER_FOR_AOV_WAKEUP_MASK hal_get_reg_aov_wakeup_mask

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_AOV) */
#endif /* __HAL_MACROS_H__MODULE_AOV */



#if defined(IO_DEFS_MODULE_AUDIO_DMAC) 

#ifndef __HAL_MACROS_H__MODULE_AUDIO_DMAC
#define __HAL_MACROS_H__MODULE_AUDIO_DMAC

/* -- Registers in Audio DMAC  -- */

 /* Field AUDIO_DMAC__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_dmac__p0_access_permission() ((audio_dmac__p0_access_permission) hal_get_register_field8(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P0_ACCESS_PERMISSION))
#define hal_set_audio_dmac__p0_access_permission(x) hal_set_register_field(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMAC__P0_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_DMAC__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMAC__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMAC__P0_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL

 /* Field AUDIO_DMAC__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_dmac__p1_access_permission() ((audio_dmac__p1_access_permission) hal_get_register_field8(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P1_ACCESS_PERMISSION))
#define hal_set_audio_dmac__p1_access_permission(x) hal_set_register_field(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMAC__P1_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_DMAC__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMAC__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMAC__P1_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL

 /* Field AUDIO_DMAC__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_dmac__p2_access_permission() ((audio_dmac__p2_access_permission) hal_get_register_field8(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P2_ACCESS_PERMISSION))
#define hal_set_audio_dmac__p2_access_permission(x) hal_set_register_field(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMAC__P2_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_DMAC__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMAC__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMAC__P2_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL

 /* Field AUDIO_DMAC__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_dmac__p3_access_permission() ((audio_dmac__p3_access_permission) hal_get_register_field8(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P3_ACCESS_PERMISSION))
#define hal_set_audio_dmac__p3_access_permission(x) hal_set_register_field(AUDIO_DMAC_CPU0_ACCESS_CTRL,AUDIO_DMAC__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMAC__P3_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_DMAC__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMAC__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMAC__P3_ACCESS_PERMISSION AUDIO_DMAC_CPU0_ACCESS_CTRL

 /* Field AUDIO_DMA_DEBUG_EN */
 /* Accessor macros */
#define hal_get_audio_dma_debug_en() hal_get_register_field8(AUDIO_DMA_DEBUG_SELECT,AUDIO_DMA_DEBUG_EN)
#define hal_set_audio_dma_debug_en(x) hal_set_register_field(AUDIO_DMA_DEBUG_SELECT,AUDIO_DMA_DEBUG_EN,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_DEBUG_EN AUDIO_DMA_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_DEBUG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_DEBUG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_DEBUG_EN AUDIO_DMA_DEBUG_SELECT

 /* Field AUDIO_DMA_DEBUG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_debug_status() hal_get_register_field32(AUDIO_DMA_DEBUG_STATUS,AUDIO_DMA_DEBUG_STATUS)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_DEBUG_STATUS AUDIO_DMA_DEBUG_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_DEBUG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_DEBUG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_DEBUG_STATUS AUDIO_DMA_DEBUG_STATUS

 /* Field AUDIO_DMA_DEBUG_UNIT_SELECT_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_debug_unit_select() ((audio_dma_debug_unit_select) hal_get_register_field8(AUDIO_DMA_DEBUG_SELECT,AUDIO_DMA_DEBUG_UNIT_SELECT))
#define hal_set_audio_dma_debug_unit_select(x) hal_set_register_field(AUDIO_DMA_DEBUG_SELECT,AUDIO_DMA_DEBUG_UNIT_SELECT,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_DEBUG_UNIT_SELECT AUDIO_DMA_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_DEBUG_UNIT_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_DEBUG_UNIT_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_DEBUG_UNIT_SELECT AUDIO_DMA_DEBUG_SELECT

 /* Field AUDIO_DMA_DEBUG_WORD_SELECT_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_debug_word_select() hal_get_register_field8(AUDIO_DMA_DEBUG_SELECT,AUDIO_DMA_DEBUG_WORD_SELECT)
#define hal_set_audio_dma_debug_word_select(x) hal_set_register_field(AUDIO_DMA_DEBUG_SELECT,AUDIO_DMA_DEBUG_WORD_SELECT,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_DEBUG_WORD_SELECT AUDIO_DMA_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_DEBUG_WORD_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_DEBUG_WORD_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_DEBUG_WORD_SELECT AUDIO_DMA_DEBUG_SELECT

 /* Field AUDIO_DMA_QUEUE_ABORT_TRANSFER */
 /* Accessor macros */
#define hal_get_audio_dma_queue_abort_transfer() hal_get_register_field8(AUDIO_DMA_QUEUE_ABORT_TRANSFER,AUDIO_DMA_QUEUE_ABORT_TRANSFER)
#define hal_set_audio_dma_queue_abort_transfer(x) hal_set_register_field(AUDIO_DMA_QUEUE_ABORT_TRANSFER,AUDIO_DMA_QUEUE_ABORT_TRANSFER,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_ABORT_TRANSFER AUDIO_DMA_QUEUE_ABORT_TRANSFER
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_ABORT_TRANSFER(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_ABORT_TRANSFER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_ABORT_TRANSFER(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_ABORT_TRANSFER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_ABORT_TRANSFER AUDIO_DMA_QUEUE_ABORT_TRANSFER

 /* Field AUDIO_DMA_QUEUE_BUFFER_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_buffer_handle() hal_get_register_field16(AUDIO_DMA_QUEUE_BUFFER_HANDLE,AUDIO_DMA_QUEUE_BUFFER_HANDLE)
#define hal_set_audio_dma_queue_buffer_handle(x) hal_set_register_field(AUDIO_DMA_QUEUE_BUFFER_HANDLE,AUDIO_DMA_QUEUE_BUFFER_HANDLE,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_BUFFER_HANDLE AUDIO_DMA_QUEUE_BUFFER_HANDLE
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_BUFFER_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_BUFFER_HANDLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_BUFFER_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_BUFFER_HANDLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_BUFFER_HANDLE AUDIO_DMA_QUEUE_BUFFER_HANDLE

 /* Field AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE

 /* Field AUDIO_DMA_QUEUE_CLOCKS_ENABLE */
 /* Accessor macros */
#define hal_get_audio_dma_queue_clocks_enable() hal_get_register_field8(AUDIO_DMA_QUEUE_CLOCKS_ENABLE,AUDIO_DMA_QUEUE_CLOCKS_ENABLE)
#define hal_set_audio_dma_queue_clocks_enable(x) hal_set_register_field(AUDIO_DMA_QUEUE_CLOCKS_ENABLE,AUDIO_DMA_QUEUE_CLOCKS_ENABLE,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_CLOCKS_ENABLE AUDIO_DMA_QUEUE_CLOCKS_ENABLE
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_CLOCKS_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_CLOCKS_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_CLOCKS_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_CLOCKS_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_CLOCKS_ENABLE AUDIO_DMA_QUEUE_CLOCKS_ENABLE

 /* Field AUDIO_DMA_QUEUE_ENABLE */
 /* Accessor macros */
#define hal_get_audio_dma_queue_enable() hal_get_register_field8(AUDIO_DMA_QUEUE_ENABLE,AUDIO_DMA_QUEUE_ENABLE)
#define hal_set_audio_dma_queue_enable(x) hal_set_register_field(AUDIO_DMA_QUEUE_ENABLE,AUDIO_DMA_QUEUE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_ENABLE AUDIO_DMA_QUEUE_ENABLE
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_ENABLE AUDIO_DMA_QUEUE_ENABLE

 /* Field AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_CLEAR_TR */
 /* Accessor macros */
#define hal_get_audio_dma_queue_halt_on_exception_clear_tr() hal_get_register_field8(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION,AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_CLEAR_TR)
#define hal_set_audio_dma_queue_halt_on_exception_clear_tr(x) hal_set_register_field(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION,AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_CLEAR_TR,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_CLEAR_TR AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_CLEAR_TR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_CLEAR_TR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_CLEAR_TR AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION

 /* Field AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END_TR */
 /* Accessor macros */
#define hal_get_audio_dma_queue_halt_on_exception_end_tr() hal_get_register_field8(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION,AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END_TR)
#define hal_set_audio_dma_queue_halt_on_exception_end_tr(x) hal_set_register_field(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION,AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END_TR,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END_TR AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END_TR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END_TR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END_TR AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION

 /* Field AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_MIDDLE_TR */
 /* Accessor macros */
#define hal_get_audio_dma_queue_halt_on_exception_middle_tr() hal_get_register_field8(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION,AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_MIDDLE_TR)
#define hal_set_audio_dma_queue_halt_on_exception_middle_tr(x) hal_set_register_field(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION,AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_MIDDLE_TR,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_MIDDLE_TR AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_MIDDLE_TR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_MIDDLE_TR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_MIDDLE_TR AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION

 /* Field AUDIO_DMA_QUEUE_REQUEST_COUNT_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_request_count() hal_get_register_field8(AUDIO_DMA_QUEUE_REQUEST_COUNT,AUDIO_DMA_QUEUE_REQUEST_COUNT)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_REQUEST_COUNT AUDIO_DMA_QUEUE_REQUEST_COUNT
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_REQUEST_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_REQUEST_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_REQUEST_COUNT AUDIO_DMA_QUEUE_REQUEST_COUNT

 /* Field AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE */
 /* Accessor macros */
#define hal_get_audio_dma_queue_request_fetch_disable() hal_get_register_field8(AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE,AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE)
#define hal_set_audio_dma_queue_request_fetch_disable(x) hal_set_register_field(AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE,AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE

 /* Field AUDIO_DMA_QUEUE_STATUS_CH_TYPE_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_ch_type() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_CH_TYPE)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_CH_TYPE AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_CH_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_CH_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_CH_TYPE AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_DUMMY0 */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_dummy0() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_DUMMY0)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_DUMMY0 AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_DUMMY0(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_DUMMY0(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_DUMMY0 AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_DUMMY1 */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_dummy1() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_DUMMY1)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_DUMMY1 AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_DUMMY1(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_DUMMY1(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_DUMMY1 AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_ERROR */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_error() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_ERROR)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_ERROR AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_ERROR AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_ERROR_SRC_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_error_src() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_ERROR_SRC)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_ERROR_SRC AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_ERROR_SRC(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_ERROR_SRC(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_ERROR_SRC AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_ERROR_TYPE_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_error_type() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_ERROR_TYPE)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_ERROR_TYPE AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_ERROR_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_ERROR_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_ERROR_TYPE AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_HALT */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_halt() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_HALT)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_HALT AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_HALT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_HALT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_HALT AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_IDLE */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_idle() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_IDLE)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_IDLE AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_IDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_IDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_IDLE AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_TRANS_CNTR_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_trans_cntr() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_TRANS_CNTR)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_TRANS_CNTR AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_TRANS_CNTR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_TRANS_CNTR(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_TRANS_CNTR AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_TRANS_STATE_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_trans_state() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_TRANS_STATE)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_TRANS_STATE AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_TRANS_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_TRANS_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_TRANS_STATE AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_STATUS_TRANS_TAG_LSB */
 /* Accessor macros */
#define hal_get_audio_dma_queue_status_trans_tag() hal_get_register_field8(AUDIO_DMA_QUEUE_STATUS,AUDIO_DMA_QUEUE_STATUS_TRANS_TAG)
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_STATUS_TRANS_TAG AUDIO_DMA_QUEUE_STATUS
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS_TRANS_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS_TRANS_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_STATUS_TRANS_TAG AUDIO_DMA_QUEUE_STATUS

 /* Field AUDIO_DMA_QUEUE_TRIGGER_REQUEST */
 /* Accessor macros */
#define hal_get_audio_dma_queue_trigger_request() hal_get_register_field8(AUDIO_DMA_QUEUE_TRIGGER_REQUEST,AUDIO_DMA_QUEUE_TRIGGER_REQUEST)
#define hal_set_audio_dma_queue_trigger_request(x) hal_set_register_field(AUDIO_DMA_QUEUE_TRIGGER_REQUEST,AUDIO_DMA_QUEUE_TRIGGER_REQUEST,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_QUEUE_TRIGGER_REQUEST AUDIO_DMA_QUEUE_TRIGGER_REQUEST
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_TRIGGER_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_TRIGGER_REQUEST, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_TRIGGER_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_TRIGGER_REQUEST, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_QUEUE_TRIGGER_REQUEST AUDIO_DMA_QUEUE_TRIGGER_REQUEST

 /* Field AUDIO_DMA_SOFT_RESET */
 /* Accessor macros */
#define hal_get_audio_dma_soft_reset() hal_get_register_field8(AUDIO_DMA_SOFT_RESET,AUDIO_DMA_SOFT_RESET)
#define hal_set_audio_dma_soft_reset(x) hal_set_register_field(AUDIO_DMA_SOFT_RESET,AUDIO_DMA_SOFT_RESET,(x))
 /* Workings */
#define TYPE_OF_AUDIO_DMA_SOFT_RESET AUDIO_DMA_SOFT_RESET
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_SOFT_RESET, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_SOFT_RESET, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_DMA_SOFT_RESET AUDIO_DMA_SOFT_RESET

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_AUDIO_DMAC_CPU0_ACCESS_CTRL_AUDIO_DMAC_CPU0_ACCESS_CTRL
#define CHECK_FIELD_TYPE_AUDIO_DMAC_CPU0_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_DEBUG_SELECT_AUDIO_DMA_DEBUG_SELECT
#define CHECK_FIELD_TYPE_AUDIO_DMA_DEBUG_SELECT_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_DEBUG_STATUS_AUDIO_DMA_DEBUG_STATUS
#define CHECK_FIELD_TYPE_AUDIO_DMA_DEBUG_STATUS_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_ABORT_TRANSFER_AUDIO_DMA_QUEUE_ABORT_TRANSFER
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_ABORT_TRANSFER_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_BUFFER_HANDLE_AUDIO_DMA_QUEUE_BUFFER_HANDLE
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_BUFFER_HANDLE_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_CLOCKS_ENABLE_AUDIO_DMA_QUEUE_CLOCKS_ENABLE
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_CLOCKS_ENABLE_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_ENABLE_AUDIO_DMA_QUEUE_ENABLE
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_ENABLE_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_REQUEST_COUNT_AUDIO_DMA_QUEUE_REQUEST_COUNT
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_REQUEST_COUNT_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_STATUS_AUDIO_DMA_QUEUE_STATUS
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_STATUS_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_TRIGGER_REQUEST_AUDIO_DMA_QUEUE_TRIGGER_REQUEST
#define CHECK_FIELD_TYPE_AUDIO_DMA_QUEUE_TRIGGER_REQUEST_END
#define CHECK_FIELD_TYPE_AUDIO_DMA_SOFT_RESET_AUDIO_DMA_SOFT_RESET
#define CHECK_FIELD_TYPE_AUDIO_DMA_SOFT_RESET_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_AUDIO_DMAC_CPU0_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMAC_CPU0_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMAC_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_AUDIO_DMA_QUEUE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_DMA_QUEUE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(AUDIO_DMA_QUEUE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define AUDIO_DMAC_CPU0_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_audio_dmac_cpu0_access_ctrl(x) hal_set_register(AUDIO_DMAC_CPU0_ACCESS_CTRL, x, 1)
#define hal_get_reg_audio_dmac_cpu0_access_ctrl() hal_get_register(AUDIO_DMAC_CPU0_ACCESS_CTRL, 1)
#define AUDIO_DMAC_CPU0_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_audio_dmac_cpu0_mutex_lock(x) hal_set_register(AUDIO_DMAC_CPU0_MUTEX_LOCK, x, 1)
#define hal_get_reg_audio_dmac_cpu0_mutex_lock() hal_get_register(AUDIO_DMAC_CPU0_MUTEX_LOCK, 1)
#define AUDIO_DMA_DEBUG_SELECT_REG_BITS (13u)
#define hal_set_reg_audio_dma_debug_select(x) hal_set_register(AUDIO_DMA_DEBUG_SELECT, x, 1)
#define hal_get_reg_audio_dma_debug_select() hal_get_register(AUDIO_DMA_DEBUG_SELECT, 1)
#define AUDIO_DMA_DEBUG_STATUS_REG_BITS (32u)
#define hal_get_reg_audio_dma_debug_status() hal_get_register(AUDIO_DMA_DEBUG_STATUS, 1)
#define AUDIO_DMA_QUEUE_ABORT_TRANSFER_REG_BITS (1u)
#define hal_set_reg_audio_dma_queue_abort_transfer(x) hal_set_register(AUDIO_DMA_QUEUE_ABORT_TRANSFER, x, 1)
#define hal_get_reg_audio_dma_queue_abort_transfer() hal_get_register(AUDIO_DMA_QUEUE_ABORT_TRANSFER, 1)
#define AUDIO_DMA_QUEUE_BUFFER_HANDLE_REG_BITS (12u)
#define hal_set_reg_audio_dma_queue_buffer_handle(x) hal_set_register(AUDIO_DMA_QUEUE_BUFFER_HANDLE, x, 1)
#define hal_get_reg_audio_dma_queue_buffer_handle() hal_get_register(AUDIO_DMA_QUEUE_BUFFER_HANDLE, 1)
#define AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE_REG_BITS (1u)
#define hal_set_reg_audio_dma_queue_clear_request_queue(x) hal_set_register(AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE, x, 1)
#define AUDIO_DMA_QUEUE_CLOCKS_ENABLE_REG_BITS (1u)
#define hal_set_reg_audio_dma_queue_clocks_enable(x) hal_set_register(AUDIO_DMA_QUEUE_CLOCKS_ENABLE, x, 1)
#define hal_get_reg_audio_dma_queue_clocks_enable() hal_get_register(AUDIO_DMA_QUEUE_CLOCKS_ENABLE, 1)
#define AUDIO_DMA_QUEUE_ENABLE_REG_BITS (1u)
#define hal_set_reg_audio_dma_queue_enable(x) hal_set_register(AUDIO_DMA_QUEUE_ENABLE, x, 1)
#define hal_get_reg_audio_dma_queue_enable() hal_get_register(AUDIO_DMA_QUEUE_ENABLE, 1)
#define AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION_REG_BITS (3u)
#define hal_set_reg_audio_dma_queue_halt_on_exception(x) hal_set_register(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, x, 1)
#define hal_get_reg_audio_dma_queue_halt_on_exception() hal_get_register(AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION, 1)
#define AUDIO_DMA_QUEUE_REQUEST_COUNT_REG_BITS (8u)
#define hal_get_reg_audio_dma_queue_request_count() hal_get_register(AUDIO_DMA_QUEUE_REQUEST_COUNT, 1)
#define AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE_REG_BITS (1u)
#define hal_set_reg_audio_dma_queue_request_fetch_disable(x) hal_set_register(AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE, x, 1)
#define hal_get_reg_audio_dma_queue_request_fetch_disable() hal_get_register(AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE, 1)
#define AUDIO_DMA_QUEUE_STATUS_REG_BITS (26u)
#define hal_get_reg_audio_dma_queue_status() hal_get_register(AUDIO_DMA_QUEUE_STATUS, 1)
#define AUDIO_DMA_QUEUE_TRIGGER_REQUEST_REG_BITS (1u)
#define hal_set_reg_audio_dma_queue_trigger_request(x) hal_set_register(AUDIO_DMA_QUEUE_TRIGGER_REQUEST, x, 1)
#define hal_get_reg_audio_dma_queue_trigger_request() hal_get_register(AUDIO_DMA_QUEUE_TRIGGER_REQUEST, 1)
#define AUDIO_DMA_SOFT_RESET_REG_BITS (1u)
#define hal_set_reg_audio_dma_soft_reset(x) hal_set_register(AUDIO_DMA_SOFT_RESET, x, 1)
#define hal_get_reg_audio_dma_soft_reset() hal_get_register(AUDIO_DMA_SOFT_RESET, 1)

 /* Workings */
#define SETTER_FOR_AUDIO_DMAC_CPU0_ACCESS_CTRL hal_set_reg_audio_dmac_cpu0_access_ctrl
#define GETTER_FOR_AUDIO_DMAC_CPU0_ACCESS_CTRL hal_get_reg_audio_dmac_cpu0_access_ctrl
#define SETTER_FOR_AUDIO_DMAC_CPU0_MUTEX_LOCK hal_set_reg_audio_dmac_cpu0_mutex_lock
#define GETTER_FOR_AUDIO_DMAC_CPU0_MUTEX_LOCK hal_get_reg_audio_dmac_cpu0_mutex_lock
#define SETTER_FOR_AUDIO_DMA_DEBUG_SELECT hal_set_reg_audio_dma_debug_select
#define GETTER_FOR_AUDIO_DMA_DEBUG_SELECT hal_get_reg_audio_dma_debug_select
#define GETTER_FOR_AUDIO_DMA_DEBUG_STATUS hal_get_reg_audio_dma_debug_status
#define SETTER_FOR_AUDIO_DMA_QUEUE_ABORT_TRANSFER hal_set_reg_audio_dma_queue_abort_transfer
#define GETTER_FOR_AUDIO_DMA_QUEUE_ABORT_TRANSFER hal_get_reg_audio_dma_queue_abort_transfer
#define SETTER_FOR_AUDIO_DMA_QUEUE_BUFFER_HANDLE hal_set_reg_audio_dma_queue_buffer_handle
#define GETTER_FOR_AUDIO_DMA_QUEUE_BUFFER_HANDLE hal_get_reg_audio_dma_queue_buffer_handle
#define SETTER_FOR_AUDIO_DMA_QUEUE_CLEAR_REQUEST_QUEUE hal_set_reg_audio_dma_queue_clear_request_queue
#define SETTER_FOR_AUDIO_DMA_QUEUE_CLOCKS_ENABLE hal_set_reg_audio_dma_queue_clocks_enable
#define GETTER_FOR_AUDIO_DMA_QUEUE_CLOCKS_ENABLE hal_get_reg_audio_dma_queue_clocks_enable
#define SETTER_FOR_AUDIO_DMA_QUEUE_ENABLE hal_set_reg_audio_dma_queue_enable
#define GETTER_FOR_AUDIO_DMA_QUEUE_ENABLE hal_get_reg_audio_dma_queue_enable
#define SETTER_FOR_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION hal_set_reg_audio_dma_queue_halt_on_exception
#define GETTER_FOR_AUDIO_DMA_QUEUE_HALT_ON_EXCEPTION hal_get_reg_audio_dma_queue_halt_on_exception
#define GETTER_FOR_AUDIO_DMA_QUEUE_REQUEST_COUNT hal_get_reg_audio_dma_queue_request_count
#define SETTER_FOR_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE hal_set_reg_audio_dma_queue_request_fetch_disable
#define GETTER_FOR_AUDIO_DMA_QUEUE_REQUEST_FETCH_DISABLE hal_get_reg_audio_dma_queue_request_fetch_disable
#define GETTER_FOR_AUDIO_DMA_QUEUE_STATUS hal_get_reg_audio_dma_queue_status
#define SETTER_FOR_AUDIO_DMA_QUEUE_TRIGGER_REQUEST hal_set_reg_audio_dma_queue_trigger_request
#define GETTER_FOR_AUDIO_DMA_QUEUE_TRIGGER_REQUEST hal_get_reg_audio_dma_queue_trigger_request
#define SETTER_FOR_AUDIO_DMA_SOFT_RESET hal_set_reg_audio_dma_soft_reset
#define GETTER_FOR_AUDIO_DMA_SOFT_RESET hal_get_reg_audio_dma_soft_reset

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_AUDIO_DMAC) */
#endif /* __HAL_MACROS_H__MODULE_AUDIO_DMAC */

#if defined(IO_DEFS_MODULE_AUDIO_SYS_ADPLL) 

#ifndef __HAL_MACROS_H__MODULE_AUDIO_SYS_ADPLL
#define __HAL_MACROS_H__MODULE_AUDIO_SYS_ADPLL

/* -- Audio subsystem clock control registers for the ADPLL -- */

 /* Field AUDIO_SYS_ADPLL__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_sys_adpll__p0_access_permission() ((audio_sys_adpll__p0_access_permission) hal_get_register_field8(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P0_ACCESS_PERMISSION))
#define hal_set_audio_sys_adpll__p0_access_permission(x) hal_set_register_field(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_SYS_ADPLL__P0_ACCESS_PERMISSION ADPLL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_SYS_ADPLL__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_SYS_ADPLL__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_SYS_ADPLL__P0_ACCESS_PERMISSION ADPLL_ACCESS_CTRL

 /* Field AUDIO_SYS_ADPLL__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_sys_adpll__p1_access_permission() ((audio_sys_adpll__p1_access_permission) hal_get_register_field8(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P1_ACCESS_PERMISSION))
#define hal_set_audio_sys_adpll__p1_access_permission(x) hal_set_register_field(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_SYS_ADPLL__P1_ACCESS_PERMISSION ADPLL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_SYS_ADPLL__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_SYS_ADPLL__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_SYS_ADPLL__P1_ACCESS_PERMISSION ADPLL_ACCESS_CTRL

 /* Field AUDIO_SYS_ADPLL__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_sys_adpll__p2_access_permission() ((audio_sys_adpll__p2_access_permission) hal_get_register_field8(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P2_ACCESS_PERMISSION))
#define hal_set_audio_sys_adpll__p2_access_permission(x) hal_set_register_field(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_SYS_ADPLL__P2_ACCESS_PERMISSION ADPLL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_SYS_ADPLL__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_SYS_ADPLL__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_SYS_ADPLL__P2_ACCESS_PERMISSION ADPLL_ACCESS_CTRL

 /* Field AUDIO_SYS_ADPLL__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_audio_sys_adpll__p3_access_permission() ((audio_sys_adpll__p3_access_permission) hal_get_register_field8(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P3_ACCESS_PERMISSION))
#define hal_set_audio_sys_adpll__p3_access_permission(x) hal_set_register_field(ADPLL_ACCESS_CTRL,AUDIO_SYS_ADPLL__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_AUDIO_SYS_ADPLL__P3_ACCESS_PERMISSION ADPLL_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_AUDIO_SYS_ADPLL__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_AUDIO_SYS_ADPLL__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_AUDIO_SYS_ADPLL__P3_ACCESS_PERMISSION ADPLL_ACCESS_CTRL

 /* Field CLKGEN_CLK_SWITCH_ADPLL_EN */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_adpll_en() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_ADPLL_EN)
#define hal_set_clkgen_clk_switch_adpll_en(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_ADPLL_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_ADPLL_EN CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_ADPLL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_ADPLL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_ADPLL_EN CLKGEN_CLK_SWITCH

 /* Field CLKGEN_CLK_SWITCH_DELAY_LSB */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_delay() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_DELAY)
#define hal_set_clkgen_clk_switch_delay(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_DELAY,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_DELAY CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_DELAY(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_DELAY(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_DELAY CLKGEN_CLK_SWITCH

 /* Field CLKGEN_CLK_SWITCH_EN */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_en() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_EN)
#define hal_set_clkgen_clk_switch_en(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_EN CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_EN CLKGEN_CLK_SWITCH

 /* Field CLKGEN_CLK_SWITCH_IGNORE_LOCK */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_ignore_lock() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_IGNORE_LOCK)
#define hal_set_clkgen_clk_switch_ignore_lock(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_IGNORE_LOCK,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_IGNORE_LOCK CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_IGNORE_LOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_IGNORE_LOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_IGNORE_LOCK CLKGEN_CLK_SWITCH

 /* Field CLKGEN_CLK_SWITCH_SEL_OVR */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_sel_ovr() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_SEL_OVR)
#define hal_set_clkgen_clk_switch_sel_ovr(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_SEL_OVR,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_SEL_OVR CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_SEL_OVR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_SEL_OVR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_SEL_OVR CLKGEN_CLK_SWITCH

 /* Field CLKGEN_CLK_SWITCH_SEL_XTAL_AOV */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_sel_xtal_aov() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_SEL_XTAL_AOV)
#define hal_set_clkgen_clk_switch_sel_xtal_aov(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_SEL_XTAL_AOV,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_SEL_XTAL_AOV CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_SEL_XTAL_AOV(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_SEL_XTAL_AOV(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_SEL_XTAL_AOV CLKGEN_CLK_SWITCH

 /* Field CLKGEN_CLK_SWITCH_STATUS_CLR */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_status_clr() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_STATUS_CLR)
#define hal_set_clkgen_clk_switch_status_clr(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_STATUS_CLR,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_STATUS_CLR CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_STATUS_CLR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_STATUS_CLR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_STATUS_CLR CLKGEN_CLK_SWITCH

 /* Field CLKGEN_CLK_SWITCH_STATUS_LOCK_ERROR */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_status_lock_error() hal_get_register_field8(CLKGEN_CLK_SWITCH_STATUS,CLKGEN_CLK_SWITCH_STATUS_LOCK_ERROR)
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_STATUS_LOCK_ERROR CLKGEN_CLK_SWITCH_STATUS
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_STATUS_LOCK_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_STATUS_LOCK_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_STATUS_LOCK_ERROR CLKGEN_CLK_SWITCH_STATUS

 /* Field CLKGEN_CLK_SWITCH_STATUS_SEL */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_status_sel() hal_get_register_field8(CLKGEN_CLK_SWITCH_STATUS,CLKGEN_CLK_SWITCH_STATUS_SEL)
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_STATUS_SEL CLKGEN_CLK_SWITCH_STATUS
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_STATUS_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_STATUS_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_STATUS_SEL CLKGEN_CLK_SWITCH_STATUS

 /* Field CLKGEN_CLK_SWITCH_VCO_OVR */
 /* Accessor macros */
#define hal_get_clkgen_clk_switch_vco_ovr() hal_get_register_field8(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_VCO_OVR)
#define hal_set_clkgen_clk_switch_vco_ovr(x) hal_set_register_field(CLKGEN_CLK_SWITCH,CLKGEN_CLK_SWITCH_VCO_OVR,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CLK_SWITCH_VCO_OVR CLKGEN_CLK_SWITCH
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_VCO_OVR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_VCO_OVR(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CLK_SWITCH_VCO_OVR CLKGEN_CLK_SWITCH

 /* Field NCO_PLL_ACC_VALUE_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_acc_value() hal_get_register_field16(NCO_PLL_ACC_VALUE,NCO_PLL_ACC_VALUE)
 /* Workings */
#define TYPE_OF_NCO_PLL_ACC_VALUE NCO_PLL_ACC_VALUE
#define FIELDS_MASKS_SHIFTED_NCO_PLL_ACC_VALUE(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_ACC_VALUE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_ACC_VALUE(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_ACC_VALUE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_ACC_VALUE NCO_PLL_ACC_VALUE

 /* Field NCO_PLL_CLK_VCO_COUNT_DELTA_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_clk_vco_count_delta() hal_get_register_field16(NCO_PLL_CLK_VCO_COUNT_DELTA,NCO_PLL_CLK_VCO_COUNT_DELTA)
 /* Workings */
#define TYPE_OF_NCO_PLL_CLK_VCO_COUNT_DELTA NCO_PLL_CLK_VCO_COUNT_DELTA
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CLK_VCO_COUNT_DELTA(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CLK_VCO_COUNT_DELTA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CLK_VCO_COUNT_DELTA(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CLK_VCO_COUNT_DELTA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_CLK_VCO_COUNT_DELTA NCO_PLL_CLK_VCO_COUNT_DELTA

 /* Field NCO_PLL_COARSE_TRIM_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_coarse_trim() hal_get_register_field8(NCO_PLL_COARSE_TRIM,NCO_PLL_COARSE_TRIM)
 /* Workings */
#define TYPE_OF_NCO_PLL_COARSE_TRIM NCO_PLL_COARSE_TRIM
#define FIELDS_MASKS_SHIFTED_NCO_PLL_COARSE_TRIM(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_COARSE_TRIM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_COARSE_TRIM(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_COARSE_TRIM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_COARSE_TRIM NCO_PLL_COARSE_TRIM

 /* Field NCO_PLL_COARSE_TRIM_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_coarse_trim_reg() hal_get_register_field8(NCO_PLL_COARSE_TRIM_REG,NCO_PLL_COARSE_TRIM_REG)
#define hal_set_nco_pll_coarse_trim_reg(x) hal_set_register_field(NCO_PLL_COARSE_TRIM_REG,NCO_PLL_COARSE_TRIM_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_COARSE_TRIM_REG NCO_PLL_COARSE_TRIM_REG
#define FIELDS_MASKS_SHIFTED_NCO_PLL_COARSE_TRIM_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_COARSE_TRIM_REG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_COARSE_TRIM_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_COARSE_TRIM_REG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_COARSE_TRIM_REG NCO_PLL_COARSE_TRIM_REG

 /* Field NCO_PLL_CTL_CAL_REQ */
 /* Accessor macros */
#define hal_get_nco_pll_ctl_cal_req() hal_get_register_field8(NCO_PLL_CTL,NCO_PLL_CTL_CAL_REQ)
#define hal_set_nco_pll_ctl_cal_req(x) hal_set_register_field(NCO_PLL_CTL,NCO_PLL_CTL_CAL_REQ,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_CTL_CAL_REQ NCO_PLL_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CTL_CAL_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CTL_CAL_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_CTL_CAL_REQ NCO_PLL_CTL

 /* Field NCO_PLL_CTL_CLOCK_48_EN */
 /* Accessor macros */
#define hal_get_nco_pll_ctl_clock_48_en() hal_get_register_field8(NCO_PLL_CTL,NCO_PLL_CTL_CLOCK_48_EN)
#define hal_set_nco_pll_ctl_clock_48_en(x) hal_set_register_field(NCO_PLL_CTL,NCO_PLL_CTL_CLOCK_48_EN,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_CTL_CLOCK_48_EN NCO_PLL_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CTL_CLOCK_48_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CTL_CLOCK_48_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_CTL_CLOCK_48_EN NCO_PLL_CTL

 /* Field NCO_PLL_CTL_LOCK_CHECK_PERIOD_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_ctl_lock_check_period_reg() hal_get_register_field8(NCO_PLL_CTL,NCO_PLL_CTL_LOCK_CHECK_PERIOD_REG)
#define hal_set_nco_pll_ctl_lock_check_period_reg(x) hal_set_register_field(NCO_PLL_CTL,NCO_PLL_CTL_LOCK_CHECK_PERIOD_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_CTL_LOCK_CHECK_PERIOD_REG NCO_PLL_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CTL_LOCK_CHECK_PERIOD_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CTL_LOCK_CHECK_PERIOD_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_CTL_LOCK_CHECK_PERIOD_REG NCO_PLL_CTL

 /* Field NCO_PLL_CTL_PLL_DIV_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_ctl_pll_div_reg() hal_get_register_field8(NCO_PLL_CTL,NCO_PLL_CTL_PLL_DIV_REG)
#define hal_set_nco_pll_ctl_pll_div_reg(x) hal_set_register_field(NCO_PLL_CTL,NCO_PLL_CTL_PLL_DIV_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_CTL_PLL_DIV_REG NCO_PLL_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CTL_PLL_DIV_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CTL_PLL_DIV_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_CTL_PLL_DIV_REG NCO_PLL_CTL

 /* Field NCO_PLL_CTL_PLL_STEP_SEL */
 /* Accessor macros */
#define hal_get_nco_pll_ctl_pll_step_sel() hal_get_register_field8(NCO_PLL_CTL,NCO_PLL_CTL_PLL_STEP_SEL)
#define hal_set_nco_pll_ctl_pll_step_sel(x) hal_set_register_field(NCO_PLL_CTL,NCO_PLL_CTL_PLL_STEP_SEL,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_CTL_PLL_STEP_SEL NCO_PLL_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CTL_PLL_STEP_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CTL_PLL_STEP_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_CTL_PLL_STEP_SEL NCO_PLL_CTL

 /* Field NCO_PLL_CTL_REF_CLK_EN */
 /* Accessor macros */
#define hal_get_nco_pll_ctl_ref_clk_en() hal_get_register_field8(NCO_PLL_CTL,NCO_PLL_CTL_REF_CLK_EN)
#define hal_set_nco_pll_ctl_ref_clk_en(x) hal_set_register_field(NCO_PLL_CTL,NCO_PLL_CTL_REF_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_CTL_REF_CLK_EN NCO_PLL_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CTL_REF_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CTL_REF_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_CTL_REF_CLK_EN NCO_PLL_CTL

 /* Field NCO_PLL_DEBUG_CTL_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_debug_ctl_reg() hal_get_register_field8(NCO_PLL_DEBUG,NCO_PLL_DEBUG_CTL_REG)
#define hal_set_nco_pll_debug_ctl_reg(x) hal_set_register_field(NCO_PLL_DEBUG,NCO_PLL_DEBUG_CTL_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_DEBUG_CTL_REG NCO_PLL_DEBUG
#define FIELDS_MASKS_SHIFTED_NCO_PLL_DEBUG_CTL_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_DEBUG_CTL_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_DEBUG_CTL_REG NCO_PLL_DEBUG

 /* Field NCO_PLL_DEBUG_DEBUG_EN */
 /* Accessor macros */
#define hal_get_nco_pll_debug_debug_en() hal_get_register_field8(NCO_PLL_DEBUG,NCO_PLL_DEBUG_DEBUG_EN)
#define hal_set_nco_pll_debug_debug_en(x) hal_set_register_field(NCO_PLL_DEBUG,NCO_PLL_DEBUG_DEBUG_EN,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_DEBUG_DEBUG_EN NCO_PLL_DEBUG
#define FIELDS_MASKS_SHIFTED_NCO_PLL_DEBUG_DEBUG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_DEBUG_DEBUG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_DEBUG_DEBUG_EN NCO_PLL_DEBUG

 /* Field NCO_PLL_DEBUG_TEST_FREQ_REQ */
 /* Accessor macros */
#define hal_get_nco_pll_debug_test_freq_req() hal_get_register_field8(NCO_PLL_DEBUG,NCO_PLL_DEBUG_TEST_FREQ_REQ)
#define hal_set_nco_pll_debug_test_freq_req(x) hal_set_register_field(NCO_PLL_DEBUG,NCO_PLL_DEBUG_TEST_FREQ_REQ,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_DEBUG_TEST_FREQ_REQ NCO_PLL_DEBUG
#define FIELDS_MASKS_SHIFTED_NCO_PLL_DEBUG_TEST_FREQ_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_DEBUG_TEST_FREQ_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_DEBUG_TEST_FREQ_REQ NCO_PLL_DEBUG

 /* Field NCO_PLL_EN */
 /* Accessor macros */
#define hal_get_nco_pll_en() hal_get_register_field8(NCO_PLL_EN,NCO_PLL_EN)
#define hal_set_nco_pll_en(x) hal_set_register_field(NCO_PLL_EN,NCO_PLL_EN,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_EN NCO_PLL_EN
#define FIELDS_MASKS_SHIFTED_NCO_PLL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_EN NCO_PLL_EN

 /* Field NCO_PLL_FRAC_INC_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_frac_inc_reg() hal_get_register_field32(NCO_PLL_FRAC_INC_REG,NCO_PLL_FRAC_INC_REG)
#define hal_set_nco_pll_frac_inc_reg(x) hal_set_register_field(NCO_PLL_FRAC_INC_REG,NCO_PLL_FRAC_INC_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_FRAC_INC_REG NCO_PLL_FRAC_INC_REG
#define FIELDS_MASKS_SHIFTED_NCO_PLL_FRAC_INC_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_FRAC_INC_REG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_FRAC_INC_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_FRAC_INC_REG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_FRAC_INC_REG NCO_PLL_FRAC_INC_REG

 /* Field NCO_PLL_GAIN_INTEG_GAIN_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_gain_integ_gain_reg() hal_get_register_field8(NCO_PLL_GAIN,NCO_PLL_GAIN_INTEG_GAIN_REG)
#define hal_set_nco_pll_gain_integ_gain_reg(x) hal_set_register_field(NCO_PLL_GAIN,NCO_PLL_GAIN_INTEG_GAIN_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_GAIN_INTEG_GAIN_REG NCO_PLL_GAIN
#define FIELDS_MASKS_SHIFTED_NCO_PLL_GAIN_INTEG_GAIN_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_GAIN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_GAIN_INTEG_GAIN_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_GAIN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_GAIN_INTEG_GAIN_REG NCO_PLL_GAIN

 /* Field NCO_PLL_GAIN_PROP_GAIN_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_gain_prop_gain_reg() hal_get_register_field8(NCO_PLL_GAIN,NCO_PLL_GAIN_PROP_GAIN_REG)
#define hal_set_nco_pll_gain_prop_gain_reg(x) hal_set_register_field(NCO_PLL_GAIN,NCO_PLL_GAIN_PROP_GAIN_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_GAIN_PROP_GAIN_REG NCO_PLL_GAIN
#define FIELDS_MASKS_SHIFTED_NCO_PLL_GAIN_PROP_GAIN_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_GAIN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_GAIN_PROP_GAIN_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_GAIN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_GAIN_PROP_GAIN_REG NCO_PLL_GAIN

 /* Field NCO_PLL_INIT_ACC_VALUE_REG_LSB */
 /* Accessor macros */
#define hal_get_nco_pll_init_acc_value_reg() hal_get_register_field16(NCO_PLL_INIT_ACC_VALUE_REG,NCO_PLL_INIT_ACC_VALUE_REG)
#define hal_set_nco_pll_init_acc_value_reg(x) hal_set_register_field(NCO_PLL_INIT_ACC_VALUE_REG,NCO_PLL_INIT_ACC_VALUE_REG,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_INIT_ACC_VALUE_REG NCO_PLL_INIT_ACC_VALUE_REG
#define FIELDS_MASKS_SHIFTED_NCO_PLL_INIT_ACC_VALUE_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_INIT_ACC_VALUE_REG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_INIT_ACC_VALUE_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_INIT_ACC_VALUE_REG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_INIT_ACC_VALUE_REG NCO_PLL_INIT_ACC_VALUE_REG

 /* Field NCO_PLL_STATUS_CAL_BUSY */
 /* Accessor macros */
#define hal_get_nco_pll_status_cal_busy() hal_get_register_field8(NCO_PLL_STATUS,NCO_PLL_STATUS_CAL_BUSY)
 /* Workings */
#define TYPE_OF_NCO_PLL_STATUS_CAL_BUSY NCO_PLL_STATUS
#define FIELDS_MASKS_SHIFTED_NCO_PLL_STATUS_CAL_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_STATUS_CAL_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_STATUS_CAL_BUSY NCO_PLL_STATUS

 /* Field NCO_PLL_STATUS_FINE_TRIM_OUT_OF_RANGE */
 /* Accessor macros */
#define hal_get_nco_pll_status_fine_trim_out_of_range() hal_get_register_field8(NCO_PLL_STATUS,NCO_PLL_STATUS_FINE_TRIM_OUT_OF_RANGE)
 /* Workings */
#define TYPE_OF_NCO_PLL_STATUS_FINE_TRIM_OUT_OF_RANGE NCO_PLL_STATUS
#define FIELDS_MASKS_SHIFTED_NCO_PLL_STATUS_FINE_TRIM_OUT_OF_RANGE(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_STATUS_FINE_TRIM_OUT_OF_RANGE(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_STATUS_FINE_TRIM_OUT_OF_RANGE NCO_PLL_STATUS

 /* Field NCO_PLL_STATUS_PLL_LOCKED */
 /* Accessor macros */
#define hal_get_nco_pll_status_pll_locked() hal_get_register_field8(NCO_PLL_STATUS,NCO_PLL_STATUS_PLL_LOCKED)
 /* Workings */
#define TYPE_OF_NCO_PLL_STATUS_PLL_LOCKED NCO_PLL_STATUS
#define FIELDS_MASKS_SHIFTED_NCO_PLL_STATUS_PLL_LOCKED(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_STATUS_PLL_LOCKED(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_STATUS_PLL_LOCKED NCO_PLL_STATUS

 /* Field NCO_PLL_STATUS_TEST_FREQ_VALID */
 /* Accessor macros */
#define hal_get_nco_pll_status_test_freq_valid() hal_get_register_field8(NCO_PLL_STATUS,NCO_PLL_STATUS_TEST_FREQ_VALID)
 /* Workings */
#define TYPE_OF_NCO_PLL_STATUS_TEST_FREQ_VALID NCO_PLL_STATUS
#define FIELDS_MASKS_SHIFTED_NCO_PLL_STATUS_TEST_FREQ_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_STATUS_TEST_FREQ_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_STATUS_TEST_FREQ_VALID NCO_PLL_STATUS

 /* Field NCO_PLL_VCO_CTL_EN_FILT_LOWPASS_IN */
 /* Accessor macros */
#define hal_get_nco_pll_vco_ctl_en_filt_lowpass_in() hal_get_register_field8(NCO_PLL_VCO_CTL,NCO_PLL_VCO_CTL_EN_FILT_LOWPASS_IN)
#define hal_set_nco_pll_vco_ctl_en_filt_lowpass_in(x) hal_set_register_field(NCO_PLL_VCO_CTL,NCO_PLL_VCO_CTL_EN_FILT_LOWPASS_IN,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_VCO_CTL_EN_FILT_LOWPASS_IN NCO_PLL_VCO_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_VCO_CTL_EN_FILT_LOWPASS_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_VCO_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_VCO_CTL_EN_FILT_LOWPASS_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_VCO_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_VCO_CTL_EN_FILT_LOWPASS_IN NCO_PLL_VCO_CTL

 /* Field NCO_PLL_VCO_CTL_EN_IN */
 /* Accessor macros */
#define hal_get_nco_pll_vco_ctl_en_in() hal_get_register_field8(NCO_PLL_VCO_CTL,NCO_PLL_VCO_CTL_EN_IN)
#define hal_set_nco_pll_vco_ctl_en_in(x) hal_set_register_field(NCO_PLL_VCO_CTL,NCO_PLL_VCO_CTL_EN_IN,(x))
 /* Workings */
#define TYPE_OF_NCO_PLL_VCO_CTL_EN_IN NCO_PLL_VCO_CTL
#define FIELDS_MASKS_SHIFTED_NCO_PLL_VCO_CTL_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_VCO_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_VCO_CTL_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_VCO_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NCO_PLL_VCO_CTL_EN_IN NCO_PLL_VCO_CTL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ADPLL_ACCESS_CTRL_ADPLL_ACCESS_CTRL
#define CHECK_FIELD_TYPE_ADPLL_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_CLKGEN_CLK_SWITCH_CLKGEN_CLK_SWITCH
#define CHECK_FIELD_TYPE_CLKGEN_CLK_SWITCH_END
#define CHECK_FIELD_TYPE_CLKGEN_CLK_SWITCH_STATUS_CLKGEN_CLK_SWITCH_STATUS
#define CHECK_FIELD_TYPE_CLKGEN_CLK_SWITCH_STATUS_END
#define CHECK_FIELD_TYPE_NCO_PLL_ACC_VALUE_NCO_PLL_ACC_VALUE
#define CHECK_FIELD_TYPE_NCO_PLL_ACC_VALUE_END
#define CHECK_FIELD_TYPE_NCO_PLL_CLK_VCO_COUNT_DELTA_NCO_PLL_CLK_VCO_COUNT_DELTA
#define CHECK_FIELD_TYPE_NCO_PLL_CLK_VCO_COUNT_DELTA_END
#define CHECK_FIELD_TYPE_NCO_PLL_COARSE_TRIM_NCO_PLL_COARSE_TRIM
#define CHECK_FIELD_TYPE_NCO_PLL_COARSE_TRIM_END
#define CHECK_FIELD_TYPE_NCO_PLL_COARSE_TRIM_REG_NCO_PLL_COARSE_TRIM_REG
#define CHECK_FIELD_TYPE_NCO_PLL_COARSE_TRIM_REG_END
#define CHECK_FIELD_TYPE_NCO_PLL_CTL_NCO_PLL_CTL
#define CHECK_FIELD_TYPE_NCO_PLL_CTL_END
#define CHECK_FIELD_TYPE_NCO_PLL_DEBUG_NCO_PLL_DEBUG
#define CHECK_FIELD_TYPE_NCO_PLL_DEBUG_END
#define CHECK_FIELD_TYPE_NCO_PLL_EN_NCO_PLL_EN
#define CHECK_FIELD_TYPE_NCO_PLL_EN_END
#define CHECK_FIELD_TYPE_NCO_PLL_FRAC_INC_REG_NCO_PLL_FRAC_INC_REG
#define CHECK_FIELD_TYPE_NCO_PLL_FRAC_INC_REG_END
#define CHECK_FIELD_TYPE_NCO_PLL_GAIN_NCO_PLL_GAIN
#define CHECK_FIELD_TYPE_NCO_PLL_GAIN_END
#define CHECK_FIELD_TYPE_NCO_PLL_INIT_ACC_VALUE_REG_NCO_PLL_INIT_ACC_VALUE_REG
#define CHECK_FIELD_TYPE_NCO_PLL_INIT_ACC_VALUE_REG_END
#define CHECK_FIELD_TYPE_NCO_PLL_STATUS_NCO_PLL_STATUS
#define CHECK_FIELD_TYPE_NCO_PLL_STATUS_END
#define CHECK_FIELD_TYPE_NCO_PLL_VCO_CTL_NCO_PLL_VCO_CTL
#define CHECK_FIELD_TYPE_NCO_PLL_VCO_CTL_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_ADPLL_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ADPLL_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(ADPLL_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_CLKGEN_CLK_SWITCH_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CLK_SWITCH_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CLK_SWITCH_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_NCO_PLL_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_NCO_PLL_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_NCO_PLL_GAIN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_GAIN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_GAIN(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_GAIN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_NCO_PLL_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_NCO_PLL_VCO_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_VCO_CTL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NCO_PLL_VCO_CTL(next, val, rest) \
   (CHECK_FIELD_TYPE(NCO_PLL_VCO_CTL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define ADPLL_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_adpll_access_ctrl(x) hal_set_register(ADPLL_ACCESS_CTRL, x, 1)
#define hal_get_reg_adpll_access_ctrl() hal_get_register(ADPLL_ACCESS_CTRL, 1)
#define ADPLL_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_adpll_mutex_lock(x) hal_set_register(ADPLL_MUTEX_LOCK, x, 1)
#define hal_get_reg_adpll_mutex_lock() hal_get_register(ADPLL_MUTEX_LOCK, 1)
#define CLKGEN_CLK_SWITCH_REG_BITS (15u)
#define hal_set_reg_clkgen_clk_switch(x) hal_set_register(CLKGEN_CLK_SWITCH, x, 1)
#define hal_get_reg_clkgen_clk_switch() hal_get_register(CLKGEN_CLK_SWITCH, 1)
#define CLKGEN_CLK_SWITCH_STATUS_REG_BITS (2u)
#define hal_get_reg_clkgen_clk_switch_status() hal_get_register(CLKGEN_CLK_SWITCH_STATUS, 1)
#define NCO_PLL_ACC_VALUE_REG_BITS (16u)
#define hal_get_reg_nco_pll_acc_value() hal_get_register(NCO_PLL_ACC_VALUE, 1)
#define NCO_PLL_CLK_VCO_COUNT_DELTA_REG_BITS (16u)
#define hal_get_reg_nco_pll_clk_vco_count_delta() hal_get_register(NCO_PLL_CLK_VCO_COUNT_DELTA, 1)
#define NCO_PLL_COARSE_TRIM_REG_BITS (7u)
#define hal_get_reg_nco_pll_coarse_trim() hal_get_register(NCO_PLL_COARSE_TRIM, 1)
#define NCO_PLL_COARSE_TRIM_REG_REG_BITS (7u)
#define hal_set_reg_nco_pll_coarse_trim_reg(x) hal_set_register(NCO_PLL_COARSE_TRIM_REG, x, 1)
#define hal_get_reg_nco_pll_coarse_trim_reg() hal_get_register(NCO_PLL_COARSE_TRIM_REG, 1)
#define NCO_PLL_CTL_REG_BITS (11u)
#define hal_set_reg_nco_pll_ctl(x) hal_set_register(NCO_PLL_CTL, x, 1)
#define hal_get_reg_nco_pll_ctl() hal_get_register(NCO_PLL_CTL, 1)
#define NCO_PLL_DEBUG_REG_BITS (7u)
#define hal_set_reg_nco_pll_debug(x) hal_set_register(NCO_PLL_DEBUG, x, 1)
#define hal_get_reg_nco_pll_debug() hal_get_register(NCO_PLL_DEBUG, 1)
#define NCO_PLL_EN_REG_BITS (1u)
#define hal_set_reg_nco_pll_en(x) hal_set_register(NCO_PLL_EN, x, 1)
#define hal_get_reg_nco_pll_en() hal_get_register(NCO_PLL_EN, 1)
#define NCO_PLL_FRAC_INC_REG_REG_BITS (24u)
#define hal_set_reg_nco_pll_frac_inc_reg(x) hal_set_register(NCO_PLL_FRAC_INC_REG, x, 1)
#define hal_get_reg_nco_pll_frac_inc_reg() hal_get_register(NCO_PLL_FRAC_INC_REG, 1)
#define NCO_PLL_GAIN_REG_BITS (7u)
#define hal_set_reg_nco_pll_gain(x) hal_set_register(NCO_PLL_GAIN, x, 1)
#define hal_get_reg_nco_pll_gain() hal_get_register(NCO_PLL_GAIN, 1)
#define NCO_PLL_INIT_ACC_VALUE_REG_REG_BITS (16u)
#define hal_set_reg_nco_pll_init_acc_value_reg(x) hal_set_register(NCO_PLL_INIT_ACC_VALUE_REG, x, 1)
#define hal_get_reg_nco_pll_init_acc_value_reg() hal_get_register(NCO_PLL_INIT_ACC_VALUE_REG, 1)
#define NCO_PLL_STATUS_REG_BITS (4u)
#define hal_get_reg_nco_pll_status() hal_get_register(NCO_PLL_STATUS, 1)
#define NCO_PLL_VCO_CTL_REG_BITS (2u)
#define hal_set_reg_nco_pll_vco_ctl(x) hal_set_register(NCO_PLL_VCO_CTL, x, 1)
#define hal_get_reg_nco_pll_vco_ctl() hal_get_register(NCO_PLL_VCO_CTL, 1)

 /* Workings */
#define SETTER_FOR_ADPLL_ACCESS_CTRL hal_set_reg_adpll_access_ctrl
#define GETTER_FOR_ADPLL_ACCESS_CTRL hal_get_reg_adpll_access_ctrl
#define SETTER_FOR_ADPLL_MUTEX_LOCK hal_set_reg_adpll_mutex_lock
#define GETTER_FOR_ADPLL_MUTEX_LOCK hal_get_reg_adpll_mutex_lock
#define SETTER_FOR_CLKGEN_CLK_SWITCH hal_set_reg_clkgen_clk_switch
#define GETTER_FOR_CLKGEN_CLK_SWITCH hal_get_reg_clkgen_clk_switch
#define GETTER_FOR_CLKGEN_CLK_SWITCH_STATUS hal_get_reg_clkgen_clk_switch_status
#define GETTER_FOR_NCO_PLL_ACC_VALUE hal_get_reg_nco_pll_acc_value
#define GETTER_FOR_NCO_PLL_CLK_VCO_COUNT_DELTA hal_get_reg_nco_pll_clk_vco_count_delta
#define GETTER_FOR_NCO_PLL_COARSE_TRIM hal_get_reg_nco_pll_coarse_trim
#define SETTER_FOR_NCO_PLL_COARSE_TRIM_REG hal_set_reg_nco_pll_coarse_trim_reg
#define GETTER_FOR_NCO_PLL_COARSE_TRIM_REG hal_get_reg_nco_pll_coarse_trim_reg
#define SETTER_FOR_NCO_PLL_CTL hal_set_reg_nco_pll_ctl
#define GETTER_FOR_NCO_PLL_CTL hal_get_reg_nco_pll_ctl
#define SETTER_FOR_NCO_PLL_DEBUG hal_set_reg_nco_pll_debug
#define GETTER_FOR_NCO_PLL_DEBUG hal_get_reg_nco_pll_debug
#define SETTER_FOR_NCO_PLL_EN hal_set_reg_nco_pll_en
#define GETTER_FOR_NCO_PLL_EN hal_get_reg_nco_pll_en
#define SETTER_FOR_NCO_PLL_FRAC_INC_REG hal_set_reg_nco_pll_frac_inc_reg
#define GETTER_FOR_NCO_PLL_FRAC_INC_REG hal_get_reg_nco_pll_frac_inc_reg
#define SETTER_FOR_NCO_PLL_GAIN hal_set_reg_nco_pll_gain
#define GETTER_FOR_NCO_PLL_GAIN hal_get_reg_nco_pll_gain
#define SETTER_FOR_NCO_PLL_INIT_ACC_VALUE_REG hal_set_reg_nco_pll_init_acc_value_reg
#define GETTER_FOR_NCO_PLL_INIT_ACC_VALUE_REG hal_get_reg_nco_pll_init_acc_value_reg
#define GETTER_FOR_NCO_PLL_STATUS hal_get_reg_nco_pll_status
#define SETTER_FOR_NCO_PLL_VCO_CTL hal_set_reg_nco_pll_vco_ctl
#define GETTER_FOR_NCO_PLL_VCO_CTL hal_get_reg_nco_pll_vco_ctl

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_AUDIO_SYS_ADPLL) */
#endif /* __HAL_MACROS_H__MODULE_AUDIO_SYS_ADPLL */








#ifndef __HAL_MACROS_H__MODULE_K32_MISC
#define __HAL_MACROS_H__MODULE_K32_MISC

/* -- Kalimba 32-bit Misc Control registers -- */

 /* Field ALLOW_GOTO_SHALLOW_SLEEP */
 /* Accessor macros */
#define hal_get_allow_goto_shallow_sleep() hal_get_register_field8(ALLOW_GOTO_SHALLOW_SLEEP,ALLOW_GOTO_SHALLOW_SLEEP)
#define hal_set_allow_goto_shallow_sleep(x) hal_set_register_field(ALLOW_GOTO_SHALLOW_SLEEP,ALLOW_GOTO_SHALLOW_SLEEP,(x))
 /* Workings */
#define TYPE_OF_ALLOW_GOTO_SHALLOW_SLEEP ALLOW_GOTO_SHALLOW_SLEEP
#define FIELDS_MASKS_SHIFTED_ALLOW_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(ALLOW_GOTO_SHALLOW_SLEEP, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ALLOW_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(ALLOW_GOTO_SHALLOW_SLEEP, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP ALLOW_GOTO_SHALLOW_SLEEP

 /* Field CLOCK_CONT_SHALLOW_SLEEP_RATE_LSB */
 /* Accessor macros */
#define hal_get_clock_cont_shallow_sleep_rate() hal_get_register_field8(CLOCK_CONT_SHALLOW_SLEEP_RATE,CLOCK_CONT_SHALLOW_SLEEP_RATE)
#define hal_set_clock_cont_shallow_sleep_rate(x) hal_set_register_field(CLOCK_CONT_SHALLOW_SLEEP_RATE,CLOCK_CONT_SHALLOW_SLEEP_RATE,(x))
 /* Workings */
#define TYPE_OF_CLOCK_CONT_SHALLOW_SLEEP_RATE CLOCK_CONT_SHALLOW_SLEEP_RATE
#define FIELDS_MASKS_SHIFTED_CLOCK_CONT_SHALLOW_SLEEP_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_CONT_SHALLOW_SLEEP_RATE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLOCK_CONT_SHALLOW_SLEEP_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_CONT_SHALLOW_SLEEP_RATE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE CLOCK_CONT_SHALLOW_SLEEP_RATE

 /* Field CLOCK_STOP_WIND_DOWN_SEQUENCE_EN */
 /* Accessor macros */
#define hal_get_clock_stop_wind_down_sequence_en() hal_get_register_field8(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,CLOCK_STOP_WIND_DOWN_SEQUENCE_EN)
#define hal_set_clock_stop_wind_down_sequence_en(x) hal_set_register_field(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,(x))
 /* Workings */
#define TYPE_OF_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN CLOCK_STOP_WIND_DOWN_SEQUENCE_EN
#define FIELDS_MASKS_SHIFTED_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN CLOCK_STOP_WIND_DOWN_SEQUENCE_EN

 /* Field DISABLE_MUTEX_AND_ACCESS_IMMUNITY */
 /* Accessor macros */
#define hal_get_disable_mutex_and_access_immunity() hal_get_register_field8(DISABLE_MUTEX_AND_ACCESS_IMMUNITY,DISABLE_MUTEX_AND_ACCESS_IMMUNITY)
#define hal_set_disable_mutex_and_access_immunity(x) hal_set_register_field(DISABLE_MUTEX_AND_ACCESS_IMMUNITY,DISABLE_MUTEX_AND_ACCESS_IMMUNITY,(x))
 /* Workings */
#define TYPE_OF_DISABLE_MUTEX_AND_ACCESS_IMMUNITY DISABLE_MUTEX_AND_ACCESS_IMMUNITY
#define FIELDS_MASKS_SHIFTED_DISABLE_MUTEX_AND_ACCESS_IMMUNITY(next, val, rest) \
   (CHECK_FIELD_TYPE(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_MUTEX_AND_ACCESS_IMMUNITY(next, val, rest) \
   (CHECK_FIELD_TYPE(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY DISABLE_MUTEX_AND_ACCESS_IMMUNITY

 /* Field GOTO_SHALLOW_SLEEP */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_GOTO_SHALLOW_SLEEP GOTO_SHALLOW_SLEEP
#define FIELDS_MASKS_SHIFTED_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(GOTO_SHALLOW_SLEEP, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(GOTO_SHALLOW_SLEEP, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_GOTO_SHALLOW_SLEEP GOTO_SHALLOW_SLEEP

 /* Field PMWIN_ENABLE */
 /* Accessor macros */
#define hal_get_pmwin_enable() hal_get_register_field8(PMWIN_ENABLE,PMWIN_ENABLE)
#define hal_set_pmwin_enable(x) hal_set_register_field(PMWIN_ENABLE,PMWIN_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PMWIN_ENABLE PMWIN_ENABLE
#define FIELDS_MASKS_SHIFTED_PMWIN_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PMWIN_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PMWIN_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PMWIN_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PMWIN_ENABLE PMWIN_ENABLE

 /* Field PROCESSOR_ID */
 /* Accessor macros */
#define hal_get_processor_id() hal_get_register_field8(PROCESSOR_ID,PROCESSOR_ID)
 /* Workings */
#define TYPE_OF_PROCESSOR_ID PROCESSOR_ID
#define FIELDS_MASKS_SHIFTED_PROCESSOR_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(PROCESSOR_ID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROCESSOR_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(PROCESSOR_ID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PROCESSOR_ID PROCESSOR_ID

 /* Field PROC_DEEP_SLEEP_EN */
 /* Accessor macros */
#define hal_get_proc_deep_sleep_en() hal_get_register_field8(PROC_DEEP_SLEEP_EN,PROC_DEEP_SLEEP_EN)
#define hal_set_proc_deep_sleep_en(x) hal_set_register_field(PROC_DEEP_SLEEP_EN,PROC_DEEP_SLEEP_EN,(x))
 /* Workings */
#define TYPE_OF_PROC_DEEP_SLEEP_EN PROC_DEEP_SLEEP_EN
#define FIELDS_MASKS_SHIFTED_PROC_DEEP_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PROC_DEEP_SLEEP_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROC_DEEP_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PROC_DEEP_SLEEP_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PROC_DEEP_SLEEP_EN PROC_DEEP_SLEEP_EN

 /* Field SHALLOW_SLEEP_STATUS */
 /* Accessor macros */
#define hal_get_shallow_sleep_status() hal_get_register_field8(SHALLOW_SLEEP_STATUS,SHALLOW_SLEEP_STATUS)
 /* Workings */
#define TYPE_OF_SHALLOW_SLEEP_STATUS SHALLOW_SLEEP_STATUS
#define FIELDS_MASKS_SHIFTED_SHALLOW_SLEEP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SHALLOW_SLEEP_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SHALLOW_SLEEP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SHALLOW_SLEEP_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SHALLOW_SLEEP_STATUS SHALLOW_SLEEP_STATUS

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ALLOW_GOTO_SHALLOW_SLEEP_ALLOW_GOTO_SHALLOW_SLEEP
#define CHECK_FIELD_TYPE_ALLOW_GOTO_SHALLOW_SLEEP_END
#define CHECK_FIELD_TYPE_CLOCK_CONT_SHALLOW_SLEEP_RATE_CLOCK_CONT_SHALLOW_SLEEP_RATE
#define CHECK_FIELD_TYPE_CLOCK_CONT_SHALLOW_SLEEP_RATE_END
#define CHECK_FIELD_TYPE_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN
#define CHECK_FIELD_TYPE_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_END
#define CHECK_FIELD_TYPE_DISABLE_MUTEX_AND_ACCESS_IMMUNITY_DISABLE_MUTEX_AND_ACCESS_IMMUNITY
#define CHECK_FIELD_TYPE_DISABLE_MUTEX_AND_ACCESS_IMMUNITY_END
#define CHECK_FIELD_TYPE_GOTO_SHALLOW_SLEEP_GOTO_SHALLOW_SLEEP
#define CHECK_FIELD_TYPE_GOTO_SHALLOW_SLEEP_END
#define CHECK_FIELD_TYPE_PMWIN_ENABLE_PMWIN_ENABLE
#define CHECK_FIELD_TYPE_PMWIN_ENABLE_END
#define CHECK_FIELD_TYPE_PROCESSOR_ID_PROCESSOR_ID
#define CHECK_FIELD_TYPE_PROCESSOR_ID_END
#define CHECK_FIELD_TYPE_PROC_DEEP_SLEEP_EN_PROC_DEEP_SLEEP_EN
#define CHECK_FIELD_TYPE_PROC_DEEP_SLEEP_EN_END
#define CHECK_FIELD_TYPE_SHALLOW_SLEEP_STATUS_SHALLOW_SLEEP_STATUS
#define CHECK_FIELD_TYPE_SHALLOW_SLEEP_STATUS_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define ALLOW_GOTO_SHALLOW_SLEEP_REG_BITS (1u)
#define hal_set_reg_allow_goto_shallow_sleep(x) hal_set_register(ALLOW_GOTO_SHALLOW_SLEEP, x, 1)
#define hal_get_reg_allow_goto_shallow_sleep() hal_get_register(ALLOW_GOTO_SHALLOW_SLEEP, 1)
#define CLOCK_CONT_SHALLOW_SLEEP_RATE_REG_BITS (8u)
#define hal_set_reg_clock_cont_shallow_sleep_rate(x) hal_set_register(CLOCK_CONT_SHALLOW_SLEEP_RATE, x, 1)
#define hal_get_reg_clock_cont_shallow_sleep_rate() hal_get_register(CLOCK_CONT_SHALLOW_SLEEP_RATE, 1)
#define CLOCK_DIVIDE_RATE_REG_BITS (2u)
#define hal_set_reg_clock_divide_rate(x) hal_set_register(CLOCK_DIVIDE_RATE, x, 1)
#define hal_get_reg_clock_divide_rate() hal_get_register(CLOCK_DIVIDE_RATE, 1)
#define CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_REG_BITS (1u)
#define hal_set_reg_clock_stop_wind_down_sequence_en(x) hal_set_register(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, x, 1)
#define hal_get_reg_clock_stop_wind_down_sequence_en() hal_get_register(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, 1)
#define DISABLE_MUTEX_AND_ACCESS_IMMUNITY_REG_BITS (1u)
#define hal_set_reg_disable_mutex_and_access_immunity(x) hal_set_register(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, x, 1)
#define hal_get_reg_disable_mutex_and_access_immunity() hal_get_register(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, 1)
#define GOTO_SHALLOW_SLEEP_REG_BITS (1u)
#define hal_set_reg_goto_shallow_sleep(x) hal_set_register(GOTO_SHALLOW_SLEEP, x, 1)
#define PMWIN_ENABLE_REG_BITS (1u)
#define hal_set_reg_pmwin_enable(x) hal_set_register(PMWIN_ENABLE, x, 1)
#define hal_get_reg_pmwin_enable() hal_get_register(PMWIN_ENABLE, 1)
#define PROCESSOR_ID_REG_BITS (1u)
#define hal_get_reg_processor_id() hal_get_register(PROCESSOR_ID, 1)
#define PROC_DEEP_SLEEP_EN_REG_BITS (1u)
#define hal_set_reg_proc_deep_sleep_en(x) hal_set_register(PROC_DEEP_SLEEP_EN, x, 1)
#define hal_get_reg_proc_deep_sleep_en() hal_get_register(PROC_DEEP_SLEEP_EN, 1)
#define SHALLOW_SLEEP_STATUS_REG_BITS (1u)
#define hal_get_reg_shallow_sleep_status() hal_get_register(SHALLOW_SLEEP_STATUS, 1)

 /* Workings */
#define SETTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP hal_set_reg_allow_goto_shallow_sleep
#define GETTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP hal_get_reg_allow_goto_shallow_sleep
#define SETTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE hal_set_reg_clock_cont_shallow_sleep_rate
#define GETTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE hal_get_reg_clock_cont_shallow_sleep_rate
#define SETTER_FOR_CLOCK_DIVIDE_RATE hal_set_reg_clock_divide_rate
#define GETTER_FOR_CLOCK_DIVIDE_RATE hal_get_reg_clock_divide_rate
#define SETTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN hal_set_reg_clock_stop_wind_down_sequence_en
#define GETTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN hal_get_reg_clock_stop_wind_down_sequence_en
#define SETTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY hal_set_reg_disable_mutex_and_access_immunity
#define GETTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY hal_get_reg_disable_mutex_and_access_immunity
#define SETTER_FOR_GOTO_SHALLOW_SLEEP hal_set_reg_goto_shallow_sleep
#define SETTER_FOR_PMWIN_ENABLE hal_set_reg_pmwin_enable
#define GETTER_FOR_PMWIN_ENABLE hal_get_reg_pmwin_enable
#define GETTER_FOR_PROCESSOR_ID hal_get_reg_processor_id
#define SETTER_FOR_PROC_DEEP_SLEEP_EN hal_set_reg_proc_deep_sleep_en
#define GETTER_FOR_PROC_DEEP_SLEEP_EN hal_get_reg_proc_deep_sleep_en
#define GETTER_FOR_SHALLOW_SLEEP_STATUS hal_get_reg_shallow_sleep_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MISC) */


/* -- Banked register macros -- */










































































































/* -- Banked register field macros -- */

























































































































































