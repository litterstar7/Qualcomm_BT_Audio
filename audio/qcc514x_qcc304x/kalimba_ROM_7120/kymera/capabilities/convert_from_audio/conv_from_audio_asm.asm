/****************************************************************************
 * Copyright (c) 2018 Qualcomm Technologies International, Ltd.
 ****************************************************************************/

#include "conv_from_audio_struct_asm_defs.h"     /* autogenerated from C header */

// *****************************************************************************
// MODULE:
//    conv_from_audio_frame_process
//
// DESCRIPTION:
//    asm stub to avoid encoder_encode() assumption that every encoder
//       is written in asm and need op_data in r5
//  r0 = first run (false if second run)
//
// *****************************************************************************
.MODULE $M.audio_convert.asm_stub;
   .CODESEGMENT PM_FLASH;

$_conv_from_audio_frame_process_asm:

    push rLink;
    push r0;

    r0 = r5;
    call $_conv_from_audio_frame_process;

    pop r0;
    if Z jump second_time;
        //first_time:
        r0 = Null;      // $codec.SUCCESS
    set_mode_ret_val:
        // could still be "nothing produced", anyway, no point going back...
        r1 = M[r5 + $codec.ENCODER_DATA_OBJECT_FIELD];
        // get samples_to_convert asm version
        r1 = M[r1 + $conv_from_audio_struct.conv_from_audio_codec_struct.SAMPLES_TO_CONVERT_FIELD];
        if Z r0 = 1;   // ... so get out if Z, but nothing produced, lsb counts only (encoder_encode hack)
        M[r5 + $codec.ENCODER_MODE_FIELD] = r0; // first time "SUCCESS", second time NOT

    pop rLink;
    rts;

    second_time:
        r0 = 2; // must be non-zero but not odd (result output_produced),
                // in order to come out of encoder_encode()
        jump set_mode_ret_val;

.ENDMODULE;
