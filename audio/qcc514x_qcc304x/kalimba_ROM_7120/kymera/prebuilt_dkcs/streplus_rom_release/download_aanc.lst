
/home/svc-audio-dspsw/kymera_builds/builds/2020/kymera_2008181118/kalimba/kymera/tools/KCSMaker/out/7120/streplus_rom_release/download/debugbin/download_aanc.elf:     file format elf32-littlekalimba

Disassembly of section .text_minim:

84200674 <$_aanc_create>:
Capability API Handlers
*/

bool aanc_create(OPERATOR_DATA *op_data, void *message_data,
                 unsigned *response_id, void **resp_data)
{
84200674:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200676:	17 00       	r5 = r0 + Null;
84200678:	19 09       	r7 = r1 + Null;
8420067a:	20 09       	r6 = r2 + Null;
8420067c:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420067e:	ef fd ff ff 	call (m) 0x4e6;
84200682:	29 e3 
84200684:	16 00       	r4 = r0 + Null;

    /* NB: create is passed a zero-initialized structure so any fields not
     * explicitly initialized are 0.
     */

    L5_DBG_MSG1("AANC Create: p_ext_data at 0x%08X", p_ext_data);
84200686:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420068a:	48 25       	Null = rMAC - 5;
8420068c:	08 68       	if LT jump (m) Lc_aanc_create_3;

8420068e <Lc_aanc_create_2>:
8420068e:	55 f1 02 f0 	r0 = Null + 357564810;
84200692:	8a 41 
84200694:	33 00       	r1 = r4 + Null;
84200696:	ff fd 03 f0 	call (m) 0xcde;
8420069a:	29 e2 

8420069c <Lc_aanc_create_3>:

    int i;
    unsigned *p_default_params = NULL; /* Pointer to default params */
    unsigned *p_cap_params = NULL;     /* Pointer to capability params */

    if (!base_op_create(op_data, message_data, response_id, resp_data))
8420069c:	55 08       	r3 = r8 + Null;
8420069e:	44 08       	r2 = r6 + Null;
842006a0:	4b 08       	r1 = r7 + Null;
842006a2:	3a 00       	r0 = r5 + Null;
842006a4:	ef fd fe ff 	call (m) 0x35a;
842006a8:	37 e5 
842006aa:	10 04       	Null = r0 - Null;
842006ac:	03 62       	if NE jump (m) Lc_aanc_create_5;

842006ae <Lc_aanc_create_4>:
    {
        return FALSE;
842006ae:	02 00       	r0 = Null + Null;
842006b0:	77 6e       	jump (m) Lc_aanc_create_21;

842006b2 <Lc_aanc_create_5>:
 * \param  response_data Pointer to the pointer to message that is allocated in the function.
 * \param  new_status  A status ID that is to be sent in the message.
 */
inline static void base_op_change_response_status(void **response_data, STATUS_KYMERA new_status)
{
    (((OP_STD_RSP *)(*response_data))->status = new_status);
842006b2:	01 f0 00 60 	rMAC = Null + 4096;
842006b6:	a2 f0 00 e8 	r0 = M[r8 + Null];
842006ba:	51 8e       	M[r0 + 4] = rMAC;
842006bc:	31 00       	rMAC = r4 + Null;
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842006be:	24 71       	r10 = Null + 4;
842006c0:	03 4c       	do (m) Lc__loop0;

842006c2 <Lc_aanc_create_6>:
    {
        p_ext_data->inputs[i] = NULL;
842006c2:	08 ee       	M[rMAC + Null] = Null;
842006c4:	09 21       	rMAC = rMAC + 4;

842006c6 <Lc__loop0>:
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842006c6:	31 28       	rMAC = r4 + 16;
    {
        p_ext_data->inputs[i] = NULL;
    }
    for (i = 0; i < AANC_MAX_SOURCES; i++)
842006c8:	24 71       	r10 = Null + 4;
842006ca:	03 4c       	do (m) Lc__loop1;

842006cc <Lc_aanc_create_8>:
    {
        p_ext_data->outputs[i] = NULL;
842006cc:	08 ee       	M[rMAC + Null] = Null;
842006ce:	09 21       	rMAC = rMAC + 4;

842006d0 <Lc__loop1>:
    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
    {
        p_ext_data->inputs[i] = NULL;
    }
    for (i = 0; i < AANC_MAX_SOURCES; i++)
842006d0:	31 30       	rMAC = r4 + 32;
    {
        p_ext_data->outputs[i] = NULL;
    }

    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842006d2:	14 71       	r10 = Null + 2;
842006d4:	04 4c       	do (m) Lc__loop2;

842006d6 <Lc_aanc_create_10>:
    {
        p_ext_data->metadata_ip[i] = NULL;
842006d6:	08 ee       	M[rMAC + Null] = Null;
        p_ext_data->metadata_op[i] = NULL;
842006d8:	88 8e       	M[rMAC + 8] = Null;
842006da:	09 21       	rMAC = rMAC + 4;

842006dc <Lc__loop2>:
    for (i = 0; i < AANC_MAX_SOURCES; i++)
    {
        p_ext_data->outputs[i] = NULL;
    }

    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842006dc:	3a 00       	r0 = r5 + Null;
842006de:	ef fd ff ff 	call (m) 0x4ea;
842006e2:	2d e0 
842006e4:	b2 9f       	M[r4 + 56] = r0;
        p_ext_data->metadata_op[i] = NULL;
    }

    /* Initialize capid and sample rate fields */
    p_ext_data->cap_id = base_op_get_cap_id(op_data);
    if (p_ext_data->cap_id == AANC_MONO_32K_CAP_ID)
842006e6:	01 f0 20 f0 	Null = r0 - 16544;
842006ea:	a0 24 
842006ec:	0d 62       	if NE jump (m) Lc_aanc_create_15;

842006ee <Lc_aanc_create_12>:
    {
        /* 32kHz is currently unsupported. */
        L1_DBG_MSG("AANC 32kHz not unsupported");
842006ee:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842006f2:	08 24       	Null = rMAC - 0;
842006f4:	07 6c       	if LE jump (m) Lc_aanc_create_14;

842006f6 <Lc_aanc_create_13>:
842006f6:	55 f1 02 f0 	r0 = Null + 357564844;
842006fa:	ac 41 
842006fc:	ff fd 02 f0 	call (m) 0xccc;
84200700:	31 ee 

84200702 <Lc_aanc_create_14>:
    p_default_params = (unsigned*) AANC_GetDefaults(p_ext_data->cap_id);
    p_cap_params = (unsigned*) &p_ext_data->aanc_cap_params;
    if(!cpsInitParameters(&p_ext_data->params_def, p_default_params,
                          p_cap_params, sizeof(AANC_PARAMETERS)))
    {
       return TRUE;
84200702:	42 20       	r0 = Null + 1;
84200704:	4d 6e       	jump (m) Lc_aanc_create_21;

84200706 <Lc_aanc_create_15>:
        L1_DBG_MSG("AANC 32kHz not unsupported");
        return TRUE;
    }
    else
    {
        p_ext_data->sample_rate = 16000;
84200706:	11 f0 80 7a 	rMAC = Null + 16000;
8420070a:	71 9f       	M[r4 + 52] = rMAC;
    }

    /* Initialize parameters */
    p_default_params = (unsigned*) AANC_GetDefaults(p_ext_data->cap_id);
8420070c:	0a f0 3b ef 	call (m) $_AANC_GetDefaults;
84200710:	13 00       	r1 = r0 + Null;
    p_cap_params = (unsigned*) &p_ext_data->aanc_cap_params;
84200712:	34 3b       	r2 = r4 + 60;
    if(!cpsInitParameters(&p_ext_data->params_def, p_default_params,
                          p_cap_params, sizeof(AANC_PARAMETERS)))
84200714:	05 f0 40 41 	r3 = Null + 320;
84200718:	62 f0 ec 21 	r0 = r4 + 492;
8420071c:	ff fd 00 f0 	call (m) 0x742;
84200720:	27 e1 
84200722:	10 04       	Null = r0 - Null;
84200724:	ef 61       	if EQ jump (m) Lc_aanc_create_14;

84200726 <Lc_aanc_create_16>:
    {
       return TRUE;
    }

    /* Initialize system mode */
    p_ext_data->cur_mode = AANC_SYSMODE_FULL;
84200726:	81 20       	rMAC = Null + 2;
84200728:	61 f0 5f 8e 	M[r4 + 380] = rMAC;
    p_ext_data->host_mode = AANC_SYSMODE_FULL;
8420072c:	61 f0 60 8e 	M[r4 + 384] = rMAC;
    p_ext_data->qact_mode = AANC_SYSMODE_FULL;
84200730:	61 f0 61 8e 	M[r4 + 388] = rMAC;

    /* Trigger re-initialization at start */
    p_ext_data->re_init_flag = TRUE;
84200734:	41 20       	rMAC = Null + 1;
84200736:	61 f0 76 8e 	M[r4 + 472] = rMAC;
    p_ext_data->re_init_hard = TRUE;
8420073a:	61 f0 77 8e 	M[r4 + 476] = rMAC;

    if (!aanc_proc_create(&p_ext_data->ag, p_ext_data->sample_rate))
8420073e:	73 99       	r1 = M[r4 + 52];
84200740:	62 f0 a8 21 	r0 = r4 + 424;
84200744:	0a f0 2f ef 	call (m) $_aanc_proc_create;
84200748:	10 04       	Null = r0 - Null;
8420074a:	0c 62       	if NE jump (m) Lc_aanc_create_19;

8420074c <Lc_aanc_create_17>:
    {
        L4_DBG_MSG("Failed to create AG data");
8420074c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200750:	08 25       	Null = rMAC - 4;
84200752:	d8 69       	if LT jump (m) Lc_aanc_create_14;

84200754 <Lc_aanc_create_18>:
84200754:	55 f1 02 f0 	r0 = Null + 357564871;
84200758:	c7 41 
8420075a:	ff fd 02 f0 	call (m) 0xccc;
8420075e:	33 eb 
84200760:	d1 6f       	jump (m) Lc_aanc_create_14;

84200762 <Lc_aanc_create_19>:
        return TRUE;
    }

    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC0_ID;
84200762:	41 20       	rMAC = Null + 1;
84200764:	61 f0 d0 8b 	MB[r4 + 464] = rMAC;
    /* Default to hybrid: ff path is FFB, fb path is FFA */
    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFB_ID;
84200768:	82 20       	r0 = Null + 2;
8420076a:	62 f0 d1 8b 	MB[r4 + 465] = r0;
    p_ext_data->anc_fb_path = AANC_ANC_PATH_FFA_ID;
8420076e:	61 f0 d2 8b 	MB[r4 + 466] = rMAC;
    p_ext_data->anc_clock_check_value = AANC_HYBRID_ENABLE;
84200772:	c1 23       	rMAC = Null + 15;
84200774:	61 f0 ea 8c 	MH[r4 + 468] = rMAC;

#ifdef USE_AANC_LICENSING
    p_ext_data->license_status = AANC_LICENSE_STATUS_LICENSING_BUILD_STATUS;
84200778:	00 f1 01 f0 	rMAC = Null + 268435456;
8420077c:	00 40 
8420077e:	61 f0 7a 8e 	M[r4 + 488] = rMAC;
84200782:	a1 f0 00 e8 	rMAC = M[r8 + Null];
84200786:	48 8e       	M[rMAC + 4] = Null;
#endif

    /* Operator creation was succesful, change respone to STATUS_OK*/
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("AANC: Created");
84200788:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420078c:	08 25       	Null = rMAC - 4;
8420078e:	ba 69       	if LT jump (m) Lc_aanc_create_14;

84200790 <Lc_aanc_create_20>:
84200790:	55 f1 02 f0 	r0 = Null + 357564896;
84200794:	e0 41 
84200796:	ff fd 02 f0 	call (m) 0xccc;
8420079a:	37 e9 
8420079c:	b3 6f       	jump (m) Lc_aanc_create_14;

8420079e <Lc_aanc_create_21>:
    return TRUE;
}
8420079e:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
842007a0:	d8 4c       	rts;

842007a2 <$_aanc_destroy>:

bool aanc_destroy(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
842007a2:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
842007a4:	10 09       	r6 = r0 + Null;
842007a6:	1a 09       	r8 = r1 + Null;
842007a8:	27 00       	r5 = r2 + Null;
842007aa:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842007ac:	ef fd fe ff 	call (m) 0x4e6;
842007b0:	3b e9 
842007b2:	16 00       	r4 = r0 + Null;
                  unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    /* call base_op destroy that creates and fills response message, too */
    if (!base_op_destroy(op_data, message_data, response_id, resp_data))
842007b4:	4d 08       	r3 = r7 + Null;
842007b6:	3c 00       	r2 = r5 + Null;
842007b8:	53 08       	r1 = r8 + Null;
842007ba:	42 08       	r0 = r6 + Null;
842007bc:	ef fd fd ff 	call (m) 0x370;
842007c0:	35 ed 
842007c2:	10 04       	Null = r0 - Null;
842007c4:	03 62       	if NE jump (m) Lc_aanc_destroy_3;

842007c6 <Lc_aanc_destroy_2>:
    {
        return FALSE;
842007c6:	02 00       	r0 = Null + Null;
842007c8:	1c 6e       	jump (m) Lc_aanc_destroy_9;

842007ca <Lc_aanc_destroy_3>:
    }

    /* patch_fn_shared(aanc_capability); TODO: patch functions */

    if (p_ext_data != NULL)
842007ca:	30 04       	Null = r4 - Null;
842007cc:	0f 60       	if EQ jump (m) Lc_aanc_destroy_6;

842007ce <Lc_aanc_destroy_4>:
    {
        aanc_proc_destroy(&p_ext_data->ag);
842007ce:	62 f0 a8 21 	r0 = r4 + 424;
842007d2:	0b f0 21 eb 	call (m) $_aanc_proc_destroy;

        L4_DBG_MSG("AANC: Cleanup complete.");
842007d6:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842007da:	08 25       	Null = rMAC - 4;
842007dc:	11 68       	if LT jump (m) Lc_aanc_destroy_8;

842007de <Lc_aanc_destroy_5>:
842007de:	55 f1 02 f0 	r0 = Null + 357564910;
842007e2:	ee 41 
842007e4:	ff fd 02 f0 	call (m) 0xccc;
842007e8:	29 e7 

842007ea <Lc_aanc_destroy_6>:
    }

    L4_DBG_MSG("AANC: Destroyed");
842007ea:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842007ee:	08 25       	Null = rMAC - 4;
842007f0:	07 68       	if LT jump (m) Lc_aanc_destroy_8;

842007f2 <Lc_aanc_destroy_7>:
842007f2:	55 f1 02 f0 	r0 = Null + 357564934;
842007f6:	06 42 
842007f8:	ff fd 02 f0 	call (m) 0xccc;
842007fc:	35 e6 

842007fe <Lc_aanc_destroy_8>:
    return TRUE;
842007fe:	42 20       	r0 = Null + 1;

84200800 <Lc_aanc_destroy_9>:
}
84200800:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200802:	d8 4c       	rts;

84200804 <$_aanc_start>:

bool aanc_start(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
84200804:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200806:	17 00       	r5 = r0 + Null;
84200808:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420080a:	ef fd fe ff 	call (m) 0x4e6;
8420080e:	3d e6 
84200810:	16 00       	r4 = r0 + Null;
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    /* patch_fn_shared(aanc_capability); TODO: patch functions */

    /* Start with the assumption that we fail and change later if we succeed */
    if (!base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, resp_data))
84200812:	03 f0 00 60 	r1 = Null + 4096;
84200816:	44 08       	r2 = r6 + Null;
84200818:	3a 00       	r0 = r5 + Null;
8420081a:	ef fd fe ff 	call (m) 0x4bc;
8420081e:	23 e5 
84200820:	10 04       	Null = r0 - Null;
84200822:	03 62       	if NE jump (m) Lc_aanc_start_3;

84200824 <Lc_aanc_start_2>:
    {
        return FALSE;
84200824:	02 00       	r0 = Null + Null;
84200826:	57 6e       	jump (m) Lc_aanc_start_16;

84200828 <Lc_aanc_start_3>:
    }

    /* Check that the model has been loaded */
    unsigned debug = p_ext_data->aanc_cap_params.OFFSET_AANC_DEBUG;
84200828:	31 a9       	rMAC = M[r4 + 80];
    unsigned model_loaded = p_ext_data->flags & AANC_MODEL_LOADED;
8420082a:	62 f0 64 88 	r0 = M[r4 + 400];
8420082e:	03 f0 22 f8 	r0 = r0 AND 0x70000;
84200832:	00 00 
    if ((model_loaded != AANC_MODEL_LOADED) &&
        !(debug & AANC_CONFIG_AANC_DEBUG_DISABLE_AG_MODEL_CHECK))
84200834:	1c f0 20 f0 	Null = r0 - 458752;
84200838:	00 24 
8420083a:	0f 60       	if EQ jump (m) Lc_aanc_start_8;

8420083c <Lc_aanc_start_4>:
8420083c:	09 c0       	rMAC = rMAC AND 0x1;
8420083e:	0d 62       	if NE jump (m) Lc_aanc_start_8;

84200840 <Lc_aanc_start_5>:
    {
        L4_DBG_MSG("AANC start failure: model not loaded");
84200840:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200844:	08 25       	Null = rMAC - 4;
84200846:	07 68       	if LT jump (m) Lc_aanc_start_7;

84200848 <Lc_aanc_start_6>:
84200848:	55 f1 02 f0 	r0 = Null + 357564950;
8420084c:	16 42 
8420084e:	ff fd 02 f0 	call (m) 0xccc;
84200852:	3f e3 

84200854 <Lc_aanc_start_7>:
        return TRUE;
84200854:	42 20       	r0 = Null + 1;
84200856:	3f 6e       	jump (m) Lc_aanc_start_16;

84200858 <Lc_aanc_start_8>:
    }

    /* Check that we have a minimum number of terminals connected */
    if (p_ext_data->inputs[AANC_MIC_INT_TERMINAL_ID] == NULL ||
        p_ext_data->inputs[AANC_MIC_EXT_TERMINAL_ID] == NULL)
84200858:	b1 88       	rMAC = M[r4 + 8];
8420085a:	03 60       	if EQ jump (m) Lc_aanc_start_10;

8420085c <Lc_aanc_start_9>:
8420085c:	f1 88       	rMAC = M[r4 + 12];
8420085e:	0c 62       	if NE jump (m) Lc_aanc_start_12;

84200860 <Lc_aanc_start_10>:
    {
        L4_DBG_MSG("AANC start failure: mic inputs not connected");
84200860:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200864:	08 25       	Null = rMAC - 4;
84200866:	f7 69       	if LT jump (m) Lc_aanc_start_7;

84200868 <Lc_aanc_start_11>:
84200868:	55 f1 02 f0 	r0 = Null + 357564987;
8420086c:	3b 42 
8420086e:	ff fd 02 f0 	call (m) 0xccc;
84200872:	3f e2 
84200874:	f0 6f       	jump (m) Lc_aanc_start_7;

84200876 <Lc_aanc_start_12>:
    }

    /* TODO: check ANC HW enable status */

    /* Initialize EC paths to static values */
    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
84200876:	61 f0 e7 86 	rMAC = MHU[r4 + 462];
8420087a:	61 f0 db 8c 	MH[r4 + 438] = rMAC;
    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
8420087e:	61 f0 e6 86 	rMAC = MHU[r4 + 460];
84200882:	61 f0 da 8c 	MH[r4 + 436] = rMAC;

    /* Initialize coarse to static and fine to 0 for FF and FB paths. */
    if (p_ext_data->cur_mode == AANC_SYSMODE_FULL)
84200886:	61 f0 5f 88 	rMAC = M[r4 + 380];
8420088a:	88 24       	Null = rMAC - 2;
8420088c:	11 62       	if NE jump (m) Lc_aanc_start_14;

8420088e <Lc_aanc_start_13>:
    {
        p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
8420088e:	61 f0 e4 86 	rMAC = MHU[r4 + 456];
84200892:	61 f0 d8 8c 	MH[r4 + 432] = rMAC;
        p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200896:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
8420089a:	61 f0 d6 8c 	MH[r4 + 428] = rMAC;
        p_ext_data->fb_gain.fine = 0;
8420089e:	60 f0 d9 8c 	MH[r4 + 434] = Null;
        p_ext_data->ff_gain.fine = 0;
842008a2:	60 f0 d7 8c 	MH[r4 + 430] = Null;

        aanc_update_gain(op_data, p_ext_data);
842008a6:	33 00       	r1 = r4 + Null;
842008a8:	3a 00       	r0 = r5 + Null;
842008aa:	07 f0 2d ea 	call (m) Lc_aanc_update_gain_1;

842008ae <Lc_aanc_start_14>:
    }

    /* Set reinitialization flags to ensure first run behavior */
    p_ext_data->re_init_flag = TRUE;
842008ae:	41 20       	rMAC = Null + 1;
842008b0:	61 f0 76 8e 	M[r4 + 472] = rMAC;
    p_ext_data->re_init_hard = TRUE;
842008b4:	61 f0 77 8e 	M[r4 + 476] = rMAC;
842008b8:	81 f0 00 e8 	rMAC = M[r6 + Null];
842008bc:	48 8e       	M[rMAC + 4] = Null;

    /* All good */
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("AANC Started");
842008be:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842008c2:	08 25       	Null = rMAC - 4;
842008c4:	c8 69       	if LT jump (m) Lc_aanc_start_7;

842008c6 <Lc_aanc_start_15>:
842008c6:	55 f1 02 f0 	r0 = Null + 357565032;
842008ca:	68 42 
842008cc:	ff fd 02 f0 	call (m) 0xccc;
842008d0:	21 e0 
842008d2:	c1 6f       	jump (m) Lc_aanc_start_7;

842008d4 <Lc_aanc_start_16>:
    return TRUE;
}
842008d4:	f3 48       	popm <FP, r4, r5, r6, rLink>;
842008d6:	d8 4c       	rts;

842008d8 <$_aanc_reset>:

bool aanc_reset(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
842008d8:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
842008da:	10 09       	r6 = r0 + Null;
842008dc:	1a 09       	r8 = r1 + Null;
842008de:	27 00       	r5 = r2 + Null;
842008e0:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842008e2:	ef fd fe ff 	call (m) 0x4e6;
842008e6:	25 e0 
842008e8:	16 00       	r4 = r0 + Null;
bool aanc_reset(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!base_op_reset(op_data, message_data, response_id, resp_data))
842008ea:	4d 08       	r3 = r7 + Null;
842008ec:	3c 00       	r2 = r5 + Null;
842008ee:	53 08       	r1 = r8 + Null;
842008f0:	42 08       	r0 = r6 + Null;
842008f2:	ef fd fd ff 	call (m) 0x32c;
842008f6:	3b e1 
842008f8:	10 04       	Null = r0 - Null;
842008fa:	03 62       	if NE jump (m) Lc_aanc_reset_3;

842008fc <Lc_aanc_reset_2>:
    {
        return FALSE;
842008fc:	02 00       	r0 = Null + Null;
842008fe:	11 6e       	jump (m) Lc_aanc_reset_6;

84200900 <Lc_aanc_reset_3>:
    }

    p_ext_data->re_init_flag = TRUE;
84200900:	41 20       	rMAC = Null + 1;
84200902:	61 f0 76 8e 	M[r4 + 472] = rMAC;
    p_ext_data->re_init_hard = TRUE;
84200906:	61 f0 77 8e 	M[r4 + 476] = rMAC;

    L4_DBG_MSG("AANC: Reset");
8420090a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420090e:	08 25       	Null = rMAC - 4;
84200910:	07 68       	if LT jump (m) Lc_aanc_reset_5;

84200912 <Lc_aanc_reset_4>:
84200912:	55 f1 02 f0 	r0 = Null + 357565045;
84200916:	75 42 
84200918:	ff fd 01 f0 	call (m) 0xccc;
8420091c:	35 ed 

8420091e <Lc_aanc_reset_5>:
    return TRUE;
8420091e:	42 20       	r0 = Null + 1;

84200920 <Lc_aanc_reset_6>:
}
84200920:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200922:	d8 4c       	rts;

84200924 <$_aanc_connect>:

bool aanc_connect(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
84200924:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84200926:	11 09       	r7 = r0 + Null;
84200928:	1e 00       	r4 = r1 + Null;
8420092a:	2b 09       	r9 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420092c:	ef fd fd ff 	call (m) 0x4e6;
84200930:	3b ed 
84200932:	17 00       	r5 = r0 + Null;

bool aanc_connect(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200934:	6a f0 00 e8 	r8 = M[r4 + Null];
    tCbuffer* pterminal_buf = OPMGR_GET_OP_CONNECT_BUFFER(message_data);
84200938:	68 f0 01 88 	r6 = M[r4 + 4];
    unsigned terminal_num = terminal_id & TERMINAL_NUM_MASK;
8420093c:	a6 f0 3f 00 	r4 = r8 AND 0x3f;
    tCbuffer** selected_buffer;
    tCbuffer** selected_metadata;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
84200940:	03 00       	r1 = Null + Null;
84200942:	5c 08       	r2 = r9 + Null;
84200944:	4a 08       	r0 = r7 + Null;
84200946:	ef fd fd ff 	call (m) 0x4bc;
8420094a:	37 eb 
8420094c:	10 04       	Null = r0 - Null;
8420094e:	03 62       	if NE jump (m) Lc_aanc_connect_3;

84200950 <Lc_aanc_connect_2>:
    {
        return FALSE;
84200950:	02 00       	r0 = Null + Null;
84200952:	68 6e       	jump (m) Lc_aanc_connect_29;

84200954 <Lc_aanc_connect_3>:
    }

    /* can't connect while running if adaptive gain is not disabled */
    if (opmgr_op_is_running(op_data))
84200954:	4a 08       	r0 = r7 + Null;
84200956:	ff fd 26 f0 	call (m) 0x5700;
8420095a:	2b ed 
8420095c:	10 04       	Null = r0 - Null;
8420095e:	03 60       	if EQ jump (m) Lc_aanc_connect_5;

84200960 <Lc_aanc_connect_4>:
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
84200960:	38 a8       	Null = M[r5 + 64];
84200962:	22 60       	if EQ jump (m) Lc_aanc_connect_12;

84200964 <Lc_aanc_connect_5>:
            return TRUE;
        }
    }

    /* Determine whether sink or source terminal being connected */
    if (terminal_id & TERMINAL_SINK_MASK)
84200964:	40 f0 a1 f0 	rMAC = r8 AND 0x800000;
84200968:	00 00 
8420096a:	24 60       	if EQ jump (m) Lc_aanc_connect_13;

8420096c <Lc_aanc_connect_6>:
    {
        L4_DBG_MSG1("AANC connect: sink terminal %d", terminal_num);
8420096c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200970:	08 25       	Null = rMAC - 4;
84200972:	08 68       	if LT jump (m) Lc_aanc_connect_8;

84200974 <Lc_aanc_connect_7>:
84200974:	55 f1 02 f0 	r0 = Null + 357565057;
84200978:	81 42 
8420097a:	33 00       	r1 = r4 + Null;
8420097c:	ff fd 01 f0 	call (m) 0xcde;
84200980:	23 eb 

84200982 <Lc_aanc_connect_8>:
        max_value = AANC_MAX_SINKS;
        selected_buffer = p_ext_data->inputs;
84200982:	3a 00       	r0 = r5 + Null;
        selected_metadata = p_ext_data->metadata_ip;
84200984:	39 30       	rMAC = r5 + 32;
84200986:	23 6e       	jump (m) Lc_aanc_connect_16;

84200988 <Lc_aanc_connect_9>:
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    /* Can't connect if already connected */
    if (selected_buffer[terminal_num] != NULL)
84200988:	73 54       	r1 = r4 LSHIFT 2;
8420098a:	9a 00       	r0 = r1 + r0;
8420098c:	13 e8       	r1 = M[r0 + Null];
8420098e:	33 60       	if EQ jump (m) Lc_aanc_connect_21;

84200990 <Lc_aanc_connect_10>:
    {
        L4_DBG_MSG1("AANC connect failed: terminal %d already connected",
                    terminal_num);
84200990:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200994:	08 25       	Null = rMAC - 4;
84200996:	08 68       	if LT jump (m) Lc_aanc_connect_12;

84200998 <Lc_aanc_connect_11>:
84200998:	55 f1 02 f0 	r0 = Null + 357565162;
8420099c:	ea 42 
8420099e:	33 00       	r1 = r4 + Null;
842009a0:	ff fd 01 f0 	call (m) 0xcde;
842009a4:	3f e9 

842009a6 <Lc_aanc_connect_12>:
842009a6:	01 f0 00 60 	rMAC = Null + 4096;
842009aa:	b2 f0 00 e8 	r0 = M[r9 + Null];
842009ae:	51 8e       	M[r0 + 4] = rMAC;
842009b0:	20 6e       	jump (m) Lc_aanc_connect_20;

842009b2 <Lc_aanc_connect_13>:
        selected_buffer = p_ext_data->inputs;
        selected_metadata = p_ext_data->metadata_ip;
    }
    else
    {
        L4_DBG_MSG1("AANC connect: source terminal %d", terminal_num);
842009b2:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842009b6:	08 25       	Null = rMAC - 4;
842009b8:	08 68       	if LT jump (m) Lc_aanc_connect_15;

842009ba <Lc_aanc_connect_14>:
842009ba:	55 f1 02 f0 	r0 = Null + 357565088;
842009be:	a0 42 
842009c0:	33 00       	r1 = r4 + Null;
842009c2:	ff fd 01 f0 	call (m) 0xcde;
842009c6:	3d e8 

842009c8 <Lc_aanc_connect_15>:
        max_value = AANC_MAX_SOURCES;
        selected_buffer = p_ext_data->outputs;
842009c8:	3a 28       	r0 = r5 + 16;
        selected_metadata = p_ext_data->metadata_op;
842009ca:	39 32       	rMAC = r5 + 40;

842009cc <Lc_aanc_connect_16>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
842009cc:	30 25       	Null = r4 - 4;
842009ce:	dd 65       	if NC jump (m) Lc_aanc_connect_9;

842009d0 <Lc_aanc_connect_17>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("AANC connect failed: invalid terminal %d", terminal_num);
842009d0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842009d4:	08 25       	Null = rMAC - 4;
842009d6:	08 68       	if LT jump (m) Lc_aanc_connect_19;

842009d8 <Lc_aanc_connect_18>:
842009d8:	55 f1 02 f0 	r0 = Null + 357565121;
842009dc:	c1 42 
842009de:	33 00       	r1 = r4 + Null;
842009e0:	ff fd 01 f0 	call (m) 0xcde;
842009e4:	3f e7 

842009e6 <Lc_aanc_connect_19>:
842009e6:	01 f0 03 60 	rMAC = Null + 4099;
842009ea:	b2 f0 00 e8 	r0 = M[r9 + Null];
842009ee:	51 8e       	M[r0 + 4] = rMAC;

842009f0 <Lc_aanc_connect_20>:
    if (opmgr_op_is_running(op_data))
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
        {
            base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
            return TRUE;
842009f0:	42 20       	r0 = Null + 1;
842009f2:	18 6e       	jump (m) Lc_aanc_connect_29;

842009f4 <Lc_aanc_connect_21>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    selected_buffer[terminal_num] = pterminal_buf;
842009f4:	28 f0 00 ee 	M[r0 + Null] = r6;

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
842009f8:	30 04       	Null = r4 - Null;
842009fa:	0c 62       	if NE jump (m) Lc_aanc_connect_26;

842009fc <Lc_aanc_connect_22>:
    {
        /* playback metadata has its own metadata channel */
        if (selected_metadata[AANC_METADATA_PLAYBACK_ID] == NULL &&
            buff_has_metadata(pterminal_buf))
842009fc:	0a e8       	r0 = M[rMAC + Null];
842009fe:	06 62       	if NE jump (m) Lc_aanc_connect_25;

84200a00 <Lc_aanc_connect_23>:
 *
 * \return TRUE if the buffer supports metadata. FALSE if it doesn't.
 */
static inline bool buff_has_metadata(tCbuffer *buff)
{
    if (buff->metadata != NULL)
84200a00:	82 f0 06 88 	r0 = M[r6 + 24];
84200a04:	03 60       	if EQ jump (m) Lc_aanc_connect_25;

84200a06 <Lc_aanc_connect_24>:
        {
            selected_metadata[AANC_METADATA_PLAYBACK_ID] = pterminal_buf;
84200a06:	18 f0 00 ee 	M[rMAC + Null] = r6;

84200a0a <Lc_aanc_connect_25>:
        {
            selected_metadata[AANC_METADATA_MIC_ID] = pterminal_buf;
        }
    }

    update_touched_sink_sources(p_ext_data);
84200a0a:	3a 00       	r0 = r5 + Null;
84200a0c:	07 f0 39 e5 	call (m) Lc_update_touched_sink_sources_1;
84200a10:	f0 6f       	jump (m) Lc_aanc_connect_20;

84200a12 <Lc_aanc_connect_26>:
    {
        /* mic int/ext and fb mon metadata all muxed onto the same metadata
         * channel
         */
        if (selected_metadata[AANC_METADATA_MIC_ID] == NULL &&
            buff_has_metadata(pterminal_buf))
84200a12:	4a 88       	r0 = M[rMAC + 4];
84200a14:	fb 63       	if NE jump (m) Lc_aanc_connect_25;

84200a16 <Lc_aanc_connect_27>:
84200a16:	82 f0 06 88 	r0 = M[r6 + 24];
84200a1a:	f8 61       	if EQ jump (m) Lc_aanc_connect_25;

84200a1c <Lc_aanc_connect_28>:
        {
            selected_metadata[AANC_METADATA_MIC_ID] = pterminal_buf;
84200a1c:	18 f0 01 8e 	M[rMAC + 4] = r6;
84200a20:	f5 6f       	jump (m) Lc_aanc_connect_25;

84200a22 <Lc_aanc_connect_29>:
    }

    update_touched_sink_sources(p_ext_data);

    return TRUE;
}
84200a22:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200a24:	d8 4c       	rts;

84200a26 <$_aanc_disconnect>:

bool aanc_disconnect(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
84200a26:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200a28:	10 09       	r6 = r0 + Null;
84200a2a:	1e 00       	r4 = r1 + Null;
84200a2c:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200a2e:	ef fd fd ff 	call (m) 0x4e6;
84200a32:	39 e5 
84200a34:	17 00       	r5 = r0 + Null;

bool aanc_disconnect(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200a36:	69 f0 00 e8 	r7 = M[r4 + Null];
    unsigned terminal_num = terminal_id & TERMINAL_NUM_MASK;
84200a3a:	96 f0 3f 00 	r4 = r7 AND 0x3f;
    unsigned i;
    bool found_alternative = FALSE;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
84200a3e:	03 00       	r1 = Null + Null;
84200a40:	54 08       	r2 = r8 + Null;
84200a42:	42 08       	r0 = r6 + Null;
84200a44:	ef fd fd ff 	call (m) 0x4bc;
84200a48:	39 e3 
84200a4a:	10 04       	Null = r0 - Null;
84200a4c:	03 62       	if NE jump (m) Lc_aanc_disconnect_3;

84200a4e <Lc_aanc_disconnect_2>:
    {
        return FALSE;
84200a4e:	02 00       	r0 = Null + Null;
84200a50:	74 6e       	jump (m) Lc_aanc_disconnect_33;

84200a52 <Lc_aanc_disconnect_3>:
    }

    /* can't disconnect while running if adaptive gain is not disabled */
    if (opmgr_op_is_running(op_data))
84200a52:	42 08       	r0 = r6 + Null;
84200a54:	ff fd 26 f0 	call (m) 0x5700;
84200a58:	2d e5 
84200a5a:	10 04       	Null = r0 - Null;
84200a5c:	03 60       	if EQ jump (m) Lc_aanc_disconnect_5;

84200a5e <Lc_aanc_disconnect_4>:
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
84200a5e:	38 a8       	Null = M[r5 + 64];
84200a60:	24 60       	if EQ jump (m) Lc_aanc_disconnect_12;

84200a62 <Lc_aanc_disconnect_5>:
            return TRUE;
        }
    }

    /* Determine whether sink or source terminal being disconnected */
    if (terminal_id & TERMINAL_SINK_MASK)
84200a62:	40 f0 91 f0 	rMAC = r7 AND 0x800000;
84200a66:	00 00 
84200a68:	26 60       	if EQ jump (m) Lc_aanc_disconnect_13;

84200a6a <Lc_aanc_disconnect_6>:
    {
        L4_DBG_MSG1("AANC disconnect: sink terminal %d", terminal_num);
84200a6a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200a6e:	08 25       	Null = rMAC - 4;
84200a70:	08 68       	if LT jump (m) Lc_aanc_disconnect_8;

84200a72 <Lc_aanc_disconnect_7>:
84200a72:	55 f1 02 f0 	r0 = Null + 357565213;
84200a76:	1d 43 
84200a78:	33 00       	r1 = r4 + Null;
84200a7a:	ff fd 01 f0 	call (m) 0xcde;
84200a7e:	25 e3 

84200a80 <Lc_aanc_disconnect_8>:
        max_value = AANC_MAX_SINKS;
        selected_buffer = p_ext_data->inputs;
84200a80:	39 00       	rMAC = r5 + Null;
        selected_metadata = p_ext_data->metadata_ip;
84200a82:	3a 30       	r0 = r5 + 32;
84200a84:	25 6e       	jump (m) Lc_aanc_disconnect_16;

84200a86 <Lc_aanc_disconnect_9>:
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    /* Can't disconnect if not connected */
    if (selected_buffer[terminal_num] == NULL)
84200a86:	74 54       	r2 = r4 LSHIFT 2;
84200a88:	0b 00       	r1 = rMAC + Null;
84200a8a:	e3 00       	r1 = r2 + r1;
84200a8c:	1d 00       	r3 = r1 + Null;
84200a8e:	2b e8       	r1 = M[r3 + Null];
84200a90:	33 62       	if NE jump (m) Lc_aanc_disconnect_21;

84200a92 <Lc_aanc_disconnect_10>:
    {
        L4_DBG_MSG1("AANC disconnect failed: terminal %d not connected",
                    terminal_num);
84200a92:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200a96:	08 25       	Null = rMAC - 4;
84200a98:	08 68       	if LT jump (m) Lc_aanc_disconnect_12;

84200a9a <Lc_aanc_disconnect_11>:
84200a9a:	55 f1 02 f0 	r0 = Null + 357565327;
84200a9e:	8f 43 
84200aa0:	33 00       	r1 = r4 + Null;
84200aa2:	ff fd 01 f0 	call (m) 0xcde;
84200aa6:	3d e1 

84200aa8 <Lc_aanc_disconnect_12>:
84200aa8:	01 f0 00 60 	rMAC = Null + 4096;
84200aac:	a2 f0 00 e8 	r0 = M[r8 + Null];
84200ab0:	51 8e       	M[r0 + 4] = rMAC;
84200ab2:	20 6e       	jump (m) Lc_aanc_disconnect_20;

84200ab4 <Lc_aanc_disconnect_13>:
        selected_buffer = p_ext_data->inputs;
        selected_metadata = p_ext_data->metadata_ip;
    }
    else
    {
        L4_DBG_MSG1("AANC disconnect: source terminal %d", terminal_num);
84200ab4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200ab8:	08 25       	Null = rMAC - 4;
84200aba:	08 68       	if LT jump (m) Lc_aanc_disconnect_15;

84200abc <Lc_aanc_disconnect_14>:
84200abc:	55 f1 02 f0 	r0 = Null + 357565247;
84200ac0:	3f 43 
84200ac2:	33 00       	r1 = r4 + Null;
84200ac4:	ff fd 01 f0 	call (m) 0xcde;
84200ac8:	3b e0 

84200aca <Lc_aanc_disconnect_15>:
        max_value = AANC_MAX_SOURCES;
        selected_buffer = p_ext_data->outputs;
84200aca:	39 28       	rMAC = r5 + 16;
        selected_metadata = p_ext_data->metadata_op;
84200acc:	3a 32       	r0 = r5 + 40;

84200ace <Lc_aanc_disconnect_16>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
84200ace:	30 25       	Null = r4 - 4;
84200ad0:	db 65       	if NC jump (m) Lc_aanc_disconnect_9;

84200ad2 <Lc_aanc_disconnect_17>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("AANC disconnect failed: invalid terminal %d",
                    terminal_num);
84200ad2:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200ad6:	08 25       	Null = rMAC - 4;
84200ad8:	08 68       	if LT jump (m) Lc_aanc_disconnect_19;

84200ada <Lc_aanc_disconnect_18>:
84200ada:	55 f1 02 f0 	r0 = Null + 357565283;
84200ade:	63 43 
84200ae0:	33 00       	r1 = r4 + Null;
84200ae2:	ff fd 00 f0 	call (m) 0xcde;
84200ae6:	3d ef 

84200ae8 <Lc_aanc_disconnect_19>:
84200ae8:	01 f0 03 60 	rMAC = Null + 4099;
84200aec:	a2 f0 00 e8 	r0 = M[r8 + Null];
84200af0:	51 8e       	M[r0 + 4] = rMAC;

84200af2 <Lc_aanc_disconnect_20>:
    if (opmgr_op_is_running(op_data))
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
        {
            base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
            return TRUE;
84200af2:	42 20       	r0 = Null + 1;
84200af4:	22 6e       	jump (m) Lc_aanc_disconnect_33;

84200af6 <Lc_aanc_disconnect_21>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
84200af6:	30 04       	Null = r4 - Null;
84200af8:	05 62       	if NE jump (m) Lc_aanc_disconnect_24;

84200afa <Lc_aanc_disconnect_22>:
    {
        /* playback metadata has its own metadata channel */
        if (selected_metadata[AANC_METADATA_PLAYBACK_ID] != NULL)
84200afa:	11 e8       	rMAC = M[r0 + Null];
84200afc:	15 60       	if EQ jump (m) Lc_aanc_disconnect_31;

84200afe <Lc_aanc_disconnect_23>:
        {
            selected_metadata[AANC_METADATA_PLAYBACK_ID] = NULL;
84200afe:	10 ee       	M[r0 + Null] = Null;
84200b00:	13 6e       	jump (m) Lc_aanc_disconnect_31;

84200b02 <Lc_aanc_disconnect_24>:
    {
        /* Mic int/ext and fb mon metadata all muxed onto the same metadata
         * channel. Try to find an alternative channel to set the metadata to if
         * we're disconnecting the existing metadata channel. */
        if (selected_metadata[AANC_METADATA_MIC_ID] ==
            selected_buffer[terminal_num])
84200b02:	54 88       	r2 = M[r0 + 4];
84200b04:	e0 04       	Null = r2 - r1;
84200b06:	10 62       	if NE jump (m) Lc_aanc_disconnect_31;

84200b08 <Lc_aanc_disconnect_25>:
        {
            for (i = 1; i < max_value; i++)
84200b08:	43 20       	r1 = Null + 1;
84200b0a:	0c 21       	r2 = rMAC + 4;

84200b0c <Lc_aanc_disconnect_26>:
            {
                if (i == terminal_num)
84200b0c:	98 05       	Null = r1 - r4;
84200b0e:	07 60       	if EQ jump (m) Lc_aanc_disconnect_29;

84200b10 <Lc_aanc_disconnect_27>:
                {
                    continue;
                }
                if (selected_buffer[i] != NULL &&
                    buff_has_metadata(selected_buffer[i]))
84200b10:	48 f0 00 e8 	r6 = M[r2 + Null];
84200b14:	04 60       	if EQ jump (m) Lc_aanc_disconnect_29;

84200b16 <Lc_aanc_disconnect_28>:
84200b16:	88 f0 06 88 	r6 = M[r6 + 24];
84200b1a:	0b 62       	if NE jump (m) Lc_aanc_disconnect_32;

84200b1c <Lc_aanc_disconnect_29>:
         * channel. Try to find an alternative channel to set the metadata to if
         * we're disconnecting the existing metadata channel. */
        if (selected_metadata[AANC_METADATA_MIC_ID] ==
            selected_buffer[terminal_num])
        {
            for (i = 1; i < max_value; i++)
84200b1c:	5b 20       	r1 = r1 + 1;
84200b1e:	24 21       	r2 = r2 + 4;
84200b20:	18 25       	Null = r1 - 4;
84200b22:	f5 65       	if NC jump (m) Lc_aanc_disconnect_26;

84200b24 <Lc_aanc_disconnect_30>:
                    break;
                }
            }
            if (!found_alternative)
            {
                selected_metadata[AANC_METADATA_MIC_ID] = NULL;
84200b24:	50 8e       	M[r0 + 4] = Null;

84200b26 <Lc_aanc_disconnect_31>:
            }
        }
    }

    selected_buffer[terminal_num] = NULL;
84200b26:	28 ee       	M[r3 + Null] = Null;

    update_touched_sink_sources(p_ext_data);
84200b28:	3a 00       	r0 = r5 + Null;
84200b2a:	06 f0 3b ec 	call (m) Lc_update_touched_sink_sources_1;
84200b2e:	e2 6f       	jump (m) Lc_aanc_disconnect_20;

84200b30 <Lc_aanc_disconnect_32>:
                    continue;
                }
                if (selected_buffer[i] != NULL &&
                    buff_has_metadata(selected_buffer[i]))
                {
                    selected_metadata[AANC_METADATA_MIC_ID] = selected_buffer[i];
84200b30:	5b 54       	r1 = r1 LSHIFT 2;
84200b32:	c9 e8       	rMAC = M[rMAC + r1];
84200b34:	51 8e       	M[r0 + 4] = rMAC;
                    found_alternative = TRUE;
                    break;
84200b36:	f8 6f       	jump (m) Lc_aanc_disconnect_31;

84200b38 <Lc_aanc_disconnect_33>:
    selected_buffer[terminal_num] = NULL;

    update_touched_sink_sources(p_ext_data);

    return TRUE;
}
84200b38:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200b3a:	d8 4c       	rts;

84200b3c <$_aanc_buffer_details>:

bool aanc_buffer_details(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
84200b3c:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
84200b3e:	13 09       	r9 = r0 + Null;
84200b40:	18 09       	r6 = r1 + Null;
84200b42:	44 de       	M[FP + 32] = r2;
84200b44:	4d de       	M[FP + 36] = r3;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200b46:	ef fd fc ff 	call (m) 0x4e6;
84200b4a:	21 ed 
84200b4c:	11 09       	r7 = r0 + Null;

bool aanc_buffer_details(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200b4e:	8a f0 00 e8 	r8 = M[r6 + Null];
#ifndef DISABLE_IN_PLACE
    unsigned terminal_num = terminal_id & TERMINAL_NUM_MASK;
84200b52:	a7 f0 3f 00 	r5 = r8 AND 0x3f;
    unsigned max_value;
    tCbuffer** opposite_buffer;
    tCbuffer** selected_metadata;

    /* Response pointer */
    OP_BUF_DETAILS_RSP *p_resp = (OP_BUF_DETAILS_RSP*) *resp_data;
84200b56:	49 d8       	rMAC = M[FP + 36];
84200b58:	0d 00       	r3 = rMAC + Null;
84200b5a:	0e e8       	r4 = M[rMAC + Null];

    if (!base_op_buffer_details(op_data, message_data, response_id, resp_data))
84200b5c:	43 08       	r1 = r6 + Null;
84200b5e:	5a 08       	r0 = r9 + Null;
84200b60:	44 d8       	r2 = M[FP + 32];
84200b62:	ef fd fc ff 	call (m) 0x37c;
84200b66:	3b e0 
84200b68:	10 04       	Null = r0 - Null;
84200b6a:	03 62       	if NE jump (m) Lc_aanc_buffer_details_3;

84200b6c <Lc_aanc_buffer_details_2>:
    {
        return FALSE;
84200b6c:	02 00       	r0 = Null + Null;
84200b6e:	92 6e       	jump (m) Lc_aanc_buffer_details_26;

84200b70 <Lc_aanc_buffer_details_3>:
    p_resp->runs_in_place = FALSE;
    p_resp->b.buffer_size = AANC_DEFAULT_BUFFER_SIZE;
#else

    /* Determine whether sink or source terminal being disconnected */
    if (terminal_id & TERMINAL_SINK_MASK)
84200b70:	40 f0 a1 f0 	rMAC = r8 AND 0x800000;
84200b74:	00 00 
84200b76:	11 60       	if EQ jump (m) Lc_aanc_buffer_details_7;

84200b78 <Lc_aanc_buffer_details_4>:
    {
        L4_DBG_MSG1("AANC buffer details: sink buffer %d", terminal_num);
84200b78:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200b7c:	08 25       	Null = rMAC - 4;
84200b7e:	08 68       	if LT jump (m) Lc_aanc_buffer_details_6;

84200b80 <Lc_aanc_buffer_details_5>:
84200b80:	55 f1 02 f0 	r0 = Null + 357565377;
84200b84:	c1 43 
84200b86:	3b 00       	r1 = r5 + Null;
84200b88:	ff fd 00 f0 	call (m) 0xcde;
84200b8c:	37 ea 

84200b8e <Lc_aanc_buffer_details_6>:
        max_value = AANC_MAX_SINKS;
        opposite_buffer = p_ext_data->outputs;
84200b8e:	91 f0 10 20 	rMAC = r7 + 16;
        selected_metadata = p_ext_data->metadata_ip;
84200b92:	98 f0 20 20 	r6 = r7 + 32;
84200b96:	0f 6e       	jump (m) Lc_aanc_buffer_details_10;

84200b98 <Lc_aanc_buffer_details_7>:
    }
    else
    {
        L4_DBG_MSG1("AANC buffer details: source buffer %d", terminal_num);
84200b98:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200b9c:	08 25       	Null = rMAC - 4;
84200b9e:	08 68       	if LT jump (m) Lc_aanc_buffer_details_9;

84200ba0 <Lc_aanc_buffer_details_8>:
84200ba0:	55 f1 02 f0 	r0 = Null + 357565413;
84200ba4:	e5 43 
84200ba6:	3b 00       	r1 = r5 + Null;
84200ba8:	ff fd 00 f0 	call (m) 0xcde;
84200bac:	37 e9 

84200bae <Lc_aanc_buffer_details_9>:
        max_value = AANC_MAX_SOURCES;
        opposite_buffer = p_ext_data->inputs;
84200bae:	49 08       	rMAC = r7 + Null;
        selected_metadata = p_ext_data->metadata_op;
84200bb0:	98 f0 28 20 	r6 = r7 + 40;

84200bb4 <Lc_aanc_buffer_details_10>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
84200bb4:	38 25       	Null = r5 - 4;
84200bb6:	12 64       	if NC jump (m) Lc_aanc_buffer_details_14;

84200bb8 <Lc_aanc_buffer_details_11>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("AANC buffer details failed: invalid terminal %d",
                    terminal_num);
84200bb8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200bbc:	08 25       	Null = rMAC - 4;
84200bbe:	08 68       	if LT jump (m) Lc_aanc_buffer_details_13;

84200bc0 <Lc_aanc_buffer_details_12>:
84200bc0:	55 f1 02 f0 	r0 = Null + 357565451;
84200bc4:	0b 48 
84200bc6:	3b 00       	r1 = r5 + Null;
84200bc8:	ff fd 00 f0 	call (m) 0xcde;
84200bcc:	37 e8 

84200bce <Lc_aanc_buffer_details_13>:
84200bce:	01 f0 03 60 	rMAC = Null + 4099;
84200bd2:	4a d8       	r0 = M[FP + 36];
84200bd4:	12 e8       	r0 = M[r0 + Null];
84200bd6:	51 8e       	M[r0 + 4] = rMAC;
84200bd8:	5c 6e       	jump (m) Lc_aanc_buffer_details_25;

84200bda <Lc_aanc_buffer_details_14>:
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
84200bda:	38 04       	Null = r5 - Null;
84200bdc:	2d 62       	if NE jump (m) Lc_aanc_buffer_details_20;

84200bde <Lc_aanc_buffer_details_15>:
    {
        if (opposite_buffer[AANC_PLAYBACK_TERMINAL_ID] != NULL)
84200bde:	0a e8       	r0 = M[rMAC + Null];
84200be0:	1b 60       	if EQ jump (m) Lc_aanc_buffer_details_18;

84200be2 <Lc_aanc_buffer_details_16>:
        {
            p_resp->runs_in_place = TRUE;
84200be2:	32 92       	r0 = MBU[r4 + 8];
84200be4:	22 ff f7 1f 	r0 = r0 AND 0xfffffff7;
84200be8:	52 c9       	r0 = r0 OR 0x8;
84200bea:	32 9a       	MB[r4 + 8] = r0;
            p_resp->b.in_place_buff_params.in_place_terminal = \
                terminal_id ^ TERMINAL_SINK_MASK;
84200bec:	08 f0 00 f0 	r1 = r8 XOR 0x800000;
84200bf0:	00 fa 93 c8 
84200bf4:	33 8f       	M[r4 + 16] = r1;
            p_resp->b.in_place_buff_params.size = AANC_DEFAULT_BUFFER_SIZE;
84200bf6:	02 f0 80 40 	r0 = Null + 128;
84200bfa:	72 8f       	M[r4 + 20] = r0;
            p_resp->b.in_place_buff_params.buffer = \
                opposite_buffer[AANC_PLAYBACK_TERMINAL_ID];
84200bfc:	09 e8       	rMAC = M[rMAC + Null];
84200bfe:	b1 8f       	M[r4 + 24] = rMAC;
            L4_DBG_MSG1("aanc_playback_buffer_details: %d",
                        p_resp->b.buffer_size);
84200c00:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200c04:	08 25       	Null = rMAC - 4;
84200c06:	0f 68       	if LT jump (m) Lc_aanc_buffer_details_19;

84200c08 <Lc_aanc_buffer_details_17>:
84200c08:	55 f1 02 f0 	r0 = Null + 357565499;
84200c0c:	3b 48 
84200c0e:	ff fd 00 f0 	call (m) 0xcde;
84200c12:	31 e6 
84200c14:	08 6e       	jump (m) Lc_aanc_buffer_details_19;

84200c16 <Lc_aanc_buffer_details_18>:
        }
        else
        {
            p_resp->runs_in_place = FALSE;
84200c16:	31 92       	rMAC = MBU[r4 + 8];
84200c18:	11 ff f7 1f 	rMAC = rMAC AND 0xfffffff7;
84200c1c:	31 9a       	MB[r4 + 8] = rMAC;
            p_resp->b.buffer_size = AANC_DEFAULT_BUFFER_SIZE;
84200c1e:	01 f0 80 40 	rMAC = Null + 128;
84200c22:	31 8f       	M[r4 + 16] = rMAC;

84200c24 <Lc_aanc_buffer_details_19>:
        }
        p_resp->supports_metadata = TRUE;
84200c24:	31 92       	rMAC = MBU[r4 + 8];
84200c26:	11 ff ef 1f 	rMAC = rMAC AND 0xffffffef;
84200c2a:	c9 c9       	rMAC = rMAC OR 0x10;
84200c2c:	31 9a       	MB[r4 + 8] = rMAC;
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_PLAYBACK_ID];
84200c2e:	81 f0 00 e8 	rMAC = M[r6 + Null];
84200c32:	f1 8e       	M[r4 + 12] = rMAC;
84200c34:	2e 6e       	jump (m) Lc_aanc_buffer_details_25;

84200c36 <Lc_aanc_buffer_details_20>:
    }
    else
    {
        if (opposite_buffer[terminal_num] != NULL)
84200c36:	7a 54       	r0 = r5 LSHIFT 2;
84200c38:	51 00       	rMAC = r0 + rMAC;
84200c3a:	0a e8       	r0 = M[rMAC + Null];
84200c3c:	1b 60       	if EQ jump (m) Lc_aanc_buffer_details_23;

84200c3e <Lc_aanc_buffer_details_21>:
        {
            p_resp->runs_in_place = TRUE;
84200c3e:	32 92       	r0 = MBU[r4 + 8];
84200c40:	22 ff f7 1f 	r0 = r0 AND 0xfffffff7;
84200c44:	52 c9       	r0 = r0 OR 0x8;
84200c46:	32 9a       	MB[r4 + 8] = r0;
            p_resp->b.in_place_buff_params.in_place_terminal = \
                terminal_id ^ TERMINAL_SINK_MASK;
84200c48:	08 f0 00 f0 	r1 = r8 XOR 0x800000;
84200c4c:	00 fa 93 c8 
84200c50:	33 8f       	M[r4 + 16] = r1;
            p_resp->b.in_place_buff_params.size = AANC_DEFAULT_BUFFER_SIZE;
84200c52:	02 f0 80 40 	r0 = Null + 128;
84200c56:	72 8f       	M[r4 + 20] = r0;
            p_resp->b.in_place_buff_params.buffer = \
                opposite_buffer[terminal_num];
84200c58:	09 e8       	rMAC = M[rMAC + Null];
84200c5a:	b1 8f       	M[r4 + 24] = rMAC;
            L4_DBG_MSG1("aanc_buffer_details: %d", p_resp->b.buffer_size);
84200c5c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200c60:	08 25       	Null = rMAC - 4;
84200c62:	0f 68       	if LT jump (m) Lc_aanc_buffer_details_24;

84200c64 <Lc_aanc_buffer_details_22>:
84200c64:	55 f1 02 f0 	r0 = Null + 357565532;
84200c68:	5c 48 
84200c6a:	ff fd 00 f0 	call (m) 0xcde;
84200c6e:	35 e3 
84200c70:	08 6e       	jump (m) Lc_aanc_buffer_details_24;

84200c72 <Lc_aanc_buffer_details_23>:
        }
        else
        {
            p_resp->runs_in_place = FALSE;
84200c72:	31 92       	rMAC = MBU[r4 + 8];
84200c74:	11 ff f7 1f 	rMAC = rMAC AND 0xfffffff7;
84200c78:	31 9a       	MB[r4 + 8] = rMAC;
            p_resp->b.buffer_size = AANC_DEFAULT_BUFFER_SIZE;
84200c7a:	01 f0 80 40 	rMAC = Null + 128;
84200c7e:	31 8f       	M[r4 + 16] = rMAC;

84200c80 <Lc_aanc_buffer_details_24>:
        }
        p_resp->supports_metadata = TRUE;
84200c80:	31 92       	rMAC = MBU[r4 + 8];
84200c82:	11 ff ef 1f 	rMAC = rMAC AND 0xffffffef;
84200c86:	c9 c9       	rMAC = rMAC OR 0x10;
84200c88:	31 9a       	MB[r4 + 8] = rMAC;
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_MIC_ID];
84200c8a:	81 f0 01 88 	rMAC = M[r6 + 4];
84200c8e:	f1 8e       	M[r4 + 12] = rMAC;

84200c90 <Lc_aanc_buffer_details_25>:
    }

#endif /* DISABLE_IN_PLACE */
    return TRUE;
84200c90:	42 20       	r0 = Null + 1;

84200c92 <Lc_aanc_buffer_details_26>:
}
84200c92:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200c94:	d8 4c       	rts;

84200c96 <$_aanc_get_sched_info>:

bool aanc_get_sched_info(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
84200c96:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200c98:	17 00       	r5 = r0 + Null;
84200c9a:	2e 00       	r4 = r3 + Null;
    OP_SCHED_INFO_RSP* resp;

    resp = base_op_get_sched_info_ex(op_data, message_data, response_id);
84200c9c:	ef fd fb ff 	call (m) 0x41c;
84200ca0:	21 ec 
    if (resp == NULL)
84200ca2:	10 04       	Null = r0 - Null;
84200ca4:	09 62       	if NE jump (m) Lc_aanc_get_sched_info_3;

84200ca6 <Lc_aanc_get_sched_info_2>:
    {
        return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED,
                                             resp_data);
84200ca6:	03 f0 00 60 	r1 = Null + 4096;
84200caa:	34 00       	r2 = r4 + Null;
84200cac:	3a 00       	r0 = r5 + Null;
84200cae:	ef fd fc ff 	call (m) 0x4bc;
84200cb2:	2f e0 
84200cb4:	05 6e       	jump (m) Lc_aanc_get_sched_info_4;

84200cb6 <Lc_aanc_get_sched_info_3>:
    }

    *resp_data = resp;
84200cb6:	32 ee       	M[r4 + Null] = r0;
    resp->block_size = AANC_DEFAULT_BLOCK_SIZE;
84200cb8:	01 30       	rMAC = Null + 32;
84200cba:	91 8e       	M[r0 + 8] = rMAC;

    return TRUE;
84200cbc:	42 20       	r0 = Null + 1;

84200cbe <Lc_aanc_get_sched_info_4>:
}
84200cbe:	f2 48       	popm <FP, r4, r5, rLink>;
84200cc0:	d8 4c       	rts;

84200cc2 <$_aanc_opmsg_set_control>:
Opmsg handlers
*/
bool aanc_opmsg_set_control(OPERATOR_DATA *op_data, void *message_data,
                            unsigned *resp_length,
                            OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200cc2:	f6 1e       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x20;
84200cc4:	17 00       	r5 = r0 + Null;
84200cc6:	43 de       	M[FP + 32] = r1;
84200cc8:	20 09       	r6 = r2 + Null;
84200cca:	4d de       	M[FP + 36] = r3;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200ccc:	ef fd fc ff 	call (m) 0x4e6;
84200cd0:	3b e0 
84200cd2:	16 00       	r4 = r0 + Null;
    unsigned num_controls;
    unsigned ctrl_value;
    unsigned ctrl_id;

    CPS_CONTROL_SOURCE  ctrl_src;
    OPMSG_RESULT_STATES result = OPMSG_RESULT_STATES_NORMAL_STATE;
84200cd4:	02 09       	r8 = Null + Null;

    if(!cps_control_setup(message_data, resp_length, resp_data, &num_controls))
84200cd6:	45 13       	r3 = FP + 52;
84200cd8:	43 08       	r1 = r6 + Null;
84200cda:	4c d8       	r2 = M[FP + 36];
84200cdc:	42 d8       	r0 = M[FP + 32];
84200cde:	ef fd fe ff 	call (m) 0xab2;
84200ce2:	35 ee 
84200ce4:	10 04       	Null = r0 - Null;
84200ce6:	04 62       	if NE jump (m) Lc_aanc_opmsg_set_control_3;

84200ce8 <Lc_aanc_opmsg_set_control_2>:
    {
       return FALSE;
84200ce8:	02 00       	r0 = Null + Null;
84200cea:	0f f0 c7 e5 	jump (m) Lc_aanc_opmsg_set_control_70;

84200cee <Lc_aanc_opmsg_set_control_3>:
84200cee:	ff f7 f1 f7 	rMAC = Null + 2147483647;
84200cf2:	ff 7b 
84200cf4:	13 71       	r9 = Null + 2;
84200cf6:	09 71       	r7 = Null + 1;
84200cf8:	51 de       	M[FP + 40] = rMAC;
84200cfa:	c1 23       	rMAC = Null + 15;
84200cfc:	59 de       	M[FP + 44] = rMAC;
84200cfe:	41 22       	rMAC = Null + 9;
84200d00:	61 de       	M[FP + 48] = rMAC;
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    for (i=0; i<num_controls; i++)
84200d02:	00 09       	r6 = Null + Null;
84200d04:	03 6e       	jump (m) Lc_aanc_opmsg_set_control_6;

84200d06 <Lc_aanc_opmsg_set_control_4>:
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }

        result = OPMSG_RESULT_STATES_UNSUPPORTED_CONTROL;
84200d06:	22 71       	r8 = Null + 4;

84200d08 <Lc_aanc_opmsg_set_control_5>:
       return FALSE;
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    for (i=0; i<num_controls; i++)
84200d08:	08 75       	r6 = r6 + 1;

84200d0a <Lc_aanc_opmsg_set_control_6>:
84200d0a:	69 d8       	rMAC = M[FP + 52];
84200d0c:	1f f8 00 c2 	Null = r6 - rMAC;
84200d10:	02 f0 a3 e0 	if C jump (m) Lc_aanc_opmsg_set_control_10;

84200d14 <Lc_aanc_opmsg_set_control_7>:
    {
        ctrl_id = cps_control_get(message_data, i, &ctrl_value, &ctrl_src);
84200d14:	c5 13       	r3 = FP + 60;
84200d16:	84 13       	r2 = FP + 56;
84200d18:	43 08       	r1 = r6 + Null;
84200d1a:	42 d8       	r0 = M[FP + 32];
84200d1c:	ef fd fe ff 	call (m) 0xb00;
84200d20:	25 ef 

        /* Mode override */
        if (ctrl_id == OPMSG_CONTROL_MODE_ID)
84200d22:	50 24       	Null = r0 - 1;
84200d24:	85 62       	if NE jump (m) Lc_aanc_opmsg_set_control_33;

84200d26 <Lc_aanc_opmsg_set_control_8>:
        {

            /* Check for valid mode */
            ctrl_value &= AANC_SYSMODE_MASK;
84200d26:	71 d8       	rMAC = M[FP + 56];
84200d28:	09 c1       	rMAC = rMAC AND 0x7;
84200d2a:	71 de       	M[FP + 56] = rMAC;
            if (ctrl_value >= AANC_SYSMODE_MAX_MODES)
84200d2c:	c8 25       	Null = rMAC - 7;
84200d2e:	0e 64       	if NC jump (m) Lc_aanc_opmsg_set_control_12;

84200d30 <Lc_aanc_opmsg_set_control_9>:
            {
                result = OPMSG_RESULT_STATES_INVALID_CONTROL_VALUE;
84200d30:	2a 71       	r8 = Null + 5;

84200d32 <Lc_aanc_opmsg_set_control_10>:
    }

    /* Set current operating mode based on override */
    /* NB: double AND removes gain override bits from comparison */
    if ((p_ext_data->ovr_control & AANC_CONTROL_MODE_OVERRIDE)
        & AANC_CONTROL_MODE_OVERRIDE)
84200d32:	61 f0 62 88 	rMAC = M[r4 + 392];
84200d36:	11 f1 00 00 	rMAC = rMAC AND 0x2000;
84200d3a:	00 f0 e3 e4 	if EQ jump (m) Lc_aanc_opmsg_set_control_68;

84200d3e <Lc_aanc_opmsg_set_control_11>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
84200d3e:	61 f0 61 88 	rMAC = M[r4 + 388];
84200d42:	61 f0 5f 8e 	M[r4 + 380] = rMAC;
84200d46:	0f f0 df e4 	jump (m) Lc_aanc_opmsg_set_control_69;

84200d4a <Lc_aanc_opmsg_set_control_12>:
                result = OPMSG_RESULT_STATES_INVALID_CONTROL_VALUE;
                break;
            }

            /* Re-initialize event states if not in quiet mode */
            if (ctrl_value != AANC_SYSMODE_QUIET)
84200d4a:	88 25       	Null = rMAC - 6;
84200d4c:	0e 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_17;

84200d4e <Lc_aanc_opmsg_set_control_13>:
            {
                aanc_initialize_events(op_data, p_ext_data);
84200d4e:	33 00       	r1 = r4 + Null;
84200d50:	3a 00       	r0 = r5 + Null;
84200d52:	06 f0 25 e3 	call (m) Lc_aanc_initialize_events_1;
            }

            /* Gain update logic */
            switch (ctrl_value)
84200d56:	71 d8       	rMAC = M[FP + 56];
84200d58:	48 24       	Null = rMAC - 1;
84200d5a:	30 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_23;

84200d5c <Lc_aanc_opmsg_set_control_14>:
84200d5c:	88 24       	Null = rMAC - 2;
84200d5e:	38 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_25;

84200d60 <Lc_aanc_opmsg_set_control_15>:
84200d60:	c8 24       	Null = rMAC - 3;
84200d62:	31 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_24;

84200d64 <Lc_aanc_opmsg_set_control_16>:
84200d64:	88 25       	Null = rMAC - 6;
84200d66:	1c 62       	if NE jump (m) Lc_aanc_opmsg_set_control_19;

84200d68 <Lc_aanc_opmsg_set_control_17>:
                    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
                    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
                    break;
                case AANC_SYSMODE_QUIET:
                    /* Quiet mode changes FB fine gain */
                    p_ext_data->ff_gain.fine = (uint16)p_ext_data->ag->p_fxlms_stats->adaptive_gain;
84200d68:	61 f0 6a 88 	rMAC = M[r4 + 424];
84200d6c:	09 a8       	rMAC = M[rMAC + 64];
84200d6e:	49 88       	rMAC = M[rMAC + 4];
84200d70:	61 f0 d7 8c 	MH[r4 + 430] = rMAC;
                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200d74:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
84200d78:	61 f0 d6 8c 	MH[r4 + 428] = rMAC;
                    p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine >> 1;
84200d7c:	62 f0 e5 86 	r0 = MHU[r4 + 458];
84200d80:	12 58       	r0 = r0 ASHIFT -1;
84200d82:	62 f0 d9 8c 	MH[r4 + 434] = r0;

84200d86 <Lc_aanc_opmsg_set_control_18>:
                case AANC_SYSMODE_STATIC:
                    /* Set all gains to static values */
                    p_ext_data->ff_gain.fine = p_ext_data->ff_static_gain.fine;
                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
                    p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine;
                    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
84200d86:	61 f0 e4 86 	rMAC = MHU[r4 + 456];
84200d8a:	61 f0 d8 8c 	MH[r4 + 432] = rMAC;
                    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
84200d8e:	61 f0 e7 86 	rMAC = MHU[r4 + 462];
84200d92:	61 f0 db 8c 	MH[r4 + 438] = rMAC;
                    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
84200d96:	61 f0 e6 86 	rMAC = MHU[r4 + 460];
84200d9a:	61 f0 da 8c 	MH[r4 + 436] = rMAC;

84200d9e <Lc_aanc_opmsg_set_control_19>:
                    /* Handled by early exit above */
                    break;
            }

            /* Gentle mute reinitializes the flag */
            if (ctrl_value == AANC_SYSMODE_GENTLE_MUTE)
84200d9e:	71 d8       	rMAC = M[FP + 56];
84200da0:	48 25       	Null = rMAC - 5;
84200da2:	03 62       	if NE jump (m) Lc_aanc_opmsg_set_control_21;

84200da4 <Lc_aanc_opmsg_set_control_20>:
            {
                p_ext_data->gentle_mute_init_flag = FALSE;
84200da4:	60 f0 78 8e 	M[r4 + 480] = Null;

84200da8 <Lc_aanc_opmsg_set_control_21>:
            }

            /* Set target noise reduction to 1 when in Quiet Mode */
            if (ctrl_value == AANC_SYSMODE_QUIET)
84200da8:	71 d8       	rMAC = M[FP + 56];
84200daa:	88 25       	Null = rMAC - 6;
84200dac:	20 62       	if NE jump (m) Lc_aanc_opmsg_set_control_27;

84200dae <Lc_aanc_opmsg_set_control_22>:
            {
                p_ext_data->ag->p_fxlms_params->target_nr = AANC_QUIET_MODE_TARGET_NR;
84200dae:	61 f0 6a 88 	rMAC = M[r4 + 424];
84200db2:	52 d8       	r0 = M[FP + 40];
84200db4:	c9 99       	rMAC = M[rMAC + 60];
84200db6:	0a ee       	M[rMAC + Null] = r0;
84200db8:	1e 6e       	jump (m) Lc_aanc_opmsg_set_control_28;

84200dba <Lc_aanc_opmsg_set_control_23>:
                case AANC_SYSMODE_FREEZE:
                    /* Freeze doesn't change gains */
                    break;
                case AANC_SYSMODE_MUTE_ANC:
                    /* Mute FF and FB gains */
                    p_ext_data->ff_gain.fine = 0;
84200dba:	60 f0 d7 8c 	MH[r4 + 430] = Null;
                    p_ext_data->fb_gain.fine = 0;
84200dbe:	60 f0 d9 8c 	MH[r4 + 434] = Null;
                    break;
84200dc2:	ee 6f       	jump (m) Lc_aanc_opmsg_set_control_19;

84200dc4 <Lc_aanc_opmsg_set_control_24>:
                case AANC_SYSMODE_STATIC:
                    /* Set all gains to static values */
                    p_ext_data->ff_gain.fine = p_ext_data->ff_static_gain.fine;
84200dc4:	61 f0 e3 86 	rMAC = MHU[r4 + 454];
84200dc8:	61 f0 d7 8c 	MH[r4 + 430] = rMAC;
84200dcc:	07 6e       	jump (m) Lc_aanc_opmsg_set_control_26;

84200dce <Lc_aanc_opmsg_set_control_25>:
                    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
                    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
                    break;
                case AANC_SYSMODE_FULL:
                    /* Set gains to static & FF fine to algorithm value */
                    p_ext_data->ff_gain.fine = (uint16)p_ext_data->ag->p_fxlms_stats->adaptive_gain;
84200dce:	61 f0 6a 88 	rMAC = M[r4 + 424];
84200dd2:	09 a8       	rMAC = M[rMAC + 64];
84200dd4:	49 88       	rMAC = M[rMAC + 4];
84200dd6:	61 f0 d7 8c 	MH[r4 + 430] = rMAC;

84200dda <Lc_aanc_opmsg_set_control_26>:
                    p_ext_data->fb_gain.fine = 0;
                    break;
                case AANC_SYSMODE_STATIC:
                    /* Set all gains to static values */
                    p_ext_data->ff_gain.fine = p_ext_data->ff_static_gain.fine;
                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200dda:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
84200dde:	61 f0 d6 8c 	MH[r4 + 428] = rMAC;
                    p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine;
84200de2:	61 f0 e5 86 	rMAC = MHU[r4 + 458];
84200de6:	61 f0 d9 8c 	MH[r4 + 434] = rMAC;
84200dea:	ce 6f       	jump (m) Lc_aanc_opmsg_set_control_18;

84200dec <Lc_aanc_opmsg_set_control_27>:
                p_ext_data->ag->p_fxlms_params->target_nr = AANC_QUIET_MODE_TARGET_NR;

            }
            else
            {
                p_ext_data->ag->p_fxlms_params->target_nr = AANC_NORMAL_TARGET_NR;
84200dec:	61 f0 6a 88 	rMAC = M[r4 + 424];
84200df0:	c9 99       	rMAC = M[rMAC + 60];
84200df2:	08 ee       	M[rMAC + Null] = Null;

84200df4 <Lc_aanc_opmsg_set_control_28>:
            }

            /* Determine control mode source and set override flags for mode */
            if (ctrl_src == CPS_SOURCE_HOST)
84200df4:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200df8:	05 62       	if NE jump (m) Lc_aanc_opmsg_set_control_30;

84200dfa <Lc_aanc_opmsg_set_control_29>:
            {
                p_ext_data->host_mode = ctrl_value;
84200dfa:	71 d8       	rMAC = M[FP + 56];
84200dfc:	61 f0 60 8e 	M[r4 + 384] = rMAC;
84200e00:	84 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200e02 <Lc_aanc_opmsg_set_control_30>:
            }
            else
            {
                p_ext_data->qact_mode = ctrl_value;
84200e02:	71 d8       	rMAC = M[FP + 56];
84200e04:	61 f0 61 8e 	M[r4 + 388] = rMAC;
                /* Set or clear the QACT override flag.
                * &= is used to preserve the state of the gain bits in the
                * override word.
                */
                if (ctrl_src == CPS_SOURCE_OBPM_ENABLE)
84200e08:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200e0c:	88 24       	Null = rMAC - 2;
84200e0e:	09 62       	if NE jump (m) Lc_aanc_opmsg_set_control_32;

84200e10 <Lc_aanc_opmsg_set_control_31>:
                {
                    p_ext_data->ovr_control |= AANC_CONTROL_MODE_OVERRIDE;
84200e10:	61 f0 62 88 	rMAC = M[r4 + 392];
84200e14:	20 f0 00 f1 	rMAC = rMAC OR 0x2000;
84200e18:	51 d8 
84200e1a:	61 f0 62 8e 	M[r4 + 392] = rMAC;
84200e1e:	75 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200e20 <Lc_aanc_opmsg_set_control_32>:
                }
                else
                {
                    p_ext_data->ovr_control &= AANC_OVERRIDE_MODE_MASK;
84200e20:	61 f0 62 88 	rMAC = M[r4 + 392];
84200e24:	11 f6 ff 1f 	rMAC = rMAC AND 0xdfff;
84200e28:	61 f0 62 8e 	M[r4 + 392] = rMAC;
84200e2c:	6e 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200e2e <Lc_aanc_opmsg_set_control_33>:

            continue;
        }

        /* In/Out of Ear control */
        else if (ctrl_id == AANC_CONSTANT_IN_OUT_EAR_CTRL)
84200e2e:	d0 24       	Null = r0 - 3;
84200e30:	07 62       	if NE jump (m) Lc_aanc_opmsg_set_control_35;

84200e32 <Lc_aanc_opmsg_set_control_34>:
        {
            ctrl_value &= 0x01;
84200e32:	71 d8       	rMAC = M[FP + 56];
84200e34:	09 c0       	rMAC = rMAC AND 0x1;
84200e36:	71 de       	M[FP + 56] = rMAC;
            p_ext_data->in_out_status = ctrl_value;
84200e38:	61 f0 79 8e 	M[r4 + 484] = rMAC;

            /* No override flags indicated for in/out of ear */
            continue;
84200e3c:	66 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200e3e <Lc_aanc_opmsg_set_control_35>:
        }

        /* Channel control */
        else if (ctrl_id == AANC_CONSTANT_CHANNEL_CTRL)
84200e3e:	50 25       	Null = r0 - 5;
84200e40:	1a 62       	if NE jump (m) Lc_aanc_opmsg_set_control_42;

84200e42 <Lc_aanc_opmsg_set_control_36>:
        {
            /* Channel can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200e42:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200e46:	61 63       	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200e48 <Lc_aanc_opmsg_set_control_37>:
            {
                ctrl_value &= 0x1;
84200e48:	71 d8       	rMAC = M[FP + 56];
84200e4a:	09 c0       	rMAC = rMAC AND 0x1;
                if (ctrl_value == 0)
84200e4c:	71 de       	M[FP + 56] = rMAC;
84200e4e:	04 62       	if NE jump (m) Lc_aanc_opmsg_set_control_39;

84200e50 <Lc_aanc_opmsg_set_control_38>:
                {
                    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC0_ID;
84200e50:	69 f0 d0 8b 	MB[r4 + 464] = r7;
84200e54:	03 6e       	jump (m) Lc_aanc_opmsg_set_control_40;

84200e56 <Lc_aanc_opmsg_set_control_39>:
                }
                else
                {
                    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC1_ID;
84200e56:	6b f0 d0 8b 	MB[r4 + 464] = r9;

84200e5a <Lc_aanc_opmsg_set_control_40>:
                }
                L4_DBG_MSG1("AANC channel override: %d",
                            p_ext_data->anc_channel);
84200e5a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200e5e:	08 25       	Null = rMAC - 4;
84200e60:	54 69       	if LT jump (m) Lc_aanc_opmsg_set_control_5;

84200e62 <Lc_aanc_opmsg_set_control_41>:
84200e62:	63 f0 d0 81 	r1 = MBS[r4 + 464];
84200e66:	55 f1 02 f0 	r0 = Null + 357565556;
84200e6a:	74 48 
84200e6c:	ef fd ff ff 	call (m) 0xcde;
84200e70:	33 e3 
84200e72:	4b 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200e74 <Lc_aanc_opmsg_set_control_42>:
            /* No override flags indicated for channel */
            continue;
        }

        /* Feedforward control */
        else if (ctrl_id == AANC_CONSTANT_FEEDFORWARD_CTRL)
84200e74:	90 25       	Null = r0 - 6;
84200e76:	26 62       	if NE jump (m) Lc_aanc_opmsg_set_control_49;

84200e78 <Lc_aanc_opmsg_set_control_43>:
        {
            /* Feedforward can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200e78:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200e7c:	46 63       	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200e7e <Lc_aanc_opmsg_set_control_44>:
            {
                ctrl_value &= 0x1;
84200e7e:	71 d8       	rMAC = M[FP + 56];
84200e80:	09 c0       	rMAC = rMAC AND 0x1;
                if (ctrl_value == 0)
84200e82:	71 de       	M[FP + 56] = rMAC;
84200e84:	09 62       	if NE jump (m) Lc_aanc_opmsg_set_control_46;

84200e86 <Lc_aanc_opmsg_set_control_45>:
                {
                    /* hybrid */
                    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFB_ID;
84200e86:	6b f0 d1 8b 	MB[r4 + 465] = r9;
                    p_ext_data->anc_fb_path = AANC_ANC_PATH_FFA_ID;
84200e8a:	69 f0 d2 8b 	MB[r4 + 466] = r7;
                    p_ext_data->anc_clock_check_value = AANC_HYBRID_ENABLE;
84200e8e:	59 d8       	rMAC = M[FP + 44];
84200e90:	61 f0 ea 8c 	MH[r4 + 468] = rMAC;
84200e94:	08 6e       	jump (m) Lc_aanc_opmsg_set_control_47;

84200e96 <Lc_aanc_opmsg_set_control_46>:
                }
                else
                {
                    /* feedforward only */
                    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFA_ID;
84200e96:	69 f0 d1 8b 	MB[r4 + 465] = r7;
                    p_ext_data->anc_fb_path = 0;
84200e9a:	60 f0 d2 8b 	MB[r4 + 466] = Null;
                    p_ext_data->anc_clock_check_value = AANC_FEEDFORWARD_ENABLE;
84200e9e:	61 d8       	rMAC = M[FP + 48];
84200ea0:	61 f0 ea 8c 	MH[r4 + 468] = rMAC;

84200ea4 <Lc_aanc_opmsg_set_control_47>:
                }
                L4_DBG_MSG2("AANC feedforward override: %d - %d",
                            p_ext_data->anc_ff_path, p_ext_data->anc_fb_path);
84200ea4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200ea8:	08 25       	Null = rMAC - 4;
84200eaa:	2f 69       	if LT jump (m) Lc_aanc_opmsg_set_control_5;

84200eac <Lc_aanc_opmsg_set_control_48>:
84200eac:	64 f0 d2 81 	r2 = MBS[r4 + 466];
84200eb0:	63 f0 d1 81 	r1 = MBS[r4 + 465];
84200eb4:	55 f1 02 f0 	r0 = Null + 357565582;
84200eb8:	8e 48 
84200eba:	ef fd ff ff 	call (m) 0xcf2;
84200ebe:	39 e1 
84200ec0:	24 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200ec2 <Lc_aanc_opmsg_set_control_49>:
            /* No override flags indicated for feedforward */
            continue;
        }

        /* Gain override */
        else if (ctrl_id == AANC_CONSTANT_FF_FINE_GAIN_CTRL)
84200ec2:	10 25       	Null = r0 - 4;
84200ec4:	12 62       	if NE jump (m) Lc_aanc_opmsg_set_control_53;

84200ec6 <Lc_aanc_opmsg_set_control_50>:
        {
            if (override_gain(p_ext_data, ctrl_value, ctrl_src,
                              &p_ext_data->ff_gain.fine))
84200ec6:	65 f0 ae 21 	r3 = r4 + 430;
84200eca:	e4 f0 3c 80 	r2 = MBS[FP + 60];
84200ece:	73 d8       	r1 = M[FP + 56];
84200ed0:	32 00       	r0 = r4 + Null;
84200ed2:	05 f0 2b e1 	call (m) Lc_override_gain_1;
84200ed6:	10 04       	Null = r0 - Null;
84200ed8:	06 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_52;

84200eda <Lc_aanc_opmsg_set_control_51>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200eda:	33 00       	r1 = r4 + Null;
84200edc:	3a 00       	r0 = r5 + Null;
84200ede:	04 f0 39 e8 	call (m) Lc_aanc_update_gain_1;
84200ee2:	13 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200ee4 <Lc_aanc_opmsg_set_control_52>:
            }
            else
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
84200ee4:	5a 09       	r8 = r9 + Null;
84200ee6:	11 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200ee8 <Lc_aanc_opmsg_set_control_53>:
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_FF_COARSE_GAIN_CTRL)
84200ee8:	d0 25       	Null = r0 - 7;
84200eea:	10 62       	if NE jump (m) Lc_aanc_opmsg_set_control_56;

84200eec <Lc_aanc_opmsg_set_control_54>:
        {
            if (override_gain(p_ext_data, ctrl_value, ctrl_src,
                              &p_ext_data->ff_gain.coarse))
84200eec:	65 f0 ac 21 	r3 = r4 + 428;
84200ef0:	e4 f0 3c 80 	r2 = MBS[FP + 60];
84200ef4:	73 d8       	r1 = M[FP + 56];
84200ef6:	32 00       	r0 = r4 + Null;
84200ef8:	05 f0 25 e0 	call (m) Lc_override_gain_1;
84200efc:	10 04       	Null = r0 - Null;
84200efe:	f3 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_52;

84200f00 <Lc_aanc_opmsg_set_control_55>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200f00:	33 00       	r1 = r4 + Null;
84200f02:	3a 00       	r0 = r5 + Null;
84200f04:	04 f0 33 e7 	call (m) Lc_aanc_update_gain_1;
84200f08:	00 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200f0a <Lc_aanc_opmsg_set_control_56>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_FB_FINE_GAIN_CTRL)
84200f0a:	10 26       	Null = r0 - 8;
84200f0c:	11 62       	if NE jump (m) Lc_aanc_opmsg_set_control_59;

84200f0e <Lc_aanc_opmsg_set_control_57>:
        {
            if (override_gain(p_ext_data, ctrl_value, ctrl_src,
                              &p_ext_data->fb_gain.fine))
84200f0e:	65 f0 b2 21 	r3 = r4 + 434;
84200f12:	e4 f0 3c 80 	r2 = MBS[FP + 60];
84200f16:	73 d8       	r1 = M[FP + 56];
84200f18:	32 00       	r0 = r4 + Null;
84200f1a:	04 f0 23 ef 	call (m) Lc_override_gain_1;
84200f1e:	10 04       	Null = r0 - Null;
84200f20:	e2 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_52;

84200f22 <Lc_aanc_opmsg_set_control_58>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200f22:	33 00       	r1 = r4 + Null;
84200f24:	3a 00       	r0 = r5 + Null;
84200f26:	04 f0 31 e6 	call (m) Lc_aanc_update_gain_1;
84200f2a:	ff ff df eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200f2e <Lc_aanc_opmsg_set_control_59>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_FB_COARSE_GAIN_CTRL)
84200f2e:	50 26       	Null = r0 - 9;
84200f30:	11 62       	if NE jump (m) Lc_aanc_opmsg_set_control_62;

84200f32 <Lc_aanc_opmsg_set_control_60>:
        {
            if (override_gain(p_ext_data, ctrl_value, ctrl_src,
                              &p_ext_data->fb_gain.coarse))
84200f32:	65 f0 b0 21 	r3 = r4 + 432;
84200f36:	e4 f0 3c 80 	r2 = MBS[FP + 60];
84200f3a:	73 d8       	r1 = M[FP + 56];
84200f3c:	32 00       	r0 = r4 + Null;
84200f3e:	04 f0 3f ed 	call (m) Lc_override_gain_1;
84200f42:	10 04       	Null = r0 - Null;
84200f44:	d0 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_52;

84200f46 <Lc_aanc_opmsg_set_control_61>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200f46:	33 00       	r1 = r4 + Null;
84200f48:	3a 00       	r0 = r5 + Null;
84200f4a:	04 f0 2d e5 	call (m) Lc_aanc_update_gain_1;
84200f4e:	ff ff bb eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200f52 <Lc_aanc_opmsg_set_control_62>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_EC_FINE_GAIN_CTRL)
84200f52:	90 26       	Null = r0 - 10;
84200f54:	11 62       	if NE jump (m) Lc_aanc_opmsg_set_control_65;

84200f56 <Lc_aanc_opmsg_set_control_63>:
        {
            if (override_gain(p_ext_data, ctrl_value, ctrl_src,
                              &p_ext_data->ec_gain.fine))
84200f56:	65 f0 b6 21 	r3 = r4 + 438;
84200f5a:	e4 f0 3c 80 	r2 = MBS[FP + 60];
84200f5e:	73 d8       	r1 = M[FP + 56];
84200f60:	32 00       	r0 = r4 + Null;
84200f62:	04 f0 3b ec 	call (m) Lc_override_gain_1;
84200f66:	10 04       	Null = r0 - Null;
84200f68:	be 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_52;

84200f6a <Lc_aanc_opmsg_set_control_64>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200f6a:	33 00       	r1 = r4 + Null;
84200f6c:	3a 00       	r0 = r5 + Null;
84200f6e:	04 f0 29 e4 	call (m) Lc_aanc_update_gain_1;
84200f72:	ff ff 97 eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200f76 <Lc_aanc_opmsg_set_control_65>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_EC_COARSE_GAIN_CTRL)
84200f76:	d0 26       	Null = r0 - 11;
84200f78:	f1 ff 8f eb 	if NE jump (m) Lc_aanc_opmsg_set_control_4;

84200f7c <Lc_aanc_opmsg_set_control_66>:
        {
            if (override_gain(p_ext_data, ctrl_value, ctrl_src,
                              &p_ext_data->ec_gain.coarse))
84200f7c:	65 f0 b4 21 	r3 = r4 + 436;
84200f80:	e4 f0 3c 80 	r2 = MBS[FP + 60];
84200f84:	73 d8       	r1 = M[FP + 56];
84200f86:	32 00       	r0 = r4 + Null;
84200f88:	04 f0 35 eb 	call (m) Lc_override_gain_1;
84200f8c:	10 04       	Null = r0 - Null;
84200f8e:	ab 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_52;

84200f90 <Lc_aanc_opmsg_set_control_67>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200f90:	33 00       	r1 = r4 + Null;
84200f92:	3a 00       	r0 = r5 + Null;
84200f94:	04 f0 23 e3 	call (m) Lc_aanc_update_gain_1;
84200f98:	ff ff f1 ea 	jump (m) Lc_aanc_opmsg_set_control_5;

84200f9c <Lc_aanc_opmsg_set_control_68>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
    }
    else
    {
        p_ext_data->cur_mode = p_ext_data->host_mode;
84200f9c:	61 f0 60 88 	rMAC = M[r4 + 384];
84200fa0:	61 f0 5f 8e 	M[r4 + 380] = rMAC;

84200fa4 <Lc_aanc_opmsg_set_control_69>:
    }

    cps_response_set_result(resp_data, result);
84200fa4:	53 08       	r1 = r8 + Null;
84200fa6:	4a d8       	r0 = M[FP + 36];
84200fa8:	ef fd fd ff 	call (m) 0xb4e;
84200fac:	27 ed 

    return TRUE;
84200fae:	4a 08       	r0 = r7 + Null;

84200fb0 <Lc_aanc_opmsg_set_control_70>:
}
84200fb0:	f6 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200fb2:	d8 4c       	rts;

84200fb4 <$_aanc_opmsg_get_params>:

bool aanc_opmsg_get_params(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200fb4:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200fb6:	1f 00       	r5 = r1 + Null;
84200fb8:	26 00       	r4 = r2 + Null;
84200fba:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200fbc:	ef fd fa ff 	call (m) 0x4e6;
84200fc0:	2b e9 
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                     resp_length, resp_data);
84200fc2:	02 f0 ec 45 	r0 = r0 + 492;
84200fc6:	45 08       	r3 = r6 + Null;
84200fc8:	34 00       	r2 = r4 + Null;
84200fca:	3b 00       	r1 = r5 + Null;
84200fcc:	ef fd fb ff 	call (m) 0x792;
84200fd0:	27 ee 

84200fd2 <Lc_aanc_opmsg_get_params_2>:
}
84200fd2:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200fd4:	d8 4c       	rts;

84200fd6 <$_aanc_opmsg_get_defaults>:

bool aanc_opmsg_get_defaults(OPERATOR_DATA *op_data, void *message_data,
                             unsigned *resp_length,
                             OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200fd6:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200fd8:	1f 00       	r5 = r1 + Null;
84200fda:	26 00       	r4 = r2 + Null;
84200fdc:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200fde:	ef fd fa ff 	call (m) 0x4e6;
84200fe2:	29 e8 
                             unsigned *resp_length,
                             OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetDefaultsMsgHandler(&p_ext_data->params_def, message_data,
                                    resp_length, resp_data);
84200fe4:	02 f0 ec 45 	r0 = r0 + 492;
84200fe8:	45 08       	r3 = r6 + Null;
84200fea:	34 00       	r2 = r4 + Null;
84200fec:	3b 00       	r1 = r5 + Null;
84200fee:	ef fd fc ff 	call (m) 0x840;
84200ff2:	33 e2 

84200ff4 <Lc_aanc_opmsg_get_defaults_2>:
}
84200ff4:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200ff6:	d8 4c       	rts;

84200ff8 <$_aanc_opmsg_set_params>:

bool aanc_opmsg_set_params(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200ff8:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200ffa:	19 09       	r7 = r1 + Null;
84200ffc:	27 00       	r5 = r2 + Null;
84200ffe:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201000:	ef fd fa ff 	call (m) 0x4e6;
84201004:	27 e7 
84201006:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    bool retval;
    /* patch_fn(aanc_opmsg_set_params); */

    retval = cpsSetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                       resp_length, resp_data);
84201008:	62 f0 ec 21 	r0 = r4 + 492;
8420100c:	45 08       	r3 = r6 + Null;
8420100e:	3c 00       	r2 = r5 + Null;
84201010:	4b 08       	r1 = r7 + Null;
84201012:	ef fd fc ff 	call (m) 0x914;
84201016:	23 e8 
84201018:	17 00       	r5 = r0 + Null;

    if (retval)
8420101a:	05 60       	if EQ jump (m) Lc_aanc_opmsg_set_params_3;

8420101c <Lc_aanc_opmsg_set_params_2>:
    {
        /* Set re-initialization flag for capability */
        p_ext_data->re_init_flag = TRUE;
8420101c:	41 20       	rMAC = Null + 1;
8420101e:	61 f0 76 8e 	M[r4 + 472] = rMAC;
84201022:	0b 6e       	jump (m) Lc_aanc_opmsg_set_params_5;

84201024 <Lc_aanc_opmsg_set_params_3>:
    }
    else
    {
        L2_DBG_MSG("AANC Set Parameters Failed");
84201024:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201028:	88 24       	Null = rMAC - 2;
8420102a:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_params_5;

8420102c <Lc_aanc_opmsg_set_params_4>:
8420102c:	55 f1 02 f0 	r0 = Null + 357565617;
84201030:	b1 48 
84201032:	ef fd fe ff 	call (m) 0xccc;
84201036:	3b e4 

84201038 <Lc_aanc_opmsg_set_params_5>:
    }

    return retval;
84201038:	3a 00       	r0 = r5 + Null;

8420103a <Lc_aanc_opmsg_set_params_6>:
}
8420103a:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
8420103c:	d8 4c       	rts;

8420103e <$_aanc_opmsg_get_status>:

bool aanc_opmsg_get_status(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420103e:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84201040:	58 4c       	SP = SP + 96;
84201042:	19 09       	r7 = r1 + Null;
84201044:	27 00       	r5 = r2 + Null;
84201046:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201048:	ef fd fa ff 	call (m) 0x4e6;
8420104c:	3f e4 
8420104e:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    /* patch_fn_shared(aanc_capability);  TODO: patch functions */
    int i;

    /* Build the response */
    unsigned *resp = NULL;
84201050:	30 de       	M[FP + 24] = Null;
    if(!common_obpm_status_helper(message_data, resp_length, resp_data,
                                  sizeof(AANC_STATISTICS), &resp))
84201052:	81 11       	rMAC = FP + 24;
84201054:	09 1c       	pushm <rMAC>;
84201056:	05 f0 5c 40 	r3 = Null + 92;
8420105a:	44 08       	r2 = r6 + Null;
8420105c:	3b 00       	r1 = r5 + Null;
8420105e:	4a 08       	r0 = r7 + Null;
84201060:	ef fd fd ff 	call (m) 0xb64;
84201064:	25 e8 
84201066:	7f 4c       	SP = SP + -4;
84201068:	10 04       	Null = r0 - Null;
8420106a:	03 62       	if NE jump (m) Lc_aanc_opmsg_get_status_3;

8420106c <Lc_aanc_opmsg_get_status_2>:
    {
         return FALSE;
8420106c:	02 00       	r0 = Null + Null;
8420106e:	92 6e       	jump (m) Lc_aanc_opmsg_get_status_14;

84201070 <Lc_aanc_opmsg_get_status_3>:
    }

    if (resp)
84201070:	31 d8       	rMAC = M[FP + 24];
84201072:	8f 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_13;

84201074 <Lc_aanc_opmsg_get_status_4>:
    {
        AANC_STATISTICS stats;
        AANC_STATISTICS *pstats = &stats;
        FXLMS100_STATISTICS *p_fxlms_stats = p_ext_data->ag->p_fxlms_stats;
84201074:	62 f0 6a 88 	r0 = M[r4 + 424];
84201078:	11 a8       	rMAC = M[r0 + 64];
        ED100_STATISTICS *p_ed_int_stats = p_ext_data->ag->p_ed_int_stats;
8420107a:	29 f0 04 88 	r7 = M[r0 + 16];
        ED100_STATISTICS *p_ed_ext_stats = p_ext_data->ag->p_ed_ext_stats;
8420107e:	57 98       	r5 = M[r0 + 36];
        ED100_STATISTICS *p_ed_pb_stats = p_ext_data->ag->p_ed_pb_stats;
84201080:	28 f0 0d 88 	r6 = M[r0 + 52];
        ParamType *pparam = (ParamType*)pstats;

#ifdef USE_AANC_LICENSING
        p_ext_data->license_status = AANC_LICENSE_STATUS_LICENSING_BUILD_STATUS;
84201084:	00 f1 02 f0 	r0 = Null + 268435456;
84201088:	00 40 
8420108a:	62 f0 7a 8e 	M[r4 + 488] = r0;
        if (p_fxlms_stats->licensed)
8420108e:	88 88       	Null = M[rMAC + 8];
84201090:	06 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_6;

84201092 <Lc_aanc_opmsg_get_status_5>:
        {
            p_ext_data->license_status |= AANC_LICENSE_STATUS_FxLMS;
84201092:	00 f1 02 f0 	r0 = Null + 268435458;
84201096:	02 40 
84201098:	62 f0 7a 8e 	M[r4 + 488] = r0;

8420109c <Lc_aanc_opmsg_get_status_6>:
        /* NB: License status won't be set if the block is disabled.
         * Given that all EDs use the same license check, OR a comparison
         * between them.
         */
        if (p_ed_ext_stats->licensed || p_ed_int_stats->licensed ||
            p_ed_pb_stats->licensed)
8420109c:	38 89       	Null = M[r5 + 16];
8420109e:	07 62       	if NE jump (m) Lc_aanc_opmsg_get_status_9;

842010a0 <Lc_aanc_opmsg_get_status_7>:
842010a0:	90 f0 04 88 	Null = M[r7 + 16];
842010a4:	04 62       	if NE jump (m) Lc_aanc_opmsg_get_status_9;

842010a6 <Lc_aanc_opmsg_get_status_8>:
842010a6:	80 f0 04 88 	Null = M[r6 + 16];
842010aa:	06 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_10;

842010ac <Lc_aanc_opmsg_get_status_9>:
        {
            p_ext_data->license_status |= AANC_LICENSE_STATUS_ED;
842010ac:	62 f0 7a 88 	r0 = M[r4 + 488];
842010b0:	12 c8       	r0 = r0 OR 0x1;
842010b2:	62 f0 7a 8e 	M[r4 + 488] = r0;

842010b6 <Lc_aanc_opmsg_get_status_10>:
        }
#endif /* USE_AANC_LICENSING */

        pstats->OFFSET_CUR_MODE            = p_ext_data->cur_mode;
842010b6:	62 f0 5f 88 	r0 = M[r4 + 380];
842010ba:	3a de       	M[FP + 28] = r0;
        pstats->OFFSET_OVR_CONTROL         = p_ext_data->ovr_control;
842010bc:	62 f0 62 88 	r0 = M[r4 + 392];
842010c0:	42 de       	M[FP + 32] = r0;
        pstats->OFFSET_IN_OUT_EAR_CTRL     = p_ext_data->in_out_status;
842010c2:	62 f0 79 88 	r0 = M[r4 + 484];
842010c6:	4a de       	M[FP + 36] = r0;
        pstats->OFFSET_CHANNEL             = p_ext_data->anc_channel;
842010c8:	62 f0 d0 81 	r0 = MBS[r4 + 464];
842010cc:	52 de       	M[FP + 40] = r0;
        pstats->OFFSET_FEEDFORWARD_PATH    = p_ext_data->anc_ff_path;
842010ce:	62 f0 d1 81 	r0 = MBS[r4 + 465];
842010d2:	5a de       	M[FP + 44] = r0;
        pstats->OFFSET_LICENSE_STATUS      = p_ext_data->license_status;
842010d4:	62 f0 7a 88 	r0 = M[r4 + 488];
842010d8:	62 de       	M[FP + 48] = r0;
        pstats->OFFSET_FLAGS               = p_ext_data->flags;
842010da:	62 f0 64 88 	r0 = M[r4 + 400];
842010de:	6a de       	M[FP + 52] = r0;
        pstats->OFFSET_AG_CALC             = p_fxlms_stats->adaptive_gain;
842010e0:	49 88       	rMAC = M[rMAC + 4];
842010e2:	71 de       	M[FP + 56] = rMAC;
        /* Send previous gain values as stats because these are only updated
         * when the value is actually written to HW.
         */
        pstats->OFFSET_FF_FINE_GAIN_CTRL   = p_ext_data->ff_gain_prev.fine;
842010e4:	61 f0 dd 86 	rMAC = MHU[r4 + 442];
842010e8:	79 de       	M[FP + 60] = rMAC;
        pstats->OFFSET_FF_COARSE_GAIN_CTRL = p_ext_data->ff_gain_prev.coarse;
842010ea:	61 f0 dc 86 	rMAC = MHU[r4 + 440];
842010ee:	81 de       	M[FP + 64] = rMAC;
        pstats->OFFSET_FF_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->ff_gain_prev.fine, p_ext_data->ff_gain_prev.coarse);
842010f0:	63 f0 dc 86 	r1 = MHU[r4 + 440];
842010f4:	62 f0 dd 86 	r0 = MHU[r4 + 442];
842010f8:	0b f0 27 e2 	call (m) $_aanc_proc_calc_gain_db;
842010fc:	8a de       	M[FP + 68] = r0;
        pstats->OFFSET_FB_FINE_GAIN_CTRL   = p_ext_data->fb_gain_prev.fine;
842010fe:	61 f0 df 86 	rMAC = MHU[r4 + 446];
84201102:	91 de       	M[FP + 72] = rMAC;
        pstats->OFFSET_FB_COARSE_GAIN_CTRL = p_ext_data->fb_gain_prev.coarse;
84201104:	61 f0 de 86 	rMAC = MHU[r4 + 444];
84201108:	99 de       	M[FP + 76] = rMAC;
        pstats->OFFSET_FB_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->fb_gain_prev.fine, p_ext_data->fb_gain_prev.coarse);
8420110a:	63 f0 de 86 	r1 = MHU[r4 + 444];
8420110e:	62 f0 df 86 	r0 = MHU[r4 + 446];
84201112:	0b f0 2d e1 	call (m) $_aanc_proc_calc_gain_db;
84201116:	a2 de       	M[FP + 80] = r0;
        pstats->OFFSET_EC_FINE_GAIN_CTRL   = p_ext_data->ec_gain_prev.fine;
84201118:	61 f0 e1 86 	rMAC = MHU[r4 + 450];
8420111c:	a9 de       	M[FP + 84] = rMAC;
        pstats->OFFSET_EC_COARSE_GAIN_CTRL = p_ext_data->ec_gain_prev.coarse;
8420111e:	61 f0 e0 86 	rMAC = MHU[r4 + 448];
84201122:	b1 de       	M[FP + 88] = rMAC;
        pstats->OFFSET_EC_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->ec_gain_prev.fine, p_ext_data->ec_gain_prev.coarse);
84201124:	63 f0 e0 86 	r1 = MHU[r4 + 448];
84201128:	62 f0 e1 86 	r0 = MHU[r4 + 450];
8420112c:	0b f0 33 e0 	call (m) $_aanc_proc_calc_gain_db;
84201130:	ba de       	M[FP + 92] = r0;
        pstats->OFFSET_SPL_EXT             = p_ed_ext_stats->spl;
84201132:	39 e8       	rMAC = M[r5 + Null];
84201134:	c1 de       	M[FP + 96] = rMAC;
        pstats->OFFSET_SPL_INT             = p_ed_int_stats->spl;
84201136:	91 f0 00 e8 	rMAC = M[r7 + Null];
8420113a:	c9 de       	M[FP + 100] = rMAC;
        pstats->OFFSET_SPL_PB              = p_ed_pb_stats->spl;
8420113c:	81 f0 00 e8 	rMAC = M[r6 + Null];
84201140:	d1 de       	M[FP + 104] = rMAC;
        pstats->OFFSET_PEAK_EXT            = p_ext_data->ag->ext_peak_value;
84201142:	61 f0 6a 88 	rMAC = M[r4 + 424];
84201146:	09 a9       	rMAC = M[rMAC + 80];
84201148:	d9 de       	M[FP + 108] = rMAC;
        pstats->OFFSET_PEAK_INT            = p_ext_data->ag->int_peak_value;
8420114a:	61 f0 6a 88 	rMAC = M[r4 + 424];
8420114e:	49 a9       	rMAC = M[rMAC + 84];
84201150:	e1 de       	M[FP + 112] = rMAC;
        pstats->OFFSET_PEAK_PB             = p_ext_data->ag->pb_peak_value;
84201152:	61 f0 6a 88 	rMAC = M[r4 + 424];
84201156:	89 a9       	rMAC = M[rMAC + 88];
84201158:	e9 de       	M[FP + 116] = rMAC;

        /* Reset peak meters */
        p_ext_data->ag->ext_peak_value = 0;
8420115a:	61 f0 6a 88 	rMAC = M[r4 + 424];
8420115e:	08 af       	M[rMAC + 80] = Null;
        p_ext_data->ag->int_peak_value = 0;
84201160:	61 f0 6a 88 	rMAC = M[r4 + 424];
84201164:	48 af       	M[rMAC + 84] = Null;
        p_ext_data->ag->pb_peak_value = 0;
84201166:	61 f0 6a 88 	rMAC = M[r4 + 424];
8420116a:	88 af       	M[rMAC + 88] = Null;

        for (i=0; i<AANC_N_STAT/2; i++)
8420116c:	06 00       	r4 = Null + Null;
8420116e:	c7 11       	r5 = FP + 28;

84201170 <Lc_aanc_opmsg_get_status_11>:
        {
            resp = cpsPack2Words(pparam[2*i], pparam[2*i+1], resp);
84201170:	34 d8       	r2 = M[FP + 24];
84201172:	7b 88       	r1 = M[r5 + 4];
84201174:	3a e8       	r0 = M[r5 + Null];
84201176:	ff fd c5 f1 	call (m) 0x39caa;
8420117a:	35 e9 
8420117c:	32 de       	M[FP + 24] = r0;
        /* Reset peak meters */
        p_ext_data->ag->ext_peak_value = 0;
        p_ext_data->ag->int_peak_value = 0;
        p_ext_data->ag->pb_peak_value = 0;

        for (i=0; i<AANC_N_STAT/2; i++)
8420117e:	76 20       	r4 = r4 + 1;
84201180:	3f 22       	r5 = r5 + 8;
84201182:	f0 26       	Null = r4 - 11;
84201184:	f6 69       	if LT jump (m) Lc_aanc_opmsg_get_status_11;

84201186 <Lc_aanc_opmsg_get_status_12>:
        {
            resp = cpsPack2Words(pparam[2*i], pparam[2*i+1], resp);
        }
        if (AANC_N_STAT % 2) // last one
        {
            cpsPack1Word(pparam[AANC_N_STAT-1], resp);
84201186:	33 d8       	r1 = M[FP + 24];
84201188:	ea d8       	r0 = M[FP + 116];
8420118a:	ff fd c5 f1 	call (m) 0x39cda;
8420118e:	31 ea 

84201190 <Lc_aanc_opmsg_get_status_13>:
        }
    }

    return TRUE;
84201190:	42 20       	r0 = Null + 1;

84201192 <Lc_aanc_opmsg_get_status_14>:
}
84201192:	68 4c       	SP = SP + -96;
84201194:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84201196:	d8 4c       	rts;

84201198 <$_aanc_opmsg_set_ucid>:
}

bool aanc_opmsg_set_ucid(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *resp_length,
                         OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84201198:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420119a:	12 09       	r8 = r0 + Null;
8420119c:	19 09       	r7 = r1 + Null;
8420119e:	27 00       	r5 = r2 + Null;
842011a0:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842011a2:	ef fd f9 ff 	call (m) 0x4e6;
842011a6:	25 ea 
842011a8:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    PS_KEY_TYPE key;
    bool retval;

    retval = cpsSetUcidMsgHandler(&p_ext_data->params_def, message_data,
                                  resp_length, resp_data);
842011aa:	62 f0 ec 21 	r0 = r4 + 492;
842011ae:	45 08       	r3 = r6 + Null;
842011b0:	3c 00       	r2 = r5 + Null;
842011b2:	4b 08       	r1 = r7 + Null;
842011b4:	ef fd fb ff 	call (m) 0x9a6;
842011b8:	33 ef 
842011ba:	17 00       	r5 = r0 + Null;
    L5_DBG_MSG1("AANC cpsSetUcidMsgHandler Return Value %d", retval);
842011bc:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842011c0:	48 25       	Null = rMAC - 5;
842011c2:	08 68       	if LT jump (m) Lc_aanc_opmsg_set_ucid_3;

842011c4 <Lc_aanc_opmsg_set_ucid_2>:
842011c4:	55 f1 02 f0 	r0 = Null + 357565644;
842011c8:	cc 48 
842011ca:	3b 00       	r1 = r5 + Null;
842011cc:	ef fd fd ff 	call (m) 0xcde;
842011d0:	33 e8 

842011d2 <Lc_aanc_opmsg_set_ucid_3>:
    key = MAP_CAPID_UCID_SBID_TO_PSKEYID(p_ext_data->cap_id,
                                         p_ext_data->params_def.ucid,
                                         OPMSG_P_STORE_PARAMETER_SUB_ID);
842011d2:	61 f0 7f 88 	rMAC = M[r4 + 508];
842011d6:	8a c2       	r0 = rMAC AND 0x3f;
842011d8:	12 54       	r0 = r0 LSHIFT 1;
842011da:	b1 99       	rMAC = M[r4 + 56];
842011dc:	8b c6       	r1 = rMAC AND 0xffff;
842011de:	9b 55       	r1 = r1 LSHIFT 7;
842011e0:	9b 12       	r1 = r1 OR r0;

    ps_entry_read((void*)op_data, key, PERSIST_ANY, ups_params_aanc);
842011e2:	42 f0 05 f0 	r3 = Null + 69212111;
842011e6:	cf 6b 
842011e8:	04 00       	r2 = Null + Null;
842011ea:	52 08       	r0 = r8 + Null;
842011ec:	ff fd 33 f0 	call (m) 0x7888;
842011f0:	3d e4 

    L5_DBG_MSG1("AANC UCID Set to %d", p_ext_data->params_def.ucid);
842011f2:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842011f6:	48 25       	Null = rMAC - 5;
842011f8:	09 68       	if LT jump (m) Lc_aanc_opmsg_set_ucid_5;

842011fa <Lc_aanc_opmsg_set_ucid_4>:
842011fa:	63 f0 7f 88 	r1 = M[r4 + 508];
842011fe:	55 f1 02 f0 	r0 = Null + 357565686;
84201202:	f6 48 
84201204:	ef fd fd ff 	call (m) 0xcde;
84201208:	3b e6 

8420120a <Lc_aanc_opmsg_set_ucid_5>:

    p_ext_data->re_init_flag = TRUE;
8420120a:	41 20       	rMAC = Null + 1;
8420120c:	61 f0 76 8e 	M[r4 + 472] = rMAC;

    return retval;
84201210:	3a 00       	r0 = r5 + Null;

84201212 <Lc_aanc_opmsg_set_ucid_6>:
}
84201212:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84201214:	d8 4c       	rts;

84201216 <$_aanc_opmsg_get_ps_id>:

bool aanc_opmsg_get_ps_id(OPERATOR_DATA *op_data, void *message_data,
                          unsigned *resp_length,
                          OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84201216:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84201218:	1f 00       	r5 = r1 + Null;
8420121a:	26 00       	r4 = r2 + Null;
8420121c:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420121e:	ef fd f9 ff 	call (m) 0x4e6;
84201222:	29 e6 
                          unsigned *resp_length,
                          OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetUcidMsgHandler(&p_ext_data->params_def, p_ext_data->cap_id,
                                message_data, resp_length, resp_data);
84201224:	10 1c       	pushm <r6>;
84201226:	93 99       	r1 = M[r0 + 56];
84201228:	35 00       	r3 = r4 + Null;
8420122a:	02 f0 ec 45 	r0 = r0 + 492;
8420122e:	3c 00       	r2 = r5 + Null;
84201230:	ef fd fb ff 	call (m) 0x9c8;
84201234:	39 ec 
84201236:	7f 4c       	SP = SP + -4;

84201238 <Lc_aanc_opmsg_get_ps_id_2>:
}
84201238:	f3 48       	popm <FP, r4, r5, r6, rLink>;
8420123a:	d8 4c       	rts;

8420123c <$_aanc_opmsg_set_static_gain>:
Custom opmsg handlers
*/
bool aanc_opmsg_set_static_gain(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420123c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
8420123e:	1f 00       	r5 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201240:	ef fd f9 ff 	call (m) 0x4e6;
84201244:	27 e5 
84201246:	16 00       	r4 = r0 + Null;
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    p_ext_data->ff_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FF_COARSE_STATIC_GAIN);
84201248:	f9 88       	rMAC = M[r5 + 12];
8420124a:	8b c6       	r1 = rMAC AND 0xffff;
8420124c:	63 f0 e2 8c 	MH[r4 + 452] = r1;
    p_ext_data->ff_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FF_FINE_STATIC_GAIN);
84201250:	39 89       	rMAC = M[r5 + 16];
84201252:	8c c6       	r2 = rMAC AND 0xffff;
84201254:	64 f0 e3 8c 	MH[r4 + 454] = r2;
    L4_DBG_MSG2("AANC Set FF Static Gain: Coarse = %d, Fine = %d",
        p_ext_data->ff_static_gain.coarse, p_ext_data->ff_static_gain.fine);
84201258:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420125c:	08 25       	Null = rMAC - 4;
8420125e:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_static_gain_3;

84201260 <Lc_aanc_opmsg_set_static_gain_2>:
84201260:	55 f1 02 f0 	r0 = Null + 357565706;
84201264:	0a 49 
84201266:	ef fd fd ff 	call (m) 0xcf2;
8420126a:	2d e4 

8420126c <Lc_aanc_opmsg_set_static_gain_3>:

    p_ext_data->fb_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FB_COARSE_STATIC_GAIN);
8420126c:	79 89       	rMAC = M[r5 + 20];
8420126e:	8b c6       	r1 = rMAC AND 0xffff;
84201270:	63 f0 e4 8c 	MH[r4 + 456] = r1;
    p_ext_data->fb_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FB_FINE_STATIC_GAIN);
84201274:	b9 89       	rMAC = M[r5 + 24];
84201276:	8c c6       	r2 = rMAC AND 0xffff;
84201278:	64 f0 e5 8c 	MH[r4 + 458] = r2;
    L4_DBG_MSG2("AANC Set FB Static Gain: Coarse = %d, Fine = %d",
        p_ext_data->fb_static_gain.coarse, p_ext_data->fb_static_gain.fine);
8420127c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201280:	08 25       	Null = rMAC - 4;
84201282:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_static_gain_5;

84201284 <Lc_aanc_opmsg_set_static_gain_4>:
84201284:	55 f1 02 f0 	r0 = Null + 357565754;
84201288:	3a 49 
8420128a:	ef fd fd ff 	call (m) 0xcf2;
8420128e:	29 e3 

84201290 <Lc_aanc_opmsg_set_static_gain_5>:

    p_ext_data->ec_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, EC_COARSE_STATIC_GAIN);
84201290:	f9 89       	rMAC = M[r5 + 28];
84201292:	8b c6       	r1 = rMAC AND 0xffff;
84201294:	63 f0 e6 8c 	MH[r4 + 460] = r1;
    p_ext_data->ec_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, EC_FINE_STATIC_GAIN);
84201298:	39 98       	rMAC = M[r5 + 32];
8420129a:	8c c6       	r2 = rMAC AND 0xffff;
8420129c:	64 f0 e7 8c 	MH[r4 + 462] = r2;
    L4_DBG_MSG2("AANC Set EC Static Gain: Coarse = %d, Fine = %d",
        p_ext_data->ec_static_gain.coarse, p_ext_data->ec_static_gain.fine);
842012a0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842012a4:	08 25       	Null = rMAC - 4;
842012a6:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_static_gain_7;

842012a8 <Lc_aanc_opmsg_set_static_gain_6>:
842012a8:	55 f1 02 f0 	r0 = Null + 357565802;
842012ac:	6a 49 
842012ae:	ef fd fd ff 	call (m) 0xcf2;
842012b2:	25 e2 

842012b4 <Lc_aanc_opmsg_set_static_gain_7>:
    p_ext_data->flags |= AANC_FLAGS_STATIC_GAIN_LOADED;
842012b4:	61 f0 64 88 	rMAC = M[r4 + 400];
842012b8:	c9 ce       	rMAC = rMAC OR 0x10000;
842012ba:	61 f0 64 8e 	M[r4 + 400] = rMAC;

    return TRUE;
842012be:	42 20       	r0 = Null + 1;

842012c0 <Lc_aanc_opmsg_set_static_gain_8>:
}
842012c0:	f2 48       	popm <FP, r4, r5, rLink>;
842012c2:	d8 4c       	rts;

842012c4 <$_aanc_opmsg_set_plant_model>:

bool aanc_opmsg_set_plant_model(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842012c4:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
842012c6:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842012c8:	ef fd f9 ff 	call (m) 0x4e6;
842012cc:	3f e0 
842012ce:	17 00       	r5 = r0 + Null;
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!aanc_fxlms100_set_plant_model(p_ext_data->ag->p_fxlms, message_data))
842012d0:	71 f0 6a 88 	rMAC = M[r5 + 424];
842012d4:	4a a8       	r0 = M[rMAC + 68];
842012d6:	33 00       	r1 = r4 + Null;
842012d8:	0d f0 33 e8 	call (m) $_aanc_fxlms100_set_plant_model;
842012dc:	10 04       	Null = r0 - Null;
842012de:	0d 62       	if NE jump (m) Lc_aanc_opmsg_set_plant_model_5;

842012e0 <Lc_aanc_opmsg_set_plant_model_2>:
    {
        L4_DBG_MSG("AANC set plant coefficients failed");
842012e0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842012e4:	08 25       	Null = rMAC - 4;
842012e6:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_plant_model_4;

842012e8 <Lc_aanc_opmsg_set_plant_model_3>:
842012e8:	55 f1 02 f0 	r0 = Null + 357565850;
842012ec:	9a 49 
842012ee:	ef fd fc ff 	call (m) 0xccc;
842012f2:	3f ee 

842012f4 <Lc_aanc_opmsg_set_plant_model_4>:
        return FALSE;
842012f4:	02 00       	r0 = Null + Null;
842012f6:	09 6e       	jump (m) Lc_aanc_opmsg_set_plant_model_6;

842012f8 <Lc_aanc_opmsg_set_plant_model_5>:
    }

    p_ext_data->flags |= AANC_FLAGS_PLANT_MODEL_LOADED;
842012f8:	71 f0 64 88 	rMAC = M[r5 + 400];
842012fc:	00 f2 00 f1 	rMAC = rMAC OR 0x20000;
84201300:	51 d8 
84201302:	71 f0 64 8e 	M[r5 + 400] = rMAC;

    return TRUE;
84201306:	42 20       	r0 = Null + 1;

84201308 <Lc_aanc_opmsg_set_plant_model_6>:
}
84201308:	f2 48       	popm <FP, r4, r5, rLink>;
8420130a:	d8 4c       	rts;

8420130c <$_aanc_opmsg_set_control_model>:

bool aanc_opmsg_set_control_model(OPERATOR_DATA *op_data,
                                  void *message_data,
                                  unsigned *resp_length,
                                  OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420130c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
8420130e:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201310:	ef fd f8 ff 	call (m) 0x4e6;
84201314:	37 ee 
84201316:	17 00       	r5 = r0 + Null;
                                  unsigned *resp_length,
                                  OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!aanc_fxlms100_set_control_model(p_ext_data->ag->p_fxlms, message_data))
84201318:	71 f0 6a 88 	rMAC = M[r5 + 424];
8420131c:	4a a8       	r0 = M[rMAC + 68];
8420131e:	33 00       	r1 = r4 + Null;
84201320:	0d f0 39 eb 	call (m) $_aanc_fxlms100_set_control_model;
84201324:	10 04       	Null = r0 - Null;
84201326:	0d 62       	if NE jump (m) Lc_aanc_opmsg_set_control_model_5;

84201328 <Lc_aanc_opmsg_set_control_model_2>:
    {
        L4_DBG_MSG("AANC set control coefficients failed");
84201328:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420132c:	08 25       	Null = rMAC - 4;
8420132e:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_control_model_4;

84201330 <Lc_aanc_opmsg_set_control_model_3>:
84201330:	55 f1 02 f0 	r0 = Null + 357565885;
84201334:	bd 49 
84201336:	ef fd fc ff 	call (m) 0xccc;
8420133a:	37 ec 

8420133c <Lc_aanc_opmsg_set_control_model_4>:
        return FALSE;
8420133c:	02 00       	r0 = Null + Null;
8420133e:	0c 6e       	jump (m) Lc_aanc_opmsg_set_control_model_6;

84201340 <Lc_aanc_opmsg_set_control_model_5>:
    }

    p_ext_data->flags |= AANC_FLAGS_CONTROL_MODEL_LOADED;
84201340:	71 f0 64 88 	rMAC = M[r5 + 400];
84201344:	00 f4 00 f1 	rMAC = rMAC OR 0x40000;
84201348:	51 d8 
8420134a:	71 f0 64 8e 	M[r5 + 400] = rMAC;

    p_ext_data->re_init_flag = TRUE;
8420134e:	41 20       	rMAC = Null + 1;
84201350:	71 f0 76 8e 	M[r5 + 472] = rMAC;

    return TRUE;
84201354:	0a 00       	r0 = rMAC + Null;

84201356 <Lc_aanc_opmsg_set_control_model_6>:
}
84201356:	f2 48       	popm <FP, r4, r5, rLink>;
84201358:	d8 4c       	rts;

8420135a <$_aanc_process_data>:

/****************************************************************************
Data processing function
*/
void aanc_process_data(OPERATOR_DATA *op_data, TOUCHED_TERMINALS *touched)
{
8420135a:	f6 1e       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x20;
8420135c:	42 de       	M[FP + 32] = r0;
8420135e:	4b de       	M[FP + 36] = r1;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201360:	ef fd f8 ff 	call (m) 0x4e6;
84201364:	27 ec 
84201366:	12 09       	r8 = r0 + Null;
    int i = 0;

    /* Certain conditions require an "early exit" that will just discard any
     * data in the input buffers and not do any other processing
     */
    bool exit_early = FALSE;
84201368:	01 09       	r7 = Null + Null;

    /* track the number of samples process */
    int sample_count = 0;
8420136a:	03 09       	r9 = Null + Null;

    /* After data is processed flags are tested to determine the equivalent
     * operating state. This is an input to the gain update decision state
     * machine.
     */
    unsigned mode_after_flags = p_ext_data->cur_mode;
8420136c:	a1 f0 5f 88 	rMAC = M[r8 + 380];
84201370:	51 de       	M[FP + 40] = rMAC;

    /* Reference the calculated gain */
    unsigned *p_gain_calc = &p_ext_data->ag->p_fxlms_stats->adaptive_gain;
84201372:	a1 f0 6a 88 	rMAC = M[r8 + 424];
84201376:	09 a8       	rMAC = M[rMAC + 64];
84201378:	09 21       	rMAC = rMAC + 4;
8420137a:	59 de       	M[FP + 44] = rMAC;

    /* Reference the capability parameters */
    AANC_PARAMETERS *p_params = &p_ext_data->aanc_cap_params;
8420137c:	a1 f0 3c 20 	rMAC = r8 + 60;
84201380:	61 de       	M[FP + 48] = rMAC;

    bool calculate_gain = TRUE;
84201382:	41 20       	rMAC = Null + 1;
84201384:	69 de       	M[FP + 52] = rMAC;
 * number of samples will be returned.
 *
 */
static inline int aanc_calc_samples_to_process(AANC_OP_DATA *p_ext_data)
{
    int i, amt, min_data_space = AANC_DEFAULT_FRAME_SIZE;
84201386:	06 f0 40 40 	r4 = Null + 64;

    /* Return if int and ext mic input terminals are not connected */
    if ((p_ext_data->touched_sinks & AANC_MIN_VALID_SINKS) != AANC_MIN_VALID_SINKS)
8420138a:	a1 f0 c6 86 	rMAC = MHU[r8 + 396];
8420138e:	11 f0 0c 00 	rMAC = rMAC AND 0xc;
84201392:	08 27       	Null = rMAC - 12;
84201394:	0e 60       	if EQ jump (m) Lc_aanc_process_data_4;

84201396 <Lc_aanc_process_data_2>:
    samples_to_process = aanc_calc_samples_to_process(p_ext_data);

    /* Return early if int and ext mic input terminals are not connected */
    if (samples_to_process == INT_MAX)
    {
        L5_DBG_MSG("Minimum number of ports (int and ext mic) not connected");
84201396:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420139a:	48 25       	Null = rMAC - 5;
8420139c:	0b f0 af e8 	if LT jump (m) Lc_aanc_process_data_108;

842013a0 <Lc_aanc_process_data_3>:
842013a0:	55 f1 02 f0 	r0 = Null + 357565922;
842013a4:	e2 49 
842013a6:	ef fd fc ff 	call (m) 0xccc;
842013aa:	27 e9 
842013ac:	0f f0 9f e8 	jump (m) Lc_aanc_process_data_108;

842013b0 <Lc_aanc_process_data_4>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
842013b0:	07 00       	r5 = Null + Null;
842013b2:	50 09       	r6 = r8 + Null;

842013b4 <Lc_aanc_process_data_5>:
    {
        if (p_ext_data->inputs[i] != NULL)
842013b4:	82 f0 00 e8 	r0 = M[r6 + Null];
842013b8:	07 60       	if EQ jump (m) Lc_aanc_process_data_8;

842013ba <Lc_aanc_process_data_6>:
        {
            amt = cbuffer_calc_amount_data_in_words(p_ext_data->inputs[i]);
842013ba:	ff fd c5 f1 	call (m) 0x39dd4;
842013be:	3b e0 
            if (amt < min_data_space)
842013c0:	90 05       	Null = r0 - r4;
842013c2:	02 66       	if GE jump (m) Lc_aanc_process_data_8;

842013c4 <Lc_aanc_process_data_7>:
            {
                min_data_space = amt;
842013c4:	16 00       	r4 = r0 + Null;

842013c6 <Lc_aanc_process_data_8>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
842013c6:	7f 20       	r5 = r5 + 1;
842013c8:	20 75       	r6 = r6 + 4;
842013ca:	f8 24       	Null = r5 - 3;
842013cc:	f4 6d       	if LE jump (m) Lc_aanc_process_data_5;

842013ce <Lc_aanc_process_data_9>:
            }
        }
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
842013ce:	a1 f0 c7 86 	rMAC = MHU[r8 + 398];
842013d2:	11 60       	if EQ jump (m) Lc_aanc_process_data_15;

842013d4 <Lc_aanc_process_data_10>:
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
842013d4:	07 00       	r5 = Null + Null;
842013d6:	a8 f0 10 20 	r6 = r8 + 16;

842013da <Lc_aanc_process_data_11>:
        {
            if (p_ext_data->outputs[i] != NULL)
842013da:	82 f0 00 e8 	r0 = M[r6 + Null];
842013de:	07 60       	if EQ jump (m) Lc_aanc_process_data_14;

842013e0 <Lc_aanc_process_data_12>:
            {
                amt = cbuffer_calc_amount_space_in_words(p_ext_data->outputs[i]);
842013e0:	ff fd c4 f1 	call (m) 0x39d88;
842013e4:	29 ed 
                if (amt < min_data_space)
842013e6:	90 05       	Null = r0 - r4;
842013e8:	02 66       	if GE jump (m) Lc_aanc_process_data_14;

842013ea <Lc_aanc_process_data_13>:
                {
                    min_data_space = amt;
842013ea:	16 00       	r4 = r0 + Null;

842013ec <Lc_aanc_process_data_14>:
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
842013ec:	7f 20       	r5 = r5 + 1;
842013ee:	20 75       	r6 = r6 + 4;
842013f0:	f8 24       	Null = r5 - 3;
842013f2:	f4 6d       	if LE jump (m) Lc_aanc_process_data_11;

842013f4 <Lc_aanc_process_data_15>:
            }
        }
    }
    /* Samples to process determined as minimum of data and space available */
    return min_data_space;
}
842013f4:	30 09       	r6 = r4 + Null;
        L5_DBG_MSG("Minimum number of ports (int and ext mic) not connected");
        return;
    }

     /* Return early if no data or not enough space to process */
    if (samples_to_process < AANC_DEFAULT_FRAME_SIZE)
842013f6:	60 f0 40 24 	Null = r4 - 64;
842013fa:	0f 66       	if GE jump (m) Lc_aanc_process_data_18;

842013fc <Lc_aanc_process_data_16>:
    {
        L5_DBG_MSG1("Not enough data/space to process (%d)", samples_to_process);
842013fc:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201400:	48 25       	Null = rMAC - 5;
84201402:	0b f0 c9 e7 	if LT jump (m) Lc_aanc_process_data_108;

84201406 <Lc_aanc_process_data_17>:
84201406:	55 f1 02 f0 	r0 = Null + 357565978;
8420140a:	1a 4a 
8420140c:	33 00       	r1 = r4 + Null;
8420140e:	ef fd fc ff 	call (m) 0xcde;
84201412:	31 e6 
84201414:	0f f0 b7 e7 	jump (m) Lc_aanc_process_data_108;

84201418 <Lc_aanc_process_data_18>:
    /* Other conditions that are invalid for running AANC need to discard
     * input data if it exists.
     */

    /* Don't do any processing in standby */
    if (p_ext_data->cur_mode == AANC_SYSMODE_STANDBY)
84201418:	a0 f0 5f 88 	Null = M[r8 + 380];
8420141c:	02 62       	if NE jump (m) Lc_aanc_process_data_20;

8420141e <Lc_aanc_process_data_19>:
    {
        exit_early = TRUE;
8420141e:	09 71       	r7 = Null + 1;

84201420 <Lc_aanc_process_data_20>:
    }

    /* Don't do any processing if out of ear */
    bool disable_ear_check = (p_params->OFFSET_AANC_DEBUG &
                              AANC_CONFIG_AANC_DEBUG_DISABLE_EAR_STATUS_CHECK);
84201420:	61 d8       	rMAC = M[FP + 48];
84201422:	49 89       	rMAC = M[rMAC + 20];
84201424:	49 c0       	rMAC = rMAC AND 0x2;
    if ((p_ext_data->in_out_status != AANC_IN_EAR) && !disable_ear_check)
84201426:	a2 f0 79 88 	r0 = M[r8 + 484];
8420142a:	50 24       	Null = r0 - 1;
8420142c:	04 60       	if EQ jump (m) Lc_aanc_process_data_23;

8420142e <Lc_aanc_process_data_21>:
8420142e:	08 04       	Null = rMAC - Null;
84201430:	02 62       	if NE jump (m) Lc_aanc_process_data_23;

84201432 <Lc_aanc_process_data_22>:
    {
        exit_early = TRUE;
84201432:	09 71       	r7 = Null + 1;

84201434 <Lc_aanc_process_data_23>:

    /* Don't do any processing if ANC HW clocks are invalid */
#ifndef RUNNING_ON_KALSIM
    uint16 anc0_enable;
    uint16 anc1_enable;
    uint16 *anc_selected = &anc0_enable;
84201434:	86 13       	r4 = FP + 56;

    stream_get_anc_enable(&anc0_enable, &anc1_enable);
84201436:	c3 13       	r1 = FP + 60;
84201438:	82 13       	r0 = FP + 56;
8420143a:	ff fd 56 f0 	call (m) 0xc1c2;
8420143e:	29 ec 

    if (p_ext_data->anc_channel == AANC_ANC_INSTANCE_ANC1_ID)
84201440:	a1 f0 d0 81 	rMAC = MBS[r8 + 464];
84201444:	88 24       	Null = rMAC - 2;
84201446:	02 62       	if NE jump (m) Lc_aanc_process_data_25;

84201448 <Lc_aanc_process_data_24>:
    {
        anc_selected = &anc1_enable;
84201448:	c6 13       	r4 = FP + 60;

8420144a <Lc_aanc_process_data_25>:
    }

    bool anc_is_running = *anc_selected == p_ext_data->anc_clock_check_value;
8420144a:	33 e6       	r1 = MHU[r4 + Null];
8420144c:	a2 f0 ea 86 	r0 = MHU[r8 + 468];
84201450:	01 00       	rMAC = Null + Null;
84201452:	98 04       	Null = r1 - r0;
84201454:	20 f0 41 ce 	if EQ rMAC = Null + 1;
    bool disable_clock_check = (p_params->OFFSET_AANC_DEBUG &
                                AANC_CONFIG_AANC_DEBUG_DISABLE_ANC_CLOCK_CHECK);
84201458:	62 d8       	r0 = M[FP + 48];
8420145a:	52 89       	r0 = M[r0 + 20];
8420145c:	d2 c0       	r0 = r0 AND 0x4;
    /* Don't do any processing if HW clocks aren't running */
    if (!anc_is_running && !disable_clock_check)
8420145e:	08 04       	Null = rMAC - Null;
84201460:	79 62       	if NE jump (m) Lc_aanc_process_data_44;

84201462 <Lc_aanc_process_data_26>:
84201462:	10 04       	Null = r0 - Null;
84201464:	77 62       	if NE jump (m) Lc_aanc_process_data_44;

84201466 <Lc_aanc_process_data_27>:
    {
        L2_DBG_MSG1("AANC invalid clocks detected: %d", *anc_selected);
84201466:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420146a:	88 24       	Null = rMAC - 2;
8420146c:	07 68       	if LT jump (m) Lc_aanc_process_data_29;

8420146e <Lc_aanc_process_data_28>:
8420146e:	55 f1 02 f0 	r0 = Null + 357566016;
84201472:	40 4a 
84201474:	ef fd fc ff 	call (m) 0xcde;
84201478:	2b e3 

8420147a <Lc_aanc_process_data_29>:
    }
#endif

    if (exit_early)
    {
        bool discard_data = TRUE;
8420147a:	09 71       	r7 = Null + 1;

8420147c <Lc_aanc_process_data_30>:

        /* There is at least 1 frame to process */
        do {
            /* Iterate through all sinks */
            for (i = 0; i < AANC_MAX_SINKS; i++)
8420147c:	06 00       	r4 = Null + Null;
8420147e:	57 08       	r5 = r8 + Null;

84201480 <Lc_aanc_process_data_31>:
            {
                if (p_ext_data->inputs[i] != NULL)
84201480:	3a e8       	r0 = M[r5 + Null];
84201482:	0f 60       	if EQ jump (m) Lc_aanc_process_data_34;

84201484 <Lc_aanc_process_data_32>:
                {
                    /* Discard a frame of data */
                    cbuffer_discard_data(p_ext_data->inputs[i],
                                         AANC_DEFAULT_FRAME_SIZE);
84201484:	03 f0 40 40 	r1 = Null + 64;
84201488:	ff fd c5 f1 	call (m) 0x39f54;
8420148c:	2d e6 

                    /* If there isn't a frame worth of data left then don't
                     * iterate through the input terminals again.
                     */
                    samples_to_process = cbuffer_calc_amount_data_in_words(
                        p_ext_data->inputs[i]);
8420148e:	3a e8       	r0 = M[r5 + Null];
84201490:	ff fd c4 f1 	call (m) 0x39dd4;
84201494:	25 ea 
84201496:	10 09       	r6 = r0 + Null;

                    if (samples_to_process < AANC_DEFAULT_FRAME_SIZE)
84201498:	80 f0 40 24 	Null = r6 - 64;
8420149c:	02 66       	if GE jump (m) Lc_aanc_process_data_34;

8420149e <Lc_aanc_process_data_33>:
                    {
                        discard_data = FALSE;
8420149e:	01 09       	r7 = Null + Null;

842014a0 <Lc_aanc_process_data_34>:
        bool discard_data = TRUE;

        /* There is at least 1 frame to process */
        do {
            /* Iterate through all sinks */
            for (i = 0; i < AANC_MAX_SINKS; i++)
842014a0:	76 20       	r4 = r4 + 1;
842014a2:	3f 21       	r5 = r5 + 4;
842014a4:	30 25       	Null = r4 - 4;
842014a6:	ed 69       	if LT jump (m) Lc_aanc_process_data_31;

842014a8 <Lc_aanc_process_data_35>:
                    {
                        discard_data = FALSE;
                    }
                }
            }
        } while (discard_data);
842014a8:	0f f9 00 c2 	Null = r7 - Null;
842014ac:	e8 63       	if NE jump (m) Lc_aanc_process_data_30;

842014ae <Lc_aanc_process_data_36>:

    /***************************
     * Adaptive gain processing
     ***************************/

    if (p_ext_data->re_init_flag == TRUE)
842014ae:	a1 f0 76 88 	rMAC = M[r8 + 472];
842014b2:	48 24       	Null = rMAC - 1;
842014b4:	43 62       	if NE jump (m) Lc_aanc_process_data_40;

842014b6 <Lc_aanc_process_data_37>:
    {
        ADAPTIVE_GAIN *p_ag = p_ext_data->ag;
842014b6:	a6 f0 6a 88 	r4 = M[r8 + 424];
        p_ext_data->re_init_flag = FALSE;
842014ba:	a0 f0 76 8e 	M[r8 + 472] = Null;

        /* Copy terminal buffer pointers */
        p_ag->p_playback_ip = p_ext_data->inputs[AANC_PLAYBACK_TERMINAL_ID];
842014be:	a1 f0 00 e8 	rMAC = M[r8 + Null];
842014c2:	61 f0 20 8e 	M[r4 + 128] = rMAC;
        p_ag->p_fbmon_ip = p_ext_data->inputs[AANC_FB_MON_TERMINAL_ID];
842014c6:	a1 f0 01 88 	rMAC = M[r8 + 4];
842014ca:	71 bf       	M[r4 + 116] = rMAC;
        p_ag->p_mic_int_ip = p_ext_data->inputs[AANC_MIC_INT_TERMINAL_ID];
842014cc:	a1 f0 02 88 	rMAC = M[r8 + 8];
842014d0:	b1 bf       	M[r4 + 120] = rMAC;
        p_ag->p_mic_ext_ip = p_ext_data->inputs[AANC_MIC_EXT_TERMINAL_ID];
842014d2:	a1 f0 03 88 	rMAC = M[r8 + 12];
842014d6:	f1 bf       	M[r4 + 124] = rMAC;

        p_ag->p_playback_op = p_ext_data->outputs[AANC_PLAYBACK_TERMINAL_ID];
842014d8:	a1 f0 04 88 	rMAC = M[r8 + 16];
842014dc:	31 bf       	M[r4 + 112] = rMAC;
        p_ag->p_fbmon_op = p_ext_data->outputs[AANC_FB_MON_TERMINAL_ID];
842014de:	a1 f0 05 88 	rMAC = M[r8 + 20];
842014e2:	61 f0 21 8e 	M[r4 + 132] = rMAC;
        p_ag->p_mic_int_op = p_ext_data->outputs[AANC_MIC_INT_TERMINAL_ID];
842014e6:	a1 f0 06 88 	rMAC = M[r8 + 24];
842014ea:	61 f0 22 8e 	M[r4 + 136] = rMAC;
        p_ag->p_mic_ext_op = p_ext_data->outputs[AANC_MIC_EXT_TERMINAL_ID];
842014ee:	a1 f0 07 88 	rMAC = M[r8 + 28];
842014f2:	61 f0 23 8e 	M[r4 + 140] = rMAC;

        /* Initialize gentle mute duration frame count */
        p_ext_data->gentle_mute_duration = (uint16) (
            (p_params->OFFSET_GENTLE_MUTE_TIMER * AANC_FRAME_RATE) >> 20);
842014f6:	61 d8       	rMAC = M[FP + 48];
842014f8:	09 89       	rMAC = M[rMAC + 16];
842014fa:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842014fe:	d2 52       	r0 = r0 LSHIFT -20;

        /* Check if gentle mute duration is 0,
        if it is 0, set to 1 to allow 1 frame for gain to ramp down to 0 */

        if (p_ext_data->gentle_mute_duration == 0)
84201500:	a2 f0 d2 8c 	MH[r8 + 420] = r0;
84201504:	04 62       	if NE jump (m) Lc_aanc_process_data_39;

84201506 <Lc_aanc_process_data_38>:
        {
            p_ext_data->gentle_mute_duration = 1;
84201506:	41 20       	rMAC = Null + 1;
84201508:	a1 f0 d2 8c 	MH[r8 + 420] = rMAC;

8420150c <Lc_aanc_process_data_39>:
        }

        p_ext_data->gentle_mute_init_flag = FALSE;
8420150c:	a0 f0 78 8e 	M[r8 + 480] = Null;
        p_ext_data->gain_dec_rate = 0;
84201510:	a0 f0 68 8e 	M[r8 + 416] = Null;
        p_ext_data->gentle_mute_gain = 0;
84201514:	a0 f0 67 8e 	M[r8 + 412] = Null;

        aanc_initialize_events(op_data, p_ext_data);
84201518:	53 08       	r1 = r8 + Null;
8420151a:	42 d8       	r0 = M[FP + 32];
8420151c:	02 f0 3b e4 	call (m) Lc_aanc_initialize_events_1;

        aanc_proc_initialize(p_params, p_ag, p_params->OFFSET_FXLMS_INITIAL_VALUE,
                             &p_ext_data->flags, p_ext_data->re_init_hard);
84201520:	a1 f0 77 88 	rMAC = M[r8 + 476];
84201524:	09 1c       	pushm <rMAC>;
84201526:	a5 f0 90 21 	r3 = r8 + 400;
8420152a:	61 d8       	rMAC = M[FP + 48];
8420152c:	0a 00       	r0 = rMAC + Null;
8420152e:	14 f0 46 88 	r2 = M[rMAC + 280];
84201532:	33 00       	r1 = r4 + Null;
84201534:	05 f0 35 e3 	call (m) $_aanc_proc_initialize;
84201538:	7f 4c       	SP = SP + -4;

8420153a <Lc_aanc_process_data_40>:
    }

    /* Identify whether to do the gain calculation step */
    if ((p_params->OFFSET_DISABLE_AG_CALC & 0x1) ||
        (p_ext_data->cur_mode != AANC_SYSMODE_FULL &&
         p_ext_data->cur_mode != AANC_SYSMODE_QUIET))
8420153a:	61 d8       	rMAC = M[FP + 48];
8420153c:	49 88       	rMAC = M[rMAC + 4];
8420153e:	09 c0       	rMAC = rMAC AND 0x1;
84201540:	07 62       	if NE jump (m) Lc_aanc_process_data_43;

84201542 <Lc_aanc_process_data_41>:
84201542:	a1 f0 5f 88 	rMAC = M[r8 + 380];
84201546:	88 24       	Null = rMAC - 2;
84201548:	2e 60       	if EQ jump (m) Lc_aanc_process_data_58;

8420154a <Lc_aanc_process_data_42>:
8420154a:	88 25       	Null = rMAC - 6;
8420154c:	2c 60       	if EQ jump (m) Lc_aanc_process_data_58;

8420154e <Lc_aanc_process_data_43>:
    {
        calculate_gain = FALSE;
8420154e:	68 de       	M[FP + 52] = Null;
84201550:	2a 6e       	jump (m) Lc_aanc_process_data_58;

84201552 <Lc_aanc_process_data_44>:
        L2_DBG_MSG1("AANC invalid clocks detected: %d", *anc_selected);
        exit_early = TRUE;
    }
#endif

    if (exit_early)
84201552:	0f f9 00 c2 	Null = r7 - Null;
84201556:	92 63       	if NE jump (m) Lc_aanc_process_data_29;

84201558 <Lc__ite_57>:
84201558:	ab 6f       	jump (m) Lc_aanc_process_data_36;

8420155a <Lc_aanc_process_data_45>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
8420155a:	07 00       	r5 = Null + Null;
8420155c:	50 09       	r6 = r8 + Null;

8420155e <Lc_aanc_process_data_46>:
    {
        if (p_ext_data->inputs[i] != NULL)
8420155e:	82 f0 00 e8 	r0 = M[r6 + Null];
84201562:	07 60       	if EQ jump (m) Lc_aanc_process_data_49;

84201564 <Lc_aanc_process_data_47>:
        {
            amt = cbuffer_calc_amount_data_in_words(p_ext_data->inputs[i]);
84201564:	ff fd c4 f1 	call (m) 0x39dd4;
84201568:	31 e3 
            if (amt < min_data_space)
8420156a:	90 05       	Null = r0 - r4;
8420156c:	02 66       	if GE jump (m) Lc_aanc_process_data_49;

8420156e <Lc_aanc_process_data_48>:
            {
                min_data_space = amt;
8420156e:	16 00       	r4 = r0 + Null;

84201570 <Lc_aanc_process_data_49>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201570:	7f 20       	r5 = r5 + 1;
84201572:	20 75       	r6 = r6 + 4;
84201574:	f8 24       	Null = r5 - 3;
84201576:	f4 6d       	if LE jump (m) Lc_aanc_process_data_46;

84201578 <Lc_aanc_process_data_50>:
            }
        }
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
84201578:	a1 f0 c7 86 	rMAC = MHU[r8 + 398];
8420157c:	11 60       	if EQ jump (m) Lc_aanc_process_data_56;

8420157e <Lc_aanc_process_data_51>:
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
8420157e:	07 00       	r5 = Null + Null;
84201580:	a8 f0 10 20 	r6 = r8 + 16;

84201584 <Lc_aanc_process_data_52>:
        {
            if (p_ext_data->outputs[i] != NULL)
84201584:	82 f0 00 e8 	r0 = M[r6 + Null];
84201588:	07 60       	if EQ jump (m) Lc_aanc_process_data_55;

8420158a <Lc_aanc_process_data_53>:
            {
                amt = cbuffer_calc_amount_space_in_words(p_ext_data->outputs[i]);
8420158a:	ff fd c3 f1 	call (m) 0x39d88;
8420158e:	3f ef 
                if (amt < min_data_space)
84201590:	90 05       	Null = r0 - r4;
84201592:	02 66       	if GE jump (m) Lc_aanc_process_data_55;

84201594 <Lc_aanc_process_data_54>:
                {
                    min_data_space = amt;
84201594:	16 00       	r4 = r0 + Null;

84201596 <Lc_aanc_process_data_55>:
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201596:	7f 20       	r5 = r5 + 1;
84201598:	20 75       	r6 = r6 + 4;
8420159a:	f8 24       	Null = r5 - 3;
8420159c:	f4 6d       	if LE jump (m) Lc_aanc_process_data_52;

8420159e <Lc_aanc_process_data_56>:
            }
        }
    }
    /* Samples to process determined as minimum of data and space available */
    return min_data_space;
}
8420159e:	30 09       	r6 = r4 + Null;
    {
        aanc_proc_process_data(p_ext_data->ag, calculate_gain);

        samples_to_process = aanc_calc_samples_to_process(p_ext_data);

        sample_count += AANC_DEFAULT_FRAME_SIZE;
842015a0:	0b f0 40 44 	r9 = r9 + 64;

842015a4 <Lc_aanc_process_data_58>:
    }

    /* Consume all the data in the input buffer, or until there isn't space
     * available.
     */
    while (samples_to_process >= AANC_DEFAULT_FRAME_SIZE)
842015a4:	80 f0 40 24 	Null = r6 - 64;
842015a8:	12 68       	if LT jump (m) Lc_aanc_process_data_61;

842015aa <Lc_aanc_process_data_59>:
    {
        aanc_proc_process_data(p_ext_data->ag, calculate_gain);
842015aa:	a2 f0 6a 88 	r0 = M[r8 + 424];
842015ae:	6b d8       	r1 = M[FP + 52];
842015b0:	06 f0 37 e2 	call (m) $_aanc_proc_process_data;
 * number of samples will be returned.
 *
 */
static inline int aanc_calc_samples_to_process(AANC_OP_DATA *p_ext_data)
{
    int i, amt, min_data_space = AANC_DEFAULT_FRAME_SIZE;
842015b4:	06 f0 40 40 	r4 = Null + 64;

    /* Return if int and ext mic input terminals are not connected */
    if ((p_ext_data->touched_sinks & AANC_MIN_VALID_SINKS) != AANC_MIN_VALID_SINKS)
842015b8:	a1 f0 c6 86 	rMAC = MHU[r8 + 396];
842015bc:	11 f0 0c 00 	rMAC = rMAC AND 0xc;
842015c0:	08 27       	Null = rMAC - 12;
842015c2:	cc 61       	if EQ jump (m) Lc_aanc_process_data_45;

842015c4 <Lc_aanc_process_data_60>:
    {
        return INT_MAX;
842015c4:	ff f7 f6 f7 	r4 = Null + 2147483647;
842015c8:	ff 7b 
842015ca:	ea 6f       	jump (m) Lc_aanc_process_data_56;

842015cc <Lc_aanc_process_data_61>:
#endif /* RUNNING_ON_KALSIM */

    /*************************
     * Check processing flags
     *************************/
    if (p_ext_data->flags & AANC_ED_FLAG_MASK)
842015cc:	a1 f0 64 88 	rMAC = M[r8 + 400];
842015d0:	13 f0 70 00 	r1 = rMAC AND 0x70;
842015d4:	0d 60       	if EQ jump (m) Lc_aanc_process_data_65;

842015d6 <Lc_aanc_process_data_62>:
    {
        L5_DBG_MSG1("AANC ED detected: %d",
                    p_ext_data->flags & AANC_ED_FLAG_MASK);
842015d6:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842015da:	48 25       	Null = rMAC - 5;
842015dc:	07 68       	if LT jump (m) Lc_aanc_process_data_64;

842015de <Lc_aanc_process_data_63>:
842015de:	55 f1 02 f0 	r0 = Null + 357566049;
842015e2:	61 4a 
842015e4:	ef fd fb ff 	call (m) 0xcde;
842015e8:	3b e7 

842015ea <Lc_aanc_process_data_64>:
        mode_after_flags = AANC_SYSMODE_FREEZE;
842015ea:	01 21       	rMAC = Null + 4;
842015ec:	51 de       	M[FP + 40] = rMAC;

842015ee <Lc_aanc_process_data_65>:
    }

    if (p_ext_data->flags & AANC_CLIPPING_FLAG_MASK)
842015ee:	a1 f0 64 88 	rMAC = M[r8 + 400];
842015f2:	13 f0 00 07 	r1 = rMAC AND 0x700;
842015f6:	0d 60       	if EQ jump (m) Lc_aanc_process_data_69;

842015f8 <Lc_aanc_process_data_66>:
    {
        L5_DBG_MSG1("AANC Clipping detected: %d",
                    p_ext_data->flags & AANC_CLIPPING_FLAG_MASK);
842015f8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842015fc:	48 25       	Null = rMAC - 5;
842015fe:	07 68       	if LT jump (m) Lc_aanc_process_data_68;

84201600 <Lc_aanc_process_data_67>:
84201600:	55 f1 02 f0 	r0 = Null + 357566070;
84201604:	76 4a 
84201606:	ef fd fb ff 	call (m) 0xcde;
8420160a:	39 e6 

8420160c <Lc_aanc_process_data_68>:
        mode_after_flags = AANC_SYSMODE_FREEZE;
8420160c:	01 21       	rMAC = Null + 4;
8420160e:	51 de       	M[FP + 40] = rMAC;

84201610 <Lc_aanc_process_data_69>:
    }

    if (p_ext_data->flags & AANC_SATURATION_FLAG_MASK)
84201610:	a1 f0 64 88 	rMAC = M[r8 + 400];
84201614:	13 f7 00 10 	r1 = rMAC AND 0xf000;
84201618:	0d 60       	if EQ jump (m) Lc_aanc_process_data_73;

8420161a <Lc_aanc_process_data_70>:
    {
        L5_DBG_MSG1("AANC Saturation detected: %d",
                    p_ext_data->flags & AANC_SATURATION_FLAG_MASK);
8420161a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420161e:	48 25       	Null = rMAC - 5;
84201620:	07 68       	if LT jump (m) Lc_aanc_process_data_72;

84201622 <Lc_aanc_process_data_71>:
84201622:	55 f1 02 f0 	r0 = Null + 357566097;
84201626:	91 4a 
84201628:	ef fd fb ff 	call (m) 0xcde;
8420162c:	37 e5 

8420162e <Lc_aanc_process_data_72>:
        mode_after_flags = AANC_SYSMODE_FREEZE;
8420162e:	01 21       	rMAC = Null + 4;
84201630:	51 de       	M[FP + 40] = rMAC;

84201632 <Lc_aanc_process_data_73>:

    /**************
     * Update gain
     **************/
    /* Check SYSMODE state as this is the primary control */
    switch (p_ext_data->cur_mode)
84201632:	a3 f0 5f 88 	r1 = M[r8 + 380];
84201636:	58 24       	Null = r1 - 1;
84201638:	09 f0 a3 e2 	if LS jump (m) Lc_aanc_process_data_100;

8420163c <Lc_aanc_process_data_74>:
8420163c:	98 24       	Null = r1 - 2;
8420163e:	11 62       	if NE jump (m) Lc_aanc_process_data_78;

84201640 <Lc_aanc_process_data_75>:
        case AANC_SYSMODE_MUTE_ANC:
            /* Mute action is taken in SET_CONTROL */
            break;
        case AANC_SYSMODE_FULL:
            /* Don't update the gain if any flags were set */
            if (mode_after_flags == AANC_SYSMODE_FREEZE)
84201640:	51 d8       	rMAC = M[FP + 40];
84201642:	08 25       	Null = rMAC - 4;
84201644:	43 62       	if NE jump (m) Lc_aanc_process_data_88;

84201646 <Lc_aanc_process_data_76>:
            {
                L4_DBG_MSG1("AANC FULL Mode, FREEZE: gain frozen at %d",
                            p_ext_data->ff_gain.fine);
84201646:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420164a:	08 25       	Null = rMAC - 4;
8420164c:	87 68       	if LT jump (m) Lc_aanc_process_data_100;

8420164e <Lc_aanc_process_data_77>:
8420164e:	a3 f0 d7 86 	r1 = MHU[r8 + 430];
84201652:	55 f1 02 f0 	r0 = Null + 357566126;
84201656:	ae 4a 
84201658:	ef fd fb ff 	call (m) 0xcde;
8420165c:	27 e4 
8420165e:	7e 6e       	jump (m) Lc_aanc_process_data_100;

84201660 <Lc_aanc_process_data_78>:

    /**************
     * Update gain
     **************/
    /* Check SYSMODE state as this is the primary control */
    switch (p_ext_data->cur_mode)
84201660:	18 25       	Null = r1 - 4;
84201662:	09 f0 f9 e1 	if LS jump (m) Lc_aanc_process_data_100;

84201666 <Lc_aanc_process_data_79>:
84201666:	58 25       	Null = r1 - 5;
84201668:	1f 62       	if NE jump (m) Lc_aanc_process_data_85;

8420166a <Lc_aanc_process_data_80>:
        case AANC_SYSMODE_FREEZE:
            /* Freeze does nothing to change the gains */
            break;
        case AANC_SYSMODE_GENTLE_MUTE:
            /* Gentle mute ramps gain down to 0 */
            if (p_ext_data->ff_gain.fine > 0)
8420166a:	a2 f0 d7 86 	r0 = MHU[r8 + 430];
8420166e:	10 24       	Null = r0 - 0;
84201670:	75 6c       	if LE jump (m) Lc_aanc_process_data_100;

84201672 <Lc_aanc_process_data_81>:
            {
                if (!(p_ext_data->gentle_mute_init_flag))
84201672:	a0 f0 78 88 	Null = M[r8 + 480];
84201676:	0e 62       	if NE jump (m) Lc_aanc_process_data_83;

84201678 <Lc_aanc_process_data_82>:
                {
                    /* Initialize gain value,
                    calculate gain decrease rate during gentle mute period */
                    p_ext_data->gentle_mute_init_flag = TRUE;
84201678:	41 20       	rMAC = Null + 1;
8420167a:	a1 f0 78 8e 	M[r8 + 480] = rMAC;
                    p_ext_data->gentle_mute_gain = p_ext_data->ff_gain.fine << 16;
8420167e:	92 56       	r0 = r0 LSHIFT 16;
84201680:	a2 f0 67 8e 	M[r8 + 412] = r0;
                    p_ext_data->gain_dec_rate = p_ext_data->gentle_mute_gain/p_ext_data->gentle_mute_duration;
84201684:	a3 f0 d2 86 	r1 = MHU[r8 + 420];
84201688:	ff fd c6 f0 	call (m) 0x1a290;
8420168c:	29 e0 
8420168e:	a2 f0 68 8e 	M[r8 + 416] = r0;

84201692 <Lc_aanc_process_data_83>:
                }
                /* decrease gain at the determined rate */
                if (p_ext_data->gentle_mute_gain >= p_ext_data->gain_dec_rate)
84201692:	a1 f0 67 88 	rMAC = M[r8 + 412];
84201696:	a2 f0 68 88 	r0 = M[r8 + 416];
8420169a:	88 04       	Null = rMAC - r0;
8420169c:	38 64       	if NC jump (m) Lc_aanc_process_data_95;

8420169e <Lc_aanc_process_data_84>:
                {
                    p_ext_data->gentle_mute_gain = p_ext_data->gentle_mute_gain - p_ext_data->gain_dec_rate;
8420169e:	89 04       	rMAC = rMAC - r0;
842016a0:	a1 f0 67 8e 	M[r8 + 412] = rMAC;
842016a4:	36 6e       	jump (m) Lc_aanc_process_data_96;

842016a6 <Lc_aanc_process_data_85>:

    /**************
     * Update gain
     **************/
    /* Check SYSMODE state as this is the primary control */
    switch (p_ext_data->cur_mode)
842016a6:	98 25       	Null = r1 - 6;
842016a8:	4f 62       	if NE jump (m) Lc_aanc_process_data_98;

842016aa <Lc_aanc_process_data_86>:
                            p_ext_data->ff_gain.fine);
            }
            break;
        case AANC_SYSMODE_QUIET:
            /* FF fine gain determined by FxLMS gain adaptation */
            p_ext_data->ff_gain.fine = (uint16) *p_gain_calc;
842016aa:	59 d8       	rMAC = M[FP + 44];
842016ac:	09 e8       	rMAC = M[rMAC + Null];
842016ae:	8b c6       	r1 = rMAC AND 0xffff;
842016b0:	a3 f0 d7 8c 	MH[r8 + 430] = r1;
            L4_DBG_MSG1("AANC QUIET Mode, gain = %d", p_ext_data->ff_gain.fine);
842016b4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842016b8:	08 25       	Null = rMAC - 4;
842016ba:	50 68       	if LT jump (m) Lc_aanc_process_data_100;

842016bc <Lc_aanc_process_data_87>:
842016bc:	55 f1 02 f0 	r0 = Null + 357566294;
842016c0:	56 4b 
842016c2:	ef fd fb ff 	call (m) 0xcde;
842016c6:	3d e0 
842016c8:	49 6e       	jump (m) Lc_aanc_process_data_100;

842016ca <Lc_aanc_process_data_88>:
            {
                L4_DBG_MSG1("AANC FULL Mode, FREEZE: gain frozen at %d",
                            p_ext_data->ff_gain.fine);
                break;
            }
            else if (mode_after_flags == AANC_SYSMODE_MUTE_ANC)
842016ca:	51 d8       	rMAC = M[FP + 40];
842016cc:	48 24       	Null = rMAC - 1;
842016ce:	0e 62       	if NE jump (m) Lc_aanc_process_data_92;

842016d0 <Lc_aanc_process_data_89>:
            {
                L4_DBG_MSG("AANC FULL Mode, MUTE: updating gain to 0");
842016d0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842016d4:	08 25       	Null = rMAC - 4;
842016d6:	07 68       	if LT jump (m) Lc_aanc_process_data_91;

842016d8 <Lc_aanc_process_data_90>:
842016d8:	55 f1 02 f0 	r0 = Null + 357566168;
842016dc:	d8 4a 
842016de:	ef fd fa ff 	call (m) 0xccc;
842016e2:	2f ef 

842016e4 <Lc_aanc_process_data_91>:
                p_ext_data->ff_gain.fine = 0;
842016e4:	a0 f0 d7 8c 	MH[r8 + 430] = Null;
                break;
842016e8:	39 6e       	jump (m) Lc_aanc_process_data_100;

842016ea <Lc_aanc_process_data_92>:
            }
            L4_DBG_MSG1("AANC FULL mode, FULL: updating gain to %d",
                        *p_gain_calc);
842016ea:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842016ee:	08 25       	Null = rMAC - 4;
842016f0:	09 68       	if LT jump (m) Lc_aanc_process_data_94;

842016f2 <Lc_aanc_process_data_93>:
842016f2:	59 d8       	rMAC = M[FP + 44];
842016f4:	0b e8       	r1 = M[rMAC + Null];
842016f6:	55 f1 02 f0 	r0 = Null + 357566209;
842016fa:	01 4b 
842016fc:	ef fd fa ff 	call (m) 0xcde;
84201700:	23 ef 

84201702 <Lc_aanc_process_data_94>:
            p_ext_data->ff_gain.fine = (uint16) *p_gain_calc;
84201702:	59 d8       	rMAC = M[FP + 44];
84201704:	09 e8       	rMAC = M[rMAC + Null];
84201706:	a1 f0 d7 8c 	MH[r8 + 430] = rMAC;
            break;
8420170a:	28 6e       	jump (m) Lc_aanc_process_data_100;

8420170c <Lc_aanc_process_data_95>:
                {
                    p_ext_data->gentle_mute_gain = p_ext_data->gentle_mute_gain - p_ext_data->gain_dec_rate;
                }
                else
                {
                    p_ext_data->gentle_mute_gain = 0;
8420170c:	a0 f0 67 8e 	M[r8 + 412] = Null;

84201710 <Lc_aanc_process_data_96>:
                }
                p_ext_data->ff_gain.fine = (uint16) ((p_ext_data->gentle_mute_gain + (1 << 15)) >> 16);
84201710:	a1 f0 67 88 	rMAC = M[r8 + 412];
84201714:	02 f0 12 f0 	r0 = rMAC + 32768;
84201718:	00 20 
8420171a:	94 52       	r2 = r0 LSHIFT -16;
8420171c:	a4 f0 d7 8c 	MH[r8 + 430] = r2;
                aanc_fxlms100_update_gain(p_ext_data->ag->p_fxlms,
                                          p_ext_data->ag->p_fxlms_stats,
                                          p_ext_data->ff_gain.fine);
84201720:	a1 f0 6a 88 	rMAC = M[r8 + 424];
84201724:	0b a8       	r1 = M[rMAC + 64];
84201726:	4a a8       	r0 = M[rMAC + 68];
84201728:	0b f0 39 e0 	call (m) $_aanc_fxlms100_update_gain;
                L4_DBG_MSG1("AANC GENTLE_MUTE mode: updating gain to %d",
                            p_ext_data->ff_gain.fine);
8420172c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201730:	08 25       	Null = rMAC - 4;
84201732:	14 68       	if LT jump (m) Lc_aanc_process_data_100;

84201734 <Lc_aanc_process_data_97>:
84201734:	a3 f0 d7 86 	r1 = MHU[r8 + 430];
84201738:	55 f1 02 f0 	r0 = Null + 357566251;
8420173c:	2b 4b 
8420173e:	ef fd fa ff 	call (m) 0xcde;
84201742:	21 ed 
84201744:	0b 6e       	jump (m) Lc_aanc_process_data_100;

84201746 <Lc_aanc_process_data_98>:
            /* FF fine gain determined by FxLMS gain adaptation */
            p_ext_data->ff_gain.fine = (uint16) *p_gain_calc;
            L4_DBG_MSG1("AANC QUIET Mode, gain = %d", p_ext_data->ff_gain.fine);
            break;
        default:
            L2_DBG_MSG1("AANC SYSMODE invalid: %d", p_ext_data->cur_mode);
84201746:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420174a:	88 24       	Null = rMAC - 2;
8420174c:	07 68       	if LT jump (m) Lc_aanc_process_data_100;

8420174e <Lc_aanc_process_data_99>:
8420174e:	55 f1 02 f0 	r0 = Null + 357566321;
84201752:	71 4b 
84201754:	ef fd fa ff 	call (m) 0xcde;
84201758:	2b ec 

8420175a <Lc_aanc_process_data_100>:
    * set the FB fine gain to its static value.
    *
    * Clear "hard" reinitializion so that FB gain is not touched in
    * subsequent iterations.
    */
    if (p_ext_data->re_init_hard)
8420175a:	a0 f0 77 88 	Null = M[r8 + 476];
8420175e:	07 60       	if EQ jump (m) Lc_aanc_process_data_102;

84201760 <Lc_aanc_process_data_101>:
    {
        p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine;
84201760:	a1 f0 e5 86 	rMAC = MHU[r8 + 458];
84201764:	a1 f0 d9 8c 	MH[r8 + 434] = rMAC;
        p_ext_data->re_init_hard = FALSE;
84201768:	a0 f0 77 8e 	M[r8 + 476] = Null;

8420176c <Lc_aanc_process_data_102>:
    }

    /* Evaluate event messaging criteria */
    if (!(p_params->OFFSET_AANC_DEBUG &
          AANC_CONFIG_AANC_DEBUG_DISABLE_EVENT_MESSAGING))
8420176c:	61 d8       	rMAC = M[FP + 48];
8420176e:	49 89       	rMAC = M[rMAC + 20];
84201770:	49 c1       	rMAC = rMAC AND 0x8;
84201772:	09 62       	if NE jump (m) Lc_aanc_process_data_104;

84201774 <Lc_aanc_process_data_103>:
    {
        aanc_process_events(op_data, p_ext_data);
84201774:	53 08       	r1 = r8 + Null;
84201776:	42 d8       	r0 = M[FP + 32];
84201778:	01 f0 35 ee 	call (m) Lc_aanc_process_events_1;
        p_ext_data->prev_flags = p_ext_data->flags;
8420177c:	a1 f0 64 88 	rMAC = M[r8 + 400];
84201780:	a1 f0 65 8e 	M[r8 + 404] = rMAC;

84201784 <Lc_aanc_process_data_104>:
    }

    aanc_update_gain(op_data, p_ext_data);
84201784:	53 08       	r1 = r8 + Null;
84201786:	42 d8       	r0 = M[FP + 32];
84201788:	37 4e       	call (m) Lc_aanc_update_gain_1;
8420178a:	01 fb d8 c8 	r6 = r9 LSHIFT 2;

    /****************
     * Pass Metadata
     ****************/
    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
8420178e:	06 00       	r4 = Null + Null;
84201790:	a7 f0 20 20 	r5 = r8 + 32;

84201794 <Lc_aanc_process_data_105>:
    {
        metadata_strict_transport(p_ext_data->metadata_ip[i],
                                  p_ext_data->metadata_op[i],
                                  sample_count * OCTETS_PER_SAMPLE);
84201794:	bb 88       	r1 = M[r5 + 8];
84201796:	3a e8       	r0 = M[r5 + Null];
84201798:	44 08       	r2 = r6 + Null;
8420179a:	ff fd 9a f0 	call (m) 0x14c88;
8420179e:	2f e7 
    aanc_update_gain(op_data, p_ext_data);

    /****************
     * Pass Metadata
     ****************/
    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842017a0:	76 20       	r4 = r4 + 1;
842017a2:	3f 21       	r5 = r5 + 4;
842017a4:	b0 24       	Null = r4 - 2;
842017a6:	f7 69       	if LT jump (m) Lc_aanc_process_data_105;

842017a8 <Lc_aanc_process_data_106>:
    }

    /***************************
     * Update touched terminals
     ***************************/
    touched->sinks = (unsigned) p_ext_data->touched_sinks;
842017a8:	a1 f0 c6 86 	rMAC = MHU[r8 + 396];
842017ac:	4a d8       	r0 = M[FP + 36];
842017ae:	51 8e       	M[r0 + 4] = rMAC;
    touched->sources = (unsigned) p_ext_data->touched_sources;
842017b0:	a1 f0 c7 86 	rMAC = MHU[r8 + 398];
842017b4:	11 ee       	M[r0 + Null] = rMAC;

    L5_DBG_MSG("AANC process channel data completed");
842017b6:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842017ba:	48 25       	Null = rMAC - 5;
842017bc:	07 68       	if LT jump (m) Lc_aanc_process_data_108;

842017be <Lc_aanc_process_data_107>:
842017be:	55 f1 02 f0 	r0 = Null + 357566346;
842017c2:	8a 4b 
842017c4:	ef fd fa ff 	call (m) 0xccc;
842017c8:	29 e8 

842017ca <Lc_aanc_process_data_108>:

    return;
}
842017ca:	f6 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
842017cc:	d8 4c       	rts;

842017ce <$_ups_params_aanc>:

bool ups_params_aanc(void* instance_data, PS_KEY_TYPE key,
                     PERSISTENCE_RANK rank, uint16 length,
                     unsigned* data, STATUS_KYMERA status,
                     uint16 extra_status_info)
{
842017ce:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
842017d0:	2f 00       	r5 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842017d2:	ef fd f6 ff 	call (m) 0x4e6;
842017d6:	35 e8 
842017d8:	16 00       	r4 = r0 + Null;
                     uint16 extra_status_info)
{
    OPERATOR_DATA *op_data = (OPERATOR_DATA*) instance_data;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    cpsSetParameterFromPsStore(&p_ext_data->params_def, length, data, status);
842017da:	e5 d5       	r3 = MHS[FP + -8];
842017dc:	fc d9       	r2 = M[FP + -4];
842017de:	62 f0 ec 21 	r0 = r4 + 492;
842017e2:	3b 00       	r1 = r5 + Null;
842017e4:	ef fd f9 ff 	call (m) 0xa0a;
842017e8:	27 e1 

    /* Set the reinitialization flag after setting the parameters */
    p_ext_data->re_init_flag = TRUE;
842017ea:	41 20       	rMAC = Null + 1;
842017ec:	61 f0 76 8e 	M[r4 + 472] = rMAC;

    return TRUE;
842017f0:	0a 00       	r0 = rMAC + Null;

842017f2 <Lc_ups_params_aanc_2>:
}
842017f2:	f2 48       	popm <FP, r4, r5, rLink>;
842017f4:	d8 4c       	rts;

842017f6 <Lc_aanc_update_gain_1>:
 * to the HW.
 *
 */
#else
static bool aanc_update_gain(OPERATOR_DATA *op_data, AANC_OP_DATA *p_ext_data)
{
842017f6:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842017f8:	1e 00       	r4 = r1 + Null;
    /* Only update EC and FB gains if in hybrid mode */
    if (p_ext_data->anc_fb_path > 0)
842017fa:	61 f0 d2 81 	rMAC = MBS[r4 + 466];
842017fe:	08 24       	Null = rMAC - 0;
84201800:	3f 6c       	if LE jump (m) Lc_aanc_update_gain_10;

84201802 <Lc_aanc_update_gain_2>:
    {
        /* Update EC gain */
        if (p_ext_data->ec_gain.fine != p_ext_data->ec_gain_prev.fine)
84201802:	64 f0 db 86 	r2 = MHU[r4 + 438];
84201806:	61 f0 e1 86 	rMAC = MHU[r4 + 450];
8420180a:	60 04       	Null = r2 - rMAC;
8420180c:	0a 60       	if EQ jump (m) Lc_aanc_update_gain_4;

8420180e <Lc_aanc_update_gain_3>:
        {
            stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                        AANC_ANC_PATH_FB_ID,
                                        p_ext_data->ec_gain.fine);
8420180e:	c3 20       	r1 = Null + 3;
84201810:	62 f0 d0 81 	r0 = MBS[r4 + 464];
84201814:	0d f0 23 e2 	call (m) $_stream_anc_set_anc_fine_gain;
            p_ext_data->ec_gain_prev.fine = p_ext_data->ec_gain.fine;
84201818:	61 f0 db 86 	rMAC = MHU[r4 + 438];
8420181c:	61 f0 e1 8c 	MH[r4 + 450] = rMAC;

84201820 <Lc_aanc_update_gain_4>:
        }
        if (p_ext_data->ec_gain.coarse != p_ext_data->ec_gain_prev.coarse)
84201820:	64 f0 da 86 	r2 = MHU[r4 + 436];
84201824:	61 f0 e0 86 	rMAC = MHU[r4 + 448];
84201828:	60 04       	Null = r2 - rMAC;
8420182a:	0a 60       	if EQ jump (m) Lc_aanc_update_gain_6;

8420182c <Lc_aanc_update_gain_5>:
        {
            stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                        AANC_ANC_PATH_FB_ID,
                                        p_ext_data->ec_gain.coarse);
8420182c:	c3 20       	r1 = Null + 3;
8420182e:	62 f0 d0 81 	r0 = MBS[r4 + 464];
84201832:	0d f0 33 e1 	call (m) $_stream_anc_set_anc_coarse_gain;
            p_ext_data->ec_gain_prev.coarse = p_ext_data->ec_gain.coarse;
84201836:	61 f0 da 86 	rMAC = MHU[r4 + 436];
8420183a:	61 f0 e0 8c 	MH[r4 + 448] = rMAC;

8420183e <Lc_aanc_update_gain_6>:
        }

        /* Update FB gain */
        if (p_ext_data->fb_gain.fine != p_ext_data->fb_gain_prev.fine)
8420183e:	64 f0 d9 86 	r2 = MHU[r4 + 434];
84201842:	61 f0 df 86 	rMAC = MHU[r4 + 446];
84201846:	60 04       	Null = r2 - rMAC;
84201848:	0b 60       	if EQ jump (m) Lc_aanc_update_gain_8;

8420184a <Lc_aanc_update_gain_7>:
        {
            stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                        p_ext_data->anc_fb_path,
                                        p_ext_data->fb_gain.fine);
8420184a:	63 f0 d2 81 	r1 = MBS[r4 + 466];
8420184e:	62 f0 d0 81 	r0 = MBS[r4 + 464];
84201852:	0d f0 25 e0 	call (m) $_stream_anc_set_anc_fine_gain;
            p_ext_data->fb_gain_prev.fine = p_ext_data->fb_gain.fine;
84201856:	61 f0 d9 86 	rMAC = MHU[r4 + 434];
8420185a:	61 f0 df 8c 	MH[r4 + 446] = rMAC;

8420185e <Lc_aanc_update_gain_8>:
        }
        if (p_ext_data->fb_gain.coarse != p_ext_data->fb_gain_prev.coarse)
8420185e:	64 f0 d8 86 	r2 = MHU[r4 + 432];
84201862:	61 f0 de 86 	rMAC = MHU[r4 + 444];
84201866:	60 04       	Null = r2 - rMAC;
84201868:	0b 60       	if EQ jump (m) Lc_aanc_update_gain_10;

8420186a <Lc_aanc_update_gain_9>:
        {
            stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                        p_ext_data->anc_fb_path,
                                        p_ext_data->fb_gain.coarse);
8420186a:	63 f0 d2 81 	r1 = MBS[r4 + 466];
8420186e:	62 f0 d0 81 	r0 = MBS[r4 + 464];
84201872:	0c f0 33 ef 	call (m) $_stream_anc_set_anc_coarse_gain;
            p_ext_data->fb_gain_prev.coarse = p_ext_data->fb_gain.coarse;
84201876:	61 f0 d8 86 	rMAC = MHU[r4 + 432];
8420187a:	61 f0 de 8c 	MH[r4 + 444] = rMAC;

8420187e <Lc_aanc_update_gain_10>:
        }
    }

    /* Update FF gain */
    if (p_ext_data->ff_gain.fine != p_ext_data->ff_gain_prev.fine)
8420187e:	64 f0 d7 86 	r2 = MHU[r4 + 430];
84201882:	61 f0 dd 86 	rMAC = MHU[r4 + 442];
84201886:	60 04       	Null = r2 - rMAC;
84201888:	0b 60       	if EQ jump (m) Lc_aanc_update_gain_12;

8420188a <Lc_aanc_update_gain_11>:
    {
        stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                     p_ext_data->anc_ff_path,
                                     p_ext_data->ff_gain.fine);
8420188a:	63 f0 d1 81 	r1 = MBS[r4 + 465];
8420188e:	62 f0 d0 81 	r0 = MBS[r4 + 464];
84201892:	0c f0 25 ee 	call (m) $_stream_anc_set_anc_fine_gain;
        p_ext_data->ff_gain_prev.fine = p_ext_data->ff_gain.fine;
84201896:	61 f0 d7 86 	rMAC = MHU[r4 + 430];
8420189a:	61 f0 dd 8c 	MH[r4 + 442] = rMAC;

8420189e <Lc_aanc_update_gain_12>:
    }
    if (p_ext_data->ff_gain.coarse != p_ext_data->ff_gain_prev.coarse)
8420189e:	64 f0 d6 86 	r2 = MHU[r4 + 428];
842018a2:	61 f0 dc 86 	rMAC = MHU[r4 + 440];
842018a6:	60 04       	Null = r2 - rMAC;
842018a8:	0b 60       	if EQ jump (m) Lc_aanc_update_gain_14;

842018aa <Lc_aanc_update_gain_13>:
    {
        stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                       p_ext_data->anc_ff_path,
                                       p_ext_data->ff_gain.coarse);
842018aa:	63 f0 d1 81 	r1 = MBS[r4 + 465];
842018ae:	62 f0 d0 81 	r0 = MBS[r4 + 464];
842018b2:	0c f0 33 ed 	call (m) $_stream_anc_set_anc_coarse_gain;
        p_ext_data->ff_gain_prev.coarse = p_ext_data->ff_gain.coarse;
842018b6:	61 f0 d6 86 	rMAC = MHU[r4 + 428];
842018ba:	61 f0 dc 8c 	MH[r4 + 440] = rMAC;

842018be <Lc_aanc_update_gain_14>:
    }

    return TRUE;
842018be:	42 20       	r0 = Null + 1;

842018c0 <Lc_aanc_update_gain_15>:
}
842018c0:	f1 48       	popm <FP, r4, rLink>;
842018c2:	d8 4c       	rts;

842018c4 <Lc_update_touched_sink_sources_1>:
 * Because this is solely dependent on the terminal connections it can be
 * calculated in connect/disconnect rather than in every process_data loop.
 */
static bool update_touched_sink_sources(AANC_OP_DATA *p_ext_data)
{
    uint16 touched_sinks = 0;
842018c4:	01 00       	rMAC = Null + Null;
    uint16 touched_sources = 0;
842018c6:	03 00       	r1 = Null + Null;

    /* Update touched sinks & sources */
    if (p_ext_data->inputs[AANC_PLAYBACK_TERMINAL_ID] != NULL)
842018c8:	14 e8       	r2 = M[r0 + Null];
842018ca:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_3;

842018cc <Lc_update_touched_sink_sources_2>:
    {
        touched_sinks |= (1 << AANC_PLAYBACK_TERMINAL_ID);
842018cc:	41 20       	rMAC = Null + 1;

842018ce <Lc_update_touched_sink_sources_3>:
    }
    if (p_ext_data->outputs[AANC_PLAYBACK_TERMINAL_ID] != NULL)
842018ce:	14 89       	r2 = M[r0 + 16];
842018d0:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_5;

842018d2 <Lc_update_touched_sink_sources_4>:
    {
        touched_sources |= (1 << AANC_PLAYBACK_TERMINAL_ID);
842018d2:	43 20       	r1 = Null + 1;

842018d4 <Lc_update_touched_sink_sources_5>:
    }

    if (p_ext_data->inputs[AANC_FB_MON_TERMINAL_ID] != NULL &&
        p_ext_data->outputs[AANC_FB_MON_TERMINAL_ID] != NULL)
842018d4:	54 88       	r2 = M[r0 + 4];
842018d6:	05 60       	if EQ jump (m) Lc_update_touched_sink_sources_8;

842018d8 <Lc_update_touched_sink_sources_6>:
842018d8:	54 89       	r2 = M[r0 + 20];
842018da:	03 60       	if EQ jump (m) Lc_update_touched_sink_sources_8;

842018dc <Lc_update_touched_sink_sources_7>:
    {
        touched_sinks |= (1 << AANC_FB_MON_TERMINAL_ID);
842018dc:	49 c8       	rMAC = rMAC OR 0x2;
        touched_sources |= (1 << AANC_FB_MON_TERMINAL_ID);
842018de:	5b c8       	r1 = r1 OR 0x2;

842018e0 <Lc_update_touched_sink_sources_8>:
    }

    if (p_ext_data->outputs[AANC_MIC_INT_TERMINAL_ID] != NULL)
842018e0:	94 89       	r2 = M[r0 + 24];
842018e2:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_10;

842018e4 <Lc_update_touched_sink_sources_9>:
    {
        touched_sources |= (1 << AANC_MIC_INT_TERMINAL_ID);
842018e4:	db c8       	r1 = r1 OR 0x4;

842018e6 <Lc_update_touched_sink_sources_10>:
    }
    /* Always read internal mic input buffer when processing data */
    touched_sinks |= (1 << AANC_MIC_INT_TERMINAL_ID);
842018e6:	c9 c8       	rMAC = rMAC OR 0x4;

    if (p_ext_data->outputs[AANC_MIC_EXT_TERMINAL_ID] != NULL)
842018e8:	d4 89       	r2 = M[r0 + 28];
842018ea:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_12;

842018ec <Lc_update_touched_sink_sources_11>:
    {
        touched_sources |= (1 << AANC_MIC_EXT_TERMINAL_ID);
842018ec:	5b c9       	r1 = r1 OR 0x8;

842018ee <Lc_update_touched_sink_sources_12>:
    }
    /* Always read external mic input buffer when processing data */
    touched_sinks |= (1 << AANC_MIC_EXT_TERMINAL_ID);
842018ee:	49 c9       	rMAC = rMAC OR 0x8;

    p_ext_data->touched_sinks = touched_sinks;
842018f0:	21 f0 c6 8c 	MH[r0 + 396] = rMAC;
    p_ext_data->touched_sources = touched_sources;
842018f4:	23 f0 c7 8c 	MH[r0 + 398] = r1;

    return TRUE;
842018f8:	42 20       	r0 = Null + 1;

842018fa <Lc_update_touched_sink_sources_13>:
842018fa:	d8 4c       	rts;

842018fc <Lc_override_gain_1>:
 *
 * \return  boolean indicating success or failure.
 */
static bool override_gain(AANC_OP_DATA *p_ext_data, unsigned ctrl_value,
                          unsigned ctrl_src, uint16 *p_gain_value)
{
842018fc:	c8 1c       	pushm <FP(=SP), rLink>;
    if (!((p_ext_data->cur_mode == AANC_SYSMODE_FREEZE) ||
          (p_ext_data->cur_mode == AANC_SYSMODE_STATIC)))
842018fe:	21 f0 5f 88 	rMAC = M[r0 + 380];
84201902:	08 25       	Null = rMAC - 4;
84201904:	05 60       	if EQ jump (m) Lc_override_gain_4;

84201906 <Lc_override_gain_2>:
84201906:	c8 24       	Null = rMAC - 3;
84201908:	03 60       	if EQ jump (m) Lc_override_gain_4;

8420190a <Lc_override_gain_3>:
    {
        return FALSE;
8420190a:	02 00       	r0 = Null + Null;
8420190c:	0e 6e       	jump (m) Lc_override_gain_7;

8420190e <Lc_override_gain_4>:
    }

    /* Set the gain */
    ctrl_value &= 0xFF;
8420190e:	9b c3       	r1 = r1 AND 0xff;
    *p_gain_value = (uint16) ctrl_value;
84201910:	2b ec       	MH[r3 + Null] = r1;
    L4_DBG_MSG1("AANC gain override: %d", *p_gain_value);
84201912:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201916:	08 25       	Null = rMAC - 4;
84201918:	07 68       	if LT jump (m) Lc_override_gain_6;

8420191a <Lc_override_gain_5>:
8420191a:	55 f1 02 f0 	r0 = Null + 357564416;
8420191e:	00 40 
84201920:	ef fd f9 ff 	call (m) 0xcde;
84201924:	3f ed 

84201926 <Lc_override_gain_6>:

    return TRUE;
84201926:	42 20       	r0 = Null + 1;

84201928 <Lc_override_gain_7>:
}
84201928:	c8 48       	popm <FP, rLink>;
8420192a:	d8 4c       	rts;

8420192c <Lc_aanc_send_event_trigger_1>:
 *
 * \return  bool indicating success
 */
static bool aanc_send_event_trigger(OPERATOR_DATA *op_data, bool detect,
                                    uint16 id, uint16 payload)
{
8420192c:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420192e:	12 09       	r8 = r0 + Null;
84201930:	27 00       	r5 = r2 + Null;
84201932:	28 09       	r6 = r3 + Null;
    unsigned msg_size = OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER_WORD_SIZE;
    unsigned *trigger_message = NULL;
    OPMSG_REPLY_ID message_id = OPMSG_REPLY_ID_AANC_EVENT_TRIGGER;
84201934:	41 71       	r7 = Null + 8;
    if (!detect)
84201936:	18 04       	Null = r1 - Null;
84201938:	02 62       	if NE jump (m) Lc_aanc_send_event_trigger_3;

8420193a <Lc_aanc_send_event_trigger_2>:
    {
        message_id = OPMSG_REPLY_ID_AANC_EVENT_NEGATIVE_TRIGGER;
8420193a:	49 71       	r7 = Null + 9;

8420193c <Lc_aanc_send_event_trigger_3>:
    }

    trigger_message = xpnewn(msg_size, unsigned);
8420193c:	c3 20       	r1 = Null + 3;
8420193e:	02 22       	r0 = Null + 8;
84201940:	ff fd 27 f0 	call (m) 0x67ac;
84201944:	2d e3 
84201946:	16 00       	r4 = r0 + Null;
    if (trigger_message == NULL)
84201948:	0d 62       	if NE jump (m) Lc_aanc_send_event_trigger_7;

8420194a <Lc_aanc_send_event_trigger_4>:
    {
        L2_DBG_MSG("Failed to send AANC event message");
8420194a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420194e:	88 24       	Null = rMAC - 2;
84201950:	07 68       	if LT jump (m) Lc_aanc_send_event_trigger_6;

84201952 <Lc_aanc_send_event_trigger_5>:
84201952:	55 f1 02 f0 	r0 = Null + 357564439;
84201956:	17 40 
84201958:	ef fd f9 ff 	call (m) 0xccc;
8420195c:	35 eb 

8420195e <Lc_aanc_send_event_trigger_6>:
        return FALSE;
8420195e:	02 00       	r0 = Null + Null;
84201960:	1b 6e       	jump (m) Lc_aanc_send_event_trigger_10;

84201962 <Lc_aanc_send_event_trigger_7>:
    }

    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER,
                             ID,
                             id);
84201962:	3b 00       	r1 = r5 + Null;
84201964:	33 ee       	M[r4 + Null] = r1;
    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER,
                             PAYLOAD,
                             payload);
84201966:	44 08       	r2 = r6 + Null;
84201968:	74 8e       	M[r4 + 4] = r2;

    L4_DBG_MSG2("AANC Event Sent: [%d, %d]", trigger_message[0],
                trigger_message[1]);
8420196a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420196e:	08 25       	Null = rMAC - 4;
84201970:	07 68       	if LT jump (m) Lc_aanc_send_event_trigger_9;

84201972 <Lc_aanc_send_event_trigger_8>:
84201972:	55 f1 02 f0 	r0 = Null + 357564473;
84201976:	39 40 
84201978:	ef fd f9 ff 	call (m) 0xcf2;
8420197c:	3b eb 

8420197e <Lc_aanc_send_event_trigger_9>:
    common_send_unsolicited_message(op_data, (unsigned)message_id, msg_size,
                                    trigger_message);
8420197e:	84 20       	r2 = Null + 2;
84201980:	35 00       	r3 = r4 + Null;
84201982:	4b 08       	r1 = r7 + Null;
84201984:	52 08       	r0 = r8 + Null;
84201986:	ef fd f6 ff 	call (m) 0x592;
8420198a:	2d e0 

    pdelete(trigger_message);
8420198c:	32 00       	r0 = r4 + Null;
8420198e:	ff fd 27 f0 	call (m) 0x68d8;
84201992:	2b ea 

    return TRUE;
84201994:	42 20       	r0 = Null + 1;

84201996 <Lc_aanc_send_event_trigger_10>:
}
84201996:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84201998:	d8 4c       	rts;

8420199a <Lc_aanc_process_event_clear_condition_1>:
 * \return  void.
 */
static void aanc_process_event_clear_condition(OPERATOR_DATA *op_data,
                                               AANC_EVENT *p_event,
                                               uint16 id, uint16 payload)
{
8420199a:	f1 1c       	pushm <FP(=SP), r4, rLink>;
8420199c:	1e 00       	r4 = r1 + Null;
    switch (p_event->running)
8420199e:	31 90       	rMAC = MBS[r4 + 8];
842019a0:	48 24       	Null = rMAC - 1;
842019a2:	05 60       	if EQ jump (m) Lc_aanc_process_event_clear_condition_4;

842019a4 <Lc_aanc_process_event_clear_condition_2>:
842019a4:	88 24       	Null = rMAC - 2;
842019a6:	06 62       	if NE jump (m) Lc_aanc_process_event_clear_condition_5;

842019a8 <Lc_aanc_process_event_clear_condition_3>:
            case AANC_EVENT_DETECTED:
                /* Have detected but not sent message so clear */
                aanc_clear_event(p_event);
                break;
            case AANC_EVENT_SENT:
                aanc_send_event_trigger(op_data, FALSE, id, payload);
842019a8:	03 00       	r1 = Null + Null;
842019aa:	c1 4f       	call (m) Lc_aanc_send_event_trigger_1;

842019ac <Lc_aanc_process_event_clear_condition_4>:
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842019ac:	71 88       	rMAC = M[r4 + 4];
842019ae:	31 ee       	M[r4 + Null] = rMAC;
       p_event->running = AANC_EVENT_CLEAR;
842019b0:	30 9a       	MB[r4 + 8] = Null;

842019b2 <Lc_aanc_process_event_clear_condition_5>:
            case AANC_EVENT_CLEAR:
                break;
            case AANC_EVENT_DETECTED:
                /* Have detected but not sent message so clear */
                aanc_clear_event(p_event);
                break;
842019b2:	f1 48       	popm <FP, r4, rLink>;
842019b4:	d8 4c       	rts;

842019b6 <Lc_aanc_initialize_events_1>:
 * \param  p_ext_data  Address of the AANC extra_op_data.
 *
 * \return  void.
 */
static void aanc_initialize_events(OPERATOR_DATA *op_data, AANC_OP_DATA *p_ext_data)
{
842019b6:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
842019b8:	10 09       	r6 = r0 + Null;
842019ba:	1e 00       	r4 = r1 + Null;
    unsigned set_frames = 0;
    AANC_PARAMETERS *p_params = &p_ext_data->aanc_cap_params;
842019bc:	37 3b       	r5 = r4 + 60;

    set_frames = (p_params->OFFSET_EVENT_GAIN_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
842019be:	71 f0 47 88 	rMAC = M[r5 + 284];
842019c2:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842019c6:	76 f2 d9 c8 	r7 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Gain Event Initialized at %d frames", set_frames);
842019ca:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842019ce:	08 25       	Null = rMAC - 4;
842019d0:	08 68       	if LT jump (m) Lc_aanc_initialize_events_3;

842019d2 <Lc_aanc_initialize_events_2>:
842019d2:	55 f1 02 f0 	r0 = Null + 357564499;
842019d6:	53 40 
842019d8:	4b 08       	r1 = r7 + Null;
842019da:	ef fd f9 ff 	call (m) 0xcde;
842019de:	25 e8 

842019e0 <Lc_aanc_initialize_events_3>:
    p_ext_data->gain_event.set_frames = set_frames;
842019e0:	69 f0 81 8e 	M[r4 + 516] = r7;
    aanc_process_event_clear_condition(op_data, &p_ext_data->gain_event,
                                       AANC_EVENT_ID_GAIN, 0);
842019e4:	63 f0 00 22 	r1 = r4 + 512;
842019e8:	05 00       	r3 = Null + Null;
842019ea:	04 00       	r2 = Null + Null;
842019ec:	42 08       	r0 = r6 + Null;
842019ee:	d6 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_ED_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
842019f0:	71 f0 48 88 	rMAC = M[r5 + 288];
842019f4:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842019f8:	76 f2 d9 c8 	r7 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC ED Event Initialized at %d frames", set_frames);
842019fc:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201a00:	08 25       	Null = rMAC - 4;
84201a02:	08 68       	if LT jump (m) Lc_aanc_initialize_events_5;

84201a04 <Lc_aanc_initialize_events_4>:
84201a04:	55 f1 02 f0 	r0 = Null + 357564540;
84201a08:	7c 40 
84201a0a:	4b 08       	r1 = r7 + Null;
84201a0c:	ef fd f9 ff 	call (m) 0xcde;
84201a10:	33 e6 

84201a12 <Lc_aanc_initialize_events_5>:
    p_ext_data->ed_event.set_frames = set_frames;
84201a12:	69 f0 84 8e 	M[r4 + 528] = r7;
    aanc_process_event_clear_condition(op_data, &p_ext_data->ed_event,
                                       AANC_EVENT_ID_ED, 0);
84201a16:	44 20       	r2 = Null + 1;
84201a18:	63 f0 0c 22 	r1 = r4 + 524;
84201a1c:	05 00       	r3 = Null + Null;
84201a1e:	42 08       	r0 = r6 + Null;
84201a20:	bd 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_QUIET_DETECT * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201a22:	71 f0 49 88 	rMAC = M[r5 + 292];
84201a26:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201a2a:	76 f2 d9 c8 	r7 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Quiet Mode Detect Initialized at %d frames", set_frames);
84201a2e:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201a32:	08 25       	Null = rMAC - 4;
84201a34:	08 68       	if LT jump (m) Lc_aanc_initialize_events_7;

84201a36 <Lc_aanc_initialize_events_6>:
84201a36:	55 f1 02 f0 	r0 = Null + 357564579;
84201a3a:	a3 40 
84201a3c:	4b 08       	r1 = r7 + Null;
84201a3e:	ef fd f9 ff 	call (m) 0xcde;
84201a42:	21 e5 

84201a44 <Lc_aanc_initialize_events_7>:
    p_ext_data->quiet_event_detect.set_frames = set_frames;
84201a44:	69 f0 87 8e 	M[r4 + 540] = r7;
    aanc_process_event_clear_condition(op_data, &p_ext_data->quiet_event_detect,
                                       AANC_EVENT_ID_QUIET, 0);
84201a48:	84 20       	r2 = Null + 2;
84201a4a:	63 f0 18 22 	r1 = r4 + 536;
84201a4e:	05 00       	r3 = Null + Null;
84201a50:	42 08       	r0 = r6 + Null;
84201a52:	a4 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_QUIET_CLEAR * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201a54:	71 f0 4a 88 	rMAC = M[r5 + 296];
84201a58:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201a5c:	76 f2 d9 c8 	r7 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Quiet Mode Cleared Initialized at %d frames", set_frames);
84201a60:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201a64:	08 25       	Null = rMAC - 4;
84201a66:	08 68       	if LT jump (m) Lc_aanc_initialize_events_9;

84201a68 <Lc_aanc_initialize_events_8>:
84201a68:	55 f1 02 f0 	r0 = Null + 357564627;
84201a6c:	d3 40 
84201a6e:	4b 08       	r1 = r7 + Null;
84201a70:	ef fd f9 ff 	call (m) 0xcde;
84201a74:	2f e3 

84201a76 <Lc_aanc_initialize_events_9>:
    p_ext_data->quiet_event_clear.set_frames = set_frames;
84201a76:	69 f0 8a 8e 	M[r4 + 552] = r7;
    aanc_process_event_clear_condition(op_data, &p_ext_data->quiet_event_clear,
                                       AANC_EVENT_ID_QUIET, 0);
84201a7a:	84 20       	r2 = Null + 2;
84201a7c:	63 f0 24 22 	r1 = r4 + 548;
84201a80:	05 00       	r3 = Null + Null;
84201a82:	42 08       	r0 = r6 + Null;
84201a84:	8b 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_CLIP_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201a86:	71 f0 4b 88 	rMAC = M[r5 + 300];
84201a8a:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201a8e:	76 f2 d9 c8 	r7 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Clip Event Initialized at %d frames", set_frames);
84201a92:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201a96:	08 25       	Null = rMAC - 4;
84201a98:	08 68       	if LT jump (m) Lc_aanc_initialize_events_11;

84201a9a <Lc_aanc_initialize_events_10>:
84201a9a:	55 f1 02 f0 	r0 = Null + 357564676;
84201a9e:	04 41 
84201aa0:	4b 08       	r1 = r7 + Null;
84201aa2:	ef fd f9 ff 	call (m) 0xcde;
84201aa6:	3d e1 

84201aa8 <Lc_aanc_initialize_events_11>:
    p_ext_data->clip_event.set_frames = set_frames;
84201aa8:	69 f0 8d 8e 	M[r4 + 564] = r7;
    aanc_process_event_clear_condition(op_data, &p_ext_data->clip_event,
                                       AANC_EVENT_ID_CLIP, 0);
84201aac:	c4 20       	r2 = Null + 3;
84201aae:	63 f0 30 22 	r1 = r4 + 560;
84201ab2:	05 00       	r3 = Null + Null;
84201ab4:	42 08       	r0 = r6 + Null;
84201ab6:	72 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_SAT_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201ab8:	71 f0 4c 88 	rMAC = M[r5 + 304];
84201abc:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201ac0:	76 f2 d9 c8 	r7 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Saturation Event Initialized at %d frames", set_frames);
84201ac4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201ac8:	08 25       	Null = rMAC - 4;
84201aca:	08 68       	if LT jump (m) Lc_aanc_initialize_events_13;

84201acc <Lc_aanc_initialize_events_12>:
84201acc:	55 f1 02 f0 	r0 = Null + 357564717;
84201ad0:	2d 41 
84201ad2:	4b 08       	r1 = r7 + Null;
84201ad4:	ef fd f9 ff 	call (m) 0xcde;
84201ad8:	2b e0 

84201ada <Lc_aanc_initialize_events_13>:
    p_ext_data->sat_event.set_frames = set_frames;
84201ada:	69 f0 90 8e 	M[r4 + 576] = r7;
    aanc_process_event_clear_condition(op_data, &p_ext_data->sat_event,
                                       AANC_EVENT_ID_SAT, 0);
84201ade:	04 21       	r2 = Null + 4;
84201ae0:	63 f0 3c 22 	r1 = r4 + 572;
84201ae4:	05 00       	r3 = Null + Null;
84201ae6:	42 08       	r0 = r6 + Null;
84201ae8:	59 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_SELF_TALK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201aea:	71 f0 4d 88 	rMAC = M[r5 + 308];
84201aee:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201af2:	d7 52       	r5 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Self-Talk Event Initialized at %d frames", set_frames);
84201af4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201af8:	08 25       	Null = rMAC - 4;
84201afa:	08 68       	if LT jump (m) Lc_aanc_initialize_events_15;

84201afc <Lc_aanc_initialize_events_14>:
84201afc:	55 f1 02 f0 	r0 = Null + 357564764;
84201b00:	5c 41 
84201b02:	3b 00       	r1 = r5 + Null;
84201b04:	ef fd f8 ff 	call (m) 0xcde;
84201b08:	3b ee 

84201b0a <Lc_aanc_initialize_events_15>:
    p_ext_data->self_talk_event.set_frames = set_frames;
84201b0a:	67 f0 93 8e 	M[r4 + 588] = r5;
    aanc_process_event_clear_condition(op_data, &p_ext_data->self_talk_event,
                                       AANC_EVENT_ID_SELF_TALK, 0);
84201b0e:	44 21       	r2 = Null + 5;
84201b10:	63 f0 48 22 	r1 = r4 + 584;
84201b14:	05 00       	r3 = Null + Null;
84201b16:	42 08       	r0 = r6 + Null;
84201b18:	41 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

84201b1a <Lc_aanc_initialize_events_16>:
}
84201b1a:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84201b1c:	d8 4c       	rts;

84201b1e <Lc_aanc_process_event_detect_condition_1>:
 * \return  void.
 */
static void aanc_process_event_detect_condition(OPERATOR_DATA *op_data,
                                                AANC_EVENT *p_event,
                                                uint16 id, uint16 payload)
{
84201b1e:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84201b20:	1e 00       	r4 = r1 + Null;
    switch (p_event->running)
84201b22:	31 90       	rMAC = MBS[r4 + 8];
84201b24:	0d 60       	if EQ jump (m) Lc_aanc_process_event_detect_condition_5;

84201b26 <Lc_aanc_process_event_detect_condition_2>:
84201b26:	48 24       	Null = rMAC - 1;
84201b28:	10 62       	if NE jump (m) Lc_aanc_process_event_detect_condition_6;

84201b2a <Lc_aanc_process_event_detect_condition_3>:
        case AANC_EVENT_CLEAR:
            p_event->frame_counter -= 1;
            p_event->running = AANC_EVENT_DETECTED;
            break;
        case AANC_EVENT_DETECTED:
            p_event->frame_counter -= 1;
84201b2a:	ff f6 11 d1 	rMAC = M[r4] + -1;
            if (p_event->frame_counter <= 0)
84201b2e:	31 ee       	M[r4 + Null] = rMAC;
84201b30:	0c 62       	if NE jump (m) Lc_aanc_process_event_detect_condition_6;

84201b32 <Lc_aanc_process_event_detect_condition_4>:
            {
                aanc_send_event_trigger(op_data, TRUE, id, payload);
84201b32:	43 20       	r1 = Null + 1;
84201b34:	fe ff 39 ef 	call (m) Lc_aanc_send_event_trigger_1;
                p_event->running = AANC_EVENT_SENT;
84201b38:	81 20       	rMAC = Null + 2;
84201b3a:	31 9a       	MB[r4 + 8] = rMAC;
84201b3c:	06 6e       	jump (m) Lc_aanc_process_event_detect_condition_6;

84201b3e <Lc_aanc_process_event_detect_condition_5>:
                                                uint16 id, uint16 payload)
{
    switch (p_event->running)
    {
        case AANC_EVENT_CLEAR:
            p_event->frame_counter -= 1;
84201b3e:	ff f6 11 d1 	rMAC = M[r4] + -1;
84201b42:	31 ee       	M[r4 + Null] = rMAC;
            p_event->running = AANC_EVENT_DETECTED;
84201b44:	41 20       	rMAC = Null + 1;
84201b46:	31 9a       	MB[r4 + 8] = rMAC;

84201b48 <Lc_aanc_process_event_detect_condition_6>:
            break;
84201b48:	f1 48       	popm <FP, r4, rLink>;
84201b4a:	d8 4c       	rts;

84201b4c <Lc_aanc_process_events_1>:
 *
 * \return  boolean indicating success or failure.
 */
static bool aanc_process_events(OPERATOR_DATA *op_data,
                                AANC_OP_DATA *p_ext_data)
{
84201b4c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84201b4e:	17 00       	r5 = r0 + Null;
84201b50:	1e 00       	r4 = r1 + Null;
    /* Adaptive gain event: reset if ED detected */
    if (p_ext_data->flags & AANC_ED_FLAG_MASK)
84201b52:	61 f0 64 88 	rMAC = M[r4 + 400];
84201b56:	11 f0 70 00 	rMAC = rMAC AND 0x70;
84201b5a:	10 60       	if EQ jump (m) Lc_aanc_process_events_5;

84201b5c <Lc_aanc_process_events_2>:
    {
        /* If we had previously sent a message then send the negative trigger */
        if (p_ext_data->gain_event.running == AANC_EVENT_SENT)
84201b5c:	61 f0 08 90 	rMAC = MBS[r4 + 520];
84201b60:	88 24       	Null = rMAC - 2;
84201b62:	06 62       	if NE jump (m) Lc_aanc_process_events_4;

84201b64 <Lc_aanc_process_events_3>:
        {
            aanc_send_event_trigger(op_data, FALSE, AANC_EVENT_ID_GAIN, 0);
84201b64:	05 00       	r3 = Null + Null;
84201b66:	04 00       	r2 = Null + Null;
84201b68:	03 00       	r1 = Null + Null;
84201b6a:	fe ff 23 ee 	call (m) Lc_aanc_send_event_trigger_1;

84201b6e <Lc_aanc_process_events_4>:
        }
        aanc_clear_event(&p_ext_data->gain_event);
84201b6e:	61 f0 00 22 	rMAC = r4 + 512;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
84201b72:	4a 88       	r0 = M[rMAC + 4];
84201b74:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
84201b76:	08 9a       	MB[rMAC + 8] = Null;
84201b78:	10 6e       	jump (m) Lc_aanc_process_events_8;

84201b7a <Lc_aanc_process_events_5>:
            aanc_send_event_trigger(op_data, FALSE, AANC_EVENT_ID_GAIN, 0);
        }
        aanc_clear_event(&p_ext_data->gain_event);
    }
    /* Condition holds */
    else if (p_ext_data->ff_gain.fine == p_ext_data->ff_gain_prev.fine)
84201b7a:	65 f0 d7 86 	r3 = MHU[r4 + 430];
84201b7e:	61 f0 dd 86 	rMAC = MHU[r4 + 442];
84201b82:	68 04       	Null = r3 - rMAC;
84201b84:	06 62       	if NE jump (m) Lc_aanc_process_events_7;

84201b86 <Lc_aanc_process_events_6>:
    {
        aanc_process_event_detect_condition(op_data, &p_ext_data->gain_event,
                                            AANC_EVENT_ID_GAIN,
                                            p_ext_data->ff_gain.fine);
84201b86:	63 f0 00 22 	r1 = r4 + 512;
84201b8a:	04 00       	r2 = Null + Null;
84201b8c:	c9 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201b8e:	05 6e       	jump (m) Lc_aanc_process_events_8;

84201b90 <Lc_aanc_process_events_7>:
    /* Condition cleared */
    else
    {
        aanc_process_event_clear_condition(op_data, &p_ext_data->gain_event,
                                           AANC_EVENT_ID_GAIN,
                                           p_ext_data->ff_gain.fine);
84201b90:	63 f0 00 22 	r1 = r4 + 512;
84201b94:	04 00       	r2 = Null + Null;
84201b96:	02 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

84201b98 <Lc_aanc_process_events_8>:
    }

    /* ED event */
    bool cur_ed = p_ext_data->flags & AANC_ED_FLAG_MASK;
84201b98:	61 f0 64 88 	rMAC = M[r4 + 400];
84201b9c:	15 f0 70 00 	r3 = rMAC AND 0x70;
    bool prev_ed = p_ext_data->prev_flags & AANC_ED_FLAG_MASK;
84201ba0:	61 f0 65 88 	rMAC = M[r4 + 404];
84201ba4:	11 f0 70 00 	rMAC = rMAC AND 0x70;
    if (cur_ed)
84201ba8:	28 04       	Null = r3 - Null;
84201baa:	09 60       	if EQ jump (m) Lc_aanc_process_events_11;

84201bac <Lc_aanc_process_events_9>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_ed == prev_ed)
84201bac:	68 04       	Null = r3 - rMAC;
84201bae:	10 62       	if NE jump (m) Lc_aanc_process_events_13;

84201bb0 <Lc_aanc_process_events_10>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->ed_event,
                                                AANC_EVENT_ID_ED,
                                                (uint16)cur_ed);
84201bb0:	44 20       	r2 = Null + 1;
84201bb2:	63 f0 0c 22 	r1 = r4 + 524;
84201bb6:	3a 00       	r0 = r5 + Null;
84201bb8:	b3 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201bba:	0a 6e       	jump (m) Lc_aanc_process_events_13;

84201bbc <Lc_aanc_process_events_11>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_ed != prev_ed)
84201bbc:	08 04       	Null = rMAC - Null;
84201bbe:	08 60       	if EQ jump (m) Lc_aanc_process_events_13;

84201bc0 <Lc_aanc_process_events_12>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->ed_event,
                                               AANC_EVENT_ID_ED,
                                               (uint16)cur_ed);
84201bc0:	44 20       	r2 = Null + 1;
84201bc2:	63 f0 0c 22 	r1 = r4 + 524;
84201bc6:	05 00       	r3 = Null + Null;
84201bc8:	3a 00       	r0 = r5 + Null;
84201bca:	fe ff 31 ee 	call (m) Lc_aanc_process_event_clear_condition_1;

84201bce <Lc_aanc_process_events_13>:
        }
    }

    /* Quiet mode has positive and negative triggers */
    bool cur_qm = p_ext_data->flags & AANC_FLAGS_QUIET_MODE;
84201bce:	61 f0 64 88 	rMAC = M[r4 + 400];
    bool prev_qm = p_ext_data->flags & AANC_FLAGS_QUIET_MODE;

    if (cur_qm)
84201bd2:	08 f0 11 f0 	rMAC = rMAC AND 0x100000;
84201bd6:	00 00 
84201bd8:	24 60       	if EQ jump (m) Lc_aanc_process_events_19;

84201bda <Lc_aanc_process_events_14>:
    {
        if (cur_qm == prev_qm)
        {
            switch (p_ext_data->quiet_event_detect.running)
84201bda:	61 f0 20 90 	rMAC = MBS[r4 + 544];
84201bde:	13 60       	if EQ jump (m) Lc_aanc_process_events_18;

84201be0 <Lc_aanc_process_events_15>:
84201be0:	48 24       	Null = rMAC - 1;
84201be2:	33 62       	if NE jump (m) Lc_aanc_process_events_23;

84201be4 <Lc_aanc_process_events_16>:
                    p_ext_data->quiet_event_detect.frame_counter -= 1;
                    p_ext_data->quiet_event_detect.running = AANC_EVENT_DETECTED;
                    aanc_clear_event(&p_ext_data->quiet_event_clear);
                    break;
                case AANC_EVENT_DETECTED:
                    p_ext_data->quiet_event_detect.frame_counter -= 1;
84201be4:	61 f0 86 88 	rMAC = M[r4 + 536];
84201be8:	49 24       	rMAC = rMAC - 1;
                    if (p_ext_data->quiet_event_detect.frame_counter <= 0)
84201bea:	61 f0 86 8e 	M[r4 + 536] = rMAC;
84201bee:	2d 62       	if NE jump (m) Lc_aanc_process_events_23;

84201bf0 <Lc_aanc_process_events_17>:
                    {
                        aanc_send_event_trigger(op_data, TRUE,
                                                AANC_EVENT_ID_QUIET, 0);
84201bf0:	84 20       	r2 = Null + 2;
84201bf2:	43 20       	r1 = Null + 1;
84201bf4:	05 00       	r3 = Null + Null;
84201bf6:	3a 00       	r0 = r5 + Null;
84201bf8:	fe ff 35 e9 	call (m) Lc_aanc_send_event_trigger_1;
                        p_ext_data->quiet_event_detect.running = AANC_EVENT_SENT;
84201bfc:	81 20       	rMAC = Null + 2;
84201bfe:	61 f0 20 9a 	MB[r4 + 544] = rMAC;
84201c02:	23 6e       	jump (m) Lc_aanc_process_events_23;

84201c04 <Lc_aanc_process_events_18>:
        if (cur_qm == prev_qm)
        {
            switch (p_ext_data->quiet_event_detect.running)
            {
                case AANC_EVENT_CLEAR:
                    p_ext_data->quiet_event_detect.frame_counter -= 1;
84201c04:	61 f0 86 88 	rMAC = M[r4 + 536];
84201c08:	49 24       	rMAC = rMAC - 1;
84201c0a:	61 f0 86 8e 	M[r4 + 536] = rMAC;
                    p_ext_data->quiet_event_detect.running = AANC_EVENT_DETECTED;
84201c0e:	41 20       	rMAC = Null + 1;
84201c10:	61 f0 20 9a 	MB[r4 + 544] = rMAC;
                    aanc_clear_event(&p_ext_data->quiet_event_clear);
84201c14:	61 f0 24 22 	rMAC = r4 + 548;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
84201c18:	4a 88       	r0 = M[rMAC + 4];
84201c1a:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
84201c1c:	08 9a       	MB[rMAC + 8] = Null;
            {
                case AANC_EVENT_CLEAR:
                    p_ext_data->quiet_event_detect.frame_counter -= 1;
                    p_ext_data->quiet_event_detect.running = AANC_EVENT_DETECTED;
                    aanc_clear_event(&p_ext_data->quiet_event_clear);
                    break;
84201c1e:	15 6e       	jump (m) Lc_aanc_process_events_23;

84201c20 <Lc_aanc_process_events_19>:
    }
    else
    {
        if (cur_qm == prev_qm)
        {
            switch (p_ext_data->quiet_event_clear.running)
84201c20:	61 f0 2c 90 	rMAC = MBS[r4 + 556];
84201c24:	24 60       	if EQ jump (m) Lc_aanc_process_events_26;

84201c26 <Lc_aanc_process_events_20>:
84201c26:	48 24       	Null = rMAC - 1;
84201c28:	10 62       	if NE jump (m) Lc_aanc_process_events_23;

84201c2a <Lc_aanc_process_events_21>:
                    p_ext_data->quiet_event_clear.frame_counter -= 1;
                    p_ext_data->quiet_event_clear.running = AANC_EVENT_DETECTED;
                    aanc_clear_event(&p_ext_data->quiet_event_detect);
                    break;
                case AANC_EVENT_DETECTED:
                    p_ext_data->quiet_event_clear.frame_counter -= 1;
84201c2a:	61 f0 89 88 	rMAC = M[r4 + 548];
84201c2e:	49 24       	rMAC = rMAC - 1;
                    if (p_ext_data->quiet_event_clear.frame_counter <= 0)
84201c30:	61 f0 89 8e 	M[r4 + 548] = rMAC;
84201c34:	0a 62       	if NE jump (m) Lc_aanc_process_events_23;

84201c36 <Lc_aanc_process_events_22>:
                    {
                        aanc_send_event_trigger(op_data, FALSE,
                                                AANC_EVENT_ID_QUIET, 0);
84201c36:	84 20       	r2 = Null + 2;
84201c38:	05 00       	r3 = Null + Null;
84201c3a:	03 00       	r1 = Null + Null;
84201c3c:	3a 00       	r0 = r5 + Null;
84201c3e:	fe ff 2f e7 	call (m) Lc_aanc_send_event_trigger_1;
                        p_ext_data->quiet_event_clear.running = AANC_EVENT_SENT;
84201c42:	81 20       	rMAC = Null + 2;
84201c44:	61 f0 2c 9a 	MB[r4 + 556] = rMAC;

84201c48 <Lc_aanc_process_events_23>:
            }
        }
    }

    /* Clipping event */
    bool cur_clip = p_ext_data->flags & AANC_CLIPPING_FLAG_MASK;
84201c48:	61 f0 64 88 	rMAC = M[r4 + 400];
84201c4c:	15 f0 00 07 	r3 = rMAC AND 0x700;
    bool prev_clip = p_ext_data->prev_flags & AANC_CLIPPING_FLAG_MASK;
84201c50:	61 f0 65 88 	rMAC = M[r4 + 404];
84201c54:	11 f0 00 07 	rMAC = rMAC AND 0x700;
    if (cur_clip)
84201c58:	28 04       	Null = r3 - Null;
84201c5a:	17 60       	if EQ jump (m) Lc_aanc_process_events_27;

84201c5c <Lc_aanc_process_events_24>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_clip == prev_clip)
84201c5c:	68 04       	Null = r3 - rMAC;
84201c5e:	1e 62       	if NE jump (m) Lc_aanc_process_events_29;

84201c60 <Lc_aanc_process_events_25>:
        {
            aanc_process_event_detect_condition(op_data,
                                                &p_ext_data->clip_event,
                                                AANC_EVENT_ID_CLIP,
                                                (uint16)cur_clip);
84201c60:	c4 20       	r2 = Null + 3;
84201c62:	63 f0 30 22 	r1 = r4 + 560;
84201c66:	3a 00       	r0 = r5 + Null;
84201c68:	5b 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201c6a:	18 6e       	jump (m) Lc_aanc_process_events_29;

84201c6c <Lc_aanc_process_events_26>:
        if (cur_qm == prev_qm)
        {
            switch (p_ext_data->quiet_event_clear.running)
            {
                case AANC_EVENT_CLEAR:
                    p_ext_data->quiet_event_clear.frame_counter -= 1;
84201c6c:	61 f0 89 88 	rMAC = M[r4 + 548];
84201c70:	49 24       	rMAC = rMAC - 1;
84201c72:	61 f0 89 8e 	M[r4 + 548] = rMAC;
                    p_ext_data->quiet_event_clear.running = AANC_EVENT_DETECTED;
84201c76:	41 20       	rMAC = Null + 1;
84201c78:	61 f0 2c 9a 	MB[r4 + 556] = rMAC;
                    aanc_clear_event(&p_ext_data->quiet_event_detect);
84201c7c:	61 f0 18 22 	rMAC = r4 + 536;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
84201c80:	4a 88       	r0 = M[rMAC + 4];
84201c82:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
84201c84:	08 9a       	MB[rMAC + 8] = Null;
            {
                case AANC_EVENT_CLEAR:
                    p_ext_data->quiet_event_clear.frame_counter -= 1;
                    p_ext_data->quiet_event_clear.running = AANC_EVENT_DETECTED;
                    aanc_clear_event(&p_ext_data->quiet_event_detect);
                    break;
84201c86:	e1 6f       	jump (m) Lc_aanc_process_events_23;

84201c88 <Lc_aanc_process_events_27>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_clip != prev_clip)
84201c88:	08 04       	Null = rMAC - Null;
84201c8a:	08 60       	if EQ jump (m) Lc_aanc_process_events_29;

84201c8c <Lc_aanc_process_events_28>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->clip_event,
                                               AANC_EVENT_ID_CLIP,
                                               (uint16)cur_clip);
84201c8c:	c4 20       	r2 = Null + 3;
84201c8e:	63 f0 30 22 	r1 = r4 + 560;
84201c92:	05 00       	r3 = Null + Null;
84201c94:	3a 00       	r0 = r5 + Null;
84201c96:	fe ff 25 e8 	call (m) Lc_aanc_process_event_clear_condition_1;

84201c9a <Lc_aanc_process_events_29>:
        }
    }

    /* Saturation event */
    bool cur_sat = p_ext_data->flags & AANC_SATURATION_FLAG_MASK;
84201c9a:	61 f0 64 88 	rMAC = M[r4 + 400];
84201c9e:	15 f7 00 10 	r3 = rMAC AND 0xf000;
    bool prev_sat = p_ext_data->prev_flags & AANC_SATURATION_FLAG_MASK;
84201ca2:	61 f0 65 88 	rMAC = M[r4 + 404];
84201ca6:	11 f7 00 10 	rMAC = rMAC AND 0xf000;
    if (cur_sat)
84201caa:	28 04       	Null = r3 - Null;
84201cac:	09 60       	if EQ jump (m) Lc_aanc_process_events_32;

84201cae <Lc_aanc_process_events_30>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_sat == prev_sat)
84201cae:	68 04       	Null = r3 - rMAC;
84201cb0:	10 62       	if NE jump (m) Lc_aanc_process_events_34;

84201cb2 <Lc_aanc_process_events_31>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->sat_event,
                                                AANC_EVENT_ID_SAT,
                                                (uint16)cur_sat);
84201cb2:	04 21       	r2 = Null + 4;
84201cb4:	63 f0 3c 22 	r1 = r4 + 572;
84201cb8:	3a 00       	r0 = r5 + Null;
84201cba:	32 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201cbc:	0a 6e       	jump (m) Lc_aanc_process_events_34;

84201cbe <Lc_aanc_process_events_32>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_sat != prev_sat)
84201cbe:	08 04       	Null = rMAC - Null;
84201cc0:	08 60       	if EQ jump (m) Lc_aanc_process_events_34;

84201cc2 <Lc_aanc_process_events_33>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->sat_event,
                                               AANC_EVENT_ID_SAT,
                                               (uint16)cur_sat);
84201cc2:	04 21       	r2 = Null + 4;
84201cc4:	63 f0 3c 22 	r1 = r4 + 572;
84201cc8:	05 00       	r3 = Null + Null;
84201cca:	3a 00       	r0 = r5 + Null;
84201ccc:	fe ff 2f e6 	call (m) Lc_aanc_process_event_clear_condition_1;

84201cd0 <Lc_aanc_process_events_34>:
        }
    }

    /* Self-talk event */
    int cur_ext = p_ext_data->ag->p_ed_ext_stats->spl;
84201cd0:	62 f0 6a 88 	r0 = M[r4 + 424];
84201cd4:	51 98       	rMAC = M[r0 + 36];
84201cd6:	09 e8       	rMAC = M[rMAC + Null];
    int cur_int = p_ext_data->ag->p_ed_int_stats->spl;
84201cd8:	12 89       	r0 = M[r0 + 16];
84201cda:	12 e8       	r0 = M[r0 + Null];
    int delta_ext = cur_int - cur_ext;
84201cdc:	52 04       	r0 = r0 - rMAC;
    if (delta_ext > 0)
84201cde:	10 24       	Null = r0 - 0;
84201ce0:	08 6c       	if LE jump (m) Lc_aanc_process_events_36;

84201ce2 <Lc_aanc_process_events_35>:
    {
        aanc_process_event_detect_condition(op_data,
                                            &p_ext_data->self_talk_event,
                                            AANC_EVENT_ID_SELF_TALK,
                                            (uint16)(delta_ext >> 16));
84201ce2:	95 5a       	r3 = r0 ASHIFT -16;
84201ce4:	44 21       	r2 = Null + 5;
84201ce6:	63 f0 48 22 	r1 = r4 + 584;
84201cea:	3a 00       	r0 = r5 + Null;
84201cec:	19 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201cee:	09 6e       	jump (m) Lc_aanc_process_events_37;

84201cf0 <Lc_aanc_process_events_36>:
    else
    {
        aanc_process_event_clear_condition(op_data,
                                           &p_ext_data->self_talk_event,
                                           AANC_EVENT_ID_SELF_TALK,
                                           (uint16)(delta_ext >> 16));
84201cf0:	92 5a       	r0 = r0 ASHIFT -16;
84201cf2:	44 21       	r2 = Null + 5;
84201cf4:	63 f0 48 22 	r1 = r4 + 584;
84201cf8:	95 c6       	r3 = r0 AND 0xffff;
84201cfa:	3a 00       	r0 = r5 + Null;
84201cfc:	fe ff 3f e4 	call (m) Lc_aanc_process_event_clear_condition_1;

84201d00 <Lc_aanc_process_events_37>:
    }

    return TRUE;
84201d00:	42 20       	r0 = Null + 1;

84201d02 <Lc_aanc_process_events_38>:
}
84201d02:	f2 48       	popm <FP, r4, r5, rLink>;
84201d04:	d8 4c       	rts;

84201d06 <$_AANC_GetDefaults>:
84201d06:	20 f0 c7 24 	Null = r0 - 199;
   0x00500000u,			// SELF_SPEECH_THRESHOLD
   0x40000000u			// LAMBDA
};

unsigned *AANC_GetDefaults(unsigned capid){
	switch(capid){
84201d0a:	12 64       	if NC jump (m) Lc_AANC_GetDefaults_6;

84201d0c <Lc_AANC_GetDefaults_2>:
84201d0c:	20 f0 c8 24 	Null = r0 - 200;
84201d10:	09 f0 97 e0 	if LS jump (m) Lc_AANC_GetDefaults_5;

84201d14 <Lc_AANC_GetDefaults_3>:
84201d14:	01 f0 20 f0 	Null = r0 - 16543;
84201d18:	9f 24 
84201d1a:	0a 64       	if NC jump (m) Lc_AANC_GetDefaults_6;

84201d1c <Lc_AANC_GetDefaults_4>:
84201d1c:	01 f0 20 f0 	Null = r0 - 16544;
84201d20:	a0 24 
84201d22:	08 f0 8d e0 	if HI jump (m) Lc_AANC_GetDefaults_6;

84201d26 <Lc_AANC_GetDefaults_5>:
		case 0x00C7: return defaults_aancAANC_MONO_16K;
84201d26:	f8 ff 02 f0 	r0 = Null + -8388604;
84201d2a:	04 40 
84201d2c:	02 6e       	jump (m) Lc_AANC_GetDefaults_7;

84201d2e <Lc_AANC_GetDefaults_6>:
		case 0x409F: return defaults_aancAANC_MONO_16K;
		case 0x00C8: return defaults_aancAANC_MONO_16K;
		case 0x40A0: return defaults_aancAANC_MONO_16K;
	}
	return((unsigned *)0);
84201d2e:	02 00       	r0 = Null + Null;

84201d30 <Lc_AANC_GetDefaults_7>:
84201d30:	d8 4c       	rts;

84201d32 <$_aanc_proc_create>:
84201d32:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
/******************************************************************************
Public Function Implementations
*/

bool aanc_proc_create(ADAPTIVE_GAIN **pp_ag, unsigned sample_rate)
{
84201d34:	17 00       	r5 = r0 + Null;
84201d36:	18 09       	r6 = r1 + Null;

    ADAPTIVE_GAIN *p_ag = xzpnew(ADAPTIVE_GAIN);
84201d38:	c3 20       	r1 = Null + 3;
84201d3a:	02 f0 90 40 	r0 = Null + 144;
84201d3e:	ff fd 25 f0 	call (m) 0x68a6;
84201d42:	29 eb 
84201d44:	16 00       	r4 = r0 + Null;
    if (p_ag == NULL)
84201d46:	0e 62       	if NE jump (m) Lc_aanc_proc_create_5;

84201d48 <Lc_aanc_proc_create_2>:
    {
        *pp_ag = NULL;
84201d48:	38 ee       	M[r5 + Null] = Null;
        L2_DBG_MSG("AANC_PROC failed to allocate adaptive gain");
84201d4a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201d4e:	88 24       	Null = rMAC - 2;
84201d50:	07 68       	if LT jump (m) Lc_aanc_proc_create_4;

84201d52 <Lc_aanc_proc_create_3>:
84201d52:	55 f1 02 f0 	r0 = Null + 357566382;
84201d56:	ae 4b 
84201d58:	ef fd f7 ff 	call (m) 0xccc;
84201d5c:	35 eb 

84201d5e <Lc_aanc_proc_create_4>:
        return FALSE;
84201d5e:	02 00       	r0 = Null + Null;
84201d60:	e7 6e       	jump (m) Lc_aanc_proc_create_39;

84201d62 <Lc_aanc_proc_create_5>:
    }

    *pp_ag = p_ag;
84201d62:	3e ee       	M[r5 + Null] = r4;

    p_ag->p_aanc_reinit_flag = NULL;
84201d64:	30 ee       	M[r4 + Null] = Null;

    /* Allocate internal input cbuffer in DM1 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_int_ip, MALLOC_PREFERENCE_DM1))
84201d66:	43 20       	r1 = Null + 1;
84201d68:	32 21       	r0 = r4 + 4;
84201d6a:	04 f0 2b e6 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201d6e:	10 04       	Null = r0 - Null;
84201d70:	0e 62       	if NE jump (m) Lc_aanc_proc_create_8;

84201d72 <Lc_aanc_proc_create_6>:
    {
        aanc_proc_destroy(pp_ag);
84201d72:	3a 00       	r0 = r5 + Null;
84201d74:	df 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate int mic input buffer");
84201d76:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201d7a:	88 24       	Null = rMAC - 2;
84201d7c:	f1 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201d7e <Lc_aanc_proc_create_7>:
84201d7e:	55 f1 02 f0 	r0 = Null + 357566425;
84201d82:	d9 4b 
84201d84:	ef fd f7 ff 	call (m) 0xccc;
84201d88:	29 ea 
84201d8a:	ea 6f       	jump (m) Lc_aanc_proc_create_4;

84201d8c <Lc_aanc_proc_create_8>:
        return FALSE;
    }

    /* Allocate external input cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_ext_ip, MALLOC_PREFERENCE_DM2))
84201d8c:	83 20       	r1 = Null + 2;
84201d8e:	32 2a       	r0 = r4 + 24;
84201d90:	04 f0 25 e5 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201d94:	10 04       	Null = r0 - Null;
84201d96:	0e 62       	if NE jump (m) Lc_aanc_proc_create_11;

84201d98 <Lc_aanc_proc_create_9>:
    {
        aanc_proc_destroy(pp_ag);
84201d98:	3a 00       	r0 = r5 + Null;
84201d9a:	cc 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate ext mic input buffer");
84201d9c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201da0:	88 24       	Null = rMAC - 2;
84201da2:	de 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201da4 <Lc_aanc_proc_create_10>:
84201da4:	55 f1 02 f0 	r0 = Null + 357566475;
84201da8:	0b 50 
84201daa:	ef fd f7 ff 	call (m) 0xccc;
84201dae:	23 e9 
84201db0:	d7 6f       	jump (m) Lc_aanc_proc_create_4;

84201db2 <Lc_aanc_proc_create_11>:
        return FALSE;
    }

    /* Create playback cbuffer without specific bank allocation */
    p_ag->p_tmp_pb_ip = cbuffer_create_with_malloc(AANC_DEFAULT_BUFFER_SIZE,
                                                   BUF_DESC_SW_BUFFER);
84201db2:	02 f0 80 40 	r0 = Null + 128;
84201db6:	03 00       	r1 = Null + Null;
84201db8:	ff fd 92 f0 	call (m) 0x142c6;
84201dbc:	2f e8 
84201dbe:	f2 9e       	M[r4 + 44] = r0;
    if (p_ag->p_tmp_pb_ip == NULL)
84201dc0:	f1 98       	rMAC = M[r4 + 44];
84201dc2:	0e 62       	if NE jump (m) Lc_aanc_proc_create_14;

84201dc4 <Lc_aanc_proc_create_12>:
    {
        aanc_proc_destroy(pp_ag);
84201dc4:	3a 00       	r0 = r5 + Null;
84201dc6:	b6 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate playback cbuffer");
84201dc8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201dcc:	88 24       	Null = rMAC - 2;
84201dce:	c8 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201dd0 <Lc_aanc_proc_create_13>:
84201dd0:	55 f1 02 f0 	r0 = Null + 357566525;
84201dd4:	3d 50 
84201dd6:	ef fd f7 ff 	call (m) 0xccc;
84201dda:	37 e7 
84201ddc:	c1 6f       	jump (m) Lc_aanc_proc_create_4;

84201dde <Lc_aanc_proc_create_14>:
        return FALSE;
    }

    /* Create EDs */
    if (!aanc_proc_create_ed(&p_ag->p_ed_int_params, &p_ag->p_ed_int_stats,
                             &p_ag->p_ed_int, sample_rate))
84201dde:	34 29       	r2 = r4 + 20;
84201de0:	33 28       	r1 = r4 + 16;
84201de2:	32 23       	r0 = r4 + 12;
84201de4:	45 08       	r3 = r6 + Null;
84201de6:	03 f0 3b ee 	call (m) Lc_aanc_proc_create_ed_1;
84201dea:	10 04       	Null = r0 - Null;
84201dec:	0e 62       	if NE jump (m) Lc_aanc_proc_create_17;

84201dee <Lc_aanc_proc_create_15>:
    {
        aanc_proc_destroy(pp_ag);
84201dee:	3a 00       	r0 = r5 + Null;
84201df0:	a1 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create int mic ED");
84201df2:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201df6:	88 24       	Null = rMAC - 2;
84201df8:	b3 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201dfa <Lc_aanc_proc_create_16>:
84201dfa:	55 f1 02 f0 	r0 = Null + 357566571;
84201dfe:	6b 50 
84201e00:	ef fd f7 ff 	call (m) 0xccc;
84201e04:	2d e6 
84201e06:	ac 6f       	jump (m) Lc_aanc_proc_create_4;

84201e08 <Lc_aanc_proc_create_17>:
        return FALSE;
    }

    if (!aanc_proc_create_ed(&p_ag->p_ed_ext_params, &p_ag->p_ed_ext_stats,
                             &p_ag->p_ed_ext, sample_rate))
84201e08:	34 32       	r2 = r4 + 40;
84201e0a:	33 31       	r1 = r4 + 36;
84201e0c:	32 30       	r0 = r4 + 32;
84201e0e:	45 08       	r3 = r6 + Null;
84201e10:	03 f0 31 ed 	call (m) Lc_aanc_proc_create_ed_1;
84201e14:	10 04       	Null = r0 - Null;
84201e16:	0e 62       	if NE jump (m) Lc_aanc_proc_create_20;

84201e18 <Lc_aanc_proc_create_18>:
    {
        aanc_proc_destroy(pp_ag);
84201e18:	3a 00       	r0 = r5 + Null;
84201e1a:	8c 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create ext mic ED");
84201e1c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201e20:	88 24       	Null = rMAC - 2;
84201e22:	9e 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201e24 <Lc_aanc_proc_create_19>:
84201e24:	55 f1 02 f0 	r0 = Null + 357566609;
84201e28:	91 50 
84201e2a:	ef fd f7 ff 	call (m) 0xccc;
84201e2e:	23 e5 
84201e30:	97 6f       	jump (m) Lc_aanc_proc_create_4;

84201e32 <Lc_aanc_proc_create_20>:
        return FALSE;
    }

    if (!aanc_proc_create_ed(&p_ag->p_ed_pb_params, &p_ag->p_ed_pb_stats,
                             &p_ag->p_ed_pb, sample_rate))
84201e32:	34 3a       	r2 = r4 + 56;
84201e34:	33 39       	r1 = r4 + 52;
84201e36:	32 38       	r0 = r4 + 48;
84201e38:	45 08       	r3 = r6 + Null;
84201e3a:	03 f0 27 ec 	call (m) Lc_aanc_proc_create_ed_1;
84201e3e:	10 04       	Null = r0 - Null;
84201e40:	0e 62       	if NE jump (m) Lc_aanc_proc_create_23;

84201e42 <Lc_aanc_proc_create_21>:
    {
        aanc_proc_destroy(pp_ag);
84201e42:	3a 00       	r0 = r5 + Null;
84201e44:	77 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create playback mic ED");
84201e46:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201e4a:	88 24       	Null = rMAC - 2;
84201e4c:	89 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201e4e <Lc_aanc_proc_create_22>:
84201e4e:	55 f1 02 f0 	r0 = Null + 357566647;
84201e52:	b7 50 
84201e54:	ef fd f7 ff 	call (m) 0xccc;
84201e58:	39 e3 
84201e5a:	82 6f       	jump (m) Lc_aanc_proc_create_4;

84201e5c <Lc_aanc_proc_create_23>:
        return FALSE;
    }

    /* Allocate int mic output cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_int_op, MALLOC_PREFERENCE_DM2))
84201e5c:	83 20       	r1 = Null + 2;
84201e5e:	32 22       	r0 = r4 + 8;
84201e60:	03 f0 35 ee 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201e64:	10 04       	Null = r0 - Null;
84201e66:	0e 62       	if NE jump (m) Lc_aanc_proc_create_26;

84201e68 <Lc_aanc_proc_create_24>:
    {
        aanc_proc_destroy(pp_ag);
84201e68:	3a 00       	r0 = r5 + Null;
84201e6a:	64 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate int mic output buffer");
84201e6c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201e70:	88 24       	Null = rMAC - 2;
84201e72:	76 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201e74 <Lc_aanc_proc_create_25>:
84201e74:	55 f1 02 f0 	r0 = Null + 357566690;
84201e78:	e2 50 
84201e7a:	ef fd f7 ff 	call (m) 0xccc;
84201e7e:	33 e2 
84201e80:	6f 6f       	jump (m) Lc_aanc_proc_create_4;

84201e82 <Lc_aanc_proc_create_26>:
        return FALSE;
    }

    /* Allocate ext mic output cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_ext_op, MALLOC_PREFERENCE_DM2))
84201e82:	83 20       	r1 = Null + 2;
84201e84:	32 2b       	r0 = r4 + 28;
84201e86:	03 f0 2f ed 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201e8a:	10 04       	Null = r0 - Null;
84201e8c:	0e 62       	if NE jump (m) Lc_aanc_proc_create_29;

84201e8e <Lc_aanc_proc_create_27>:
    {
        aanc_proc_destroy(pp_ag);
84201e8e:	3a 00       	r0 = r5 + Null;
84201e90:	51 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate ext mic output buffer");
84201e92:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201e96:	88 24       	Null = rMAC - 2;
84201e98:	63 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201e9a <Lc_aanc_proc_create_28>:
84201e9a:	55 f1 02 f0 	r0 = Null + 357566741;
84201e9e:	15 51 
84201ea0:	ef fd f7 ff 	call (m) 0xccc;
84201ea4:	2d e1 
84201ea6:	5c 6f       	jump (m) Lc_aanc_proc_create_4;

84201ea8 <Lc_aanc_proc_create_29>:
        return FALSE;
    }

    /* Allocate and zero FXLMS parameters */
    p_ag->p_fxlms_params = xzpnew(FXLMS100_PARAMETERS);
84201ea8:	c3 20       	r1 = Null + 3;
84201eaa:	02 3a       	r0 = Null + 56;
84201eac:	ff fd 24 f0 	call (m) 0x68a6;
84201eb0:	3b ef 
    if (p_ag->p_fxlms_params == NULL)
84201eb2:	f2 9f       	M[r4 + 60] = r0;
84201eb4:	0e 62       	if NE jump (m) Lc_aanc_proc_create_32;

84201eb6 <Lc_aanc_proc_create_30>:
    {
        aanc_proc_destroy(pp_ag);
84201eb6:	3a 00       	r0 = r5 + Null;
84201eb8:	3d 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create fxlms parameters");
84201eba:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201ebe:	88 24       	Null = rMAC - 2;
84201ec0:	4f 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201ec2 <Lc_aanc_proc_create_31>:
84201ec2:	55 f1 02 f0 	r0 = Null + 357566792;
84201ec6:	48 51 
84201ec8:	ef fd f7 ff 	call (m) 0xccc;
84201ecc:	25 e0 
84201ece:	48 6f       	jump (m) Lc_aanc_proc_create_4;

84201ed0 <Lc_aanc_proc_create_32>:
        return FALSE;
    }

    /* Allocate and zero FXLMS statistics */
    p_ag->p_fxlms_stats = xzpnew(FXLMS100_STATISTICS);
84201ed0:	c3 20       	r1 = Null + 3;
84201ed2:	02 2a       	r0 = Null + 24;
84201ed4:	ff fd 24 f0 	call (m) 0x68a6;
84201ed8:	33 ee 
84201eda:	14 00       	r2 = r0 + Null;
    if (p_ag->p_fxlms_stats == NULL)
84201edc:	34 ae       	M[r4 + 64] = r2;
84201ede:	0e 62       	if NE jump (m) Lc_aanc_proc_create_35;

84201ee0 <Lc_aanc_proc_create_33>:
    {
        aanc_proc_destroy(pp_ag);
84201ee0:	3a 00       	r0 = r5 + Null;
84201ee2:	28 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create fxlms statistics");
84201ee4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201ee8:	88 24       	Null = rMAC - 2;
84201eea:	3a 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201eec <Lc_aanc_proc_create_34>:
84201eec:	55 f1 02 f0 	r0 = Null + 357566836;
84201ef0:	74 51 
84201ef2:	ef fd f6 ff 	call (m) 0xccc;
84201ef6:	3b ee 
84201ef8:	33 6f       	jump (m) Lc_aanc_proc_create_4;

84201efa <Lc_aanc_proc_create_35>:
        return FALSE;
    }

    /* Create FXLMS data structure */
    if (!aanc_fxlms100_create(&p_ag->p_fxlms, p_ag->p_fxlms_params,
                              p_ag->p_fxlms_stats, AANC_PROC_NUM_TAPS_BP))
84201efa:	45 21       	r3 = Null + 5;
84201efc:	f3 99       	r1 = M[r4 + 60];
84201efe:	62 f0 44 20 	r0 = r4 + 68;
84201f02:	04 f0 2d ed 	call (m) $_aanc_fxlms100_create;
84201f06:	10 04       	Null = r0 - Null;
84201f08:	0e 62       	if NE jump (m) Lc_aanc_proc_create_38;

84201f0a <Lc_aanc_proc_create_36>:
    {
        aanc_proc_destroy(pp_ag);
84201f0a:	3a 00       	r0 = r5 + Null;
84201f0c:	13 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create fxlms");
84201f0e:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201f12:	88 24       	Null = rMAC - 2;
84201f14:	25 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201f16 <Lc_aanc_proc_create_37>:
84201f16:	55 f1 02 f0 	r0 = Null + 357566880;
84201f1a:	a0 51 
84201f1c:	ef fd f6 ff 	call (m) 0xccc;
84201f20:	31 ed 
84201f22:	1e 6f       	jump (m) Lc_aanc_proc_create_4;

84201f24 <Lc_aanc_proc_create_38>:
        return FALSE;
    }

    p_ag->clip_threshold = AANC_PROC_CLIPPING_THRESHOLD;
84201f24:	ff f3 f1 f7 	rMAC = Null + 1073741823;
84201f28:	ff 7b 
84201f2a:	b1 ae       	M[r4 + 72] = rMAC;

    return TRUE;
84201f2c:	42 20       	r0 = Null + 1;

84201f2e <Lc_aanc_proc_create_39>:
}
84201f2e:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84201f30:	d8 4c       	rts;

84201f32 <$_aanc_proc_destroy>:

bool aanc_proc_destroy(ADAPTIVE_GAIN **pp_ag)
{
84201f32:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84201f34:	17 00       	r5 = r0 + Null;
    if (*pp_ag == NULL)
84201f36:	3e e8       	r4 = M[r5 + Null];
84201f38:	35 60       	if EQ jump (m) Lc_aanc_proc_destroy_3;

84201f3a <Lc_aanc_proc_destroy_2>:
        return TRUE;
    }

    ADAPTIVE_GAIN *p_ag = *pp_ag;

    aanc_fxlms100_destroy(&p_ag->p_fxlms);
84201f3a:	62 f0 44 20 	r0 = r4 + 68;
84201f3e:	05 f0 25 eb 	call (m) $_aanc_fxlms100_destroy;
    pdelete(p_ag->p_fxlms_params);
84201f42:	f2 99       	r0 = M[r4 + 60];
84201f44:	ff fd 24 f0 	call (m) 0x68d8;
84201f48:	35 ec 
    pdelete(p_ag->p_fxlms_stats);
84201f4a:	32 a8       	r0 = M[r4 + 64];
84201f4c:	ff fd 24 f0 	call (m) 0x68d8;
84201f50:	2d ec 

    aanc_proc_destroy_ed(&p_ag->p_ed_int_params, &p_ag->p_ed_int_stats,
                         &p_ag->p_ed_int);
84201f52:	34 29       	r2 = r4 + 20;
84201f54:	33 28       	r1 = r4 + 16;
84201f56:	32 23       	r0 = r4 + 12;
84201f58:	03 f0 3d e5 	call (m) Lc_aanc_proc_destroy_ed_1;
    aanc_proc_destroy_ed(&p_ag->p_ed_ext_params, &p_ag->p_ed_ext_stats,
                         &p_ag->p_ed_ext);
84201f5c:	34 32       	r2 = r4 + 40;
84201f5e:	33 31       	r1 = r4 + 36;
84201f60:	32 30       	r0 = r4 + 32;
84201f62:	03 f0 33 e5 	call (m) Lc_aanc_proc_destroy_ed_1;
    aanc_proc_destroy_ed(&p_ag->p_ed_pb_params, &p_ag->p_ed_pb_stats,
                         &p_ag->p_ed_pb);
84201f66:	34 3a       	r2 = r4 + 56;
84201f68:	33 39       	r1 = r4 + 52;
84201f6a:	32 38       	r0 = r4 + 48;
84201f6c:	03 f0 29 e5 	call (m) Lc_aanc_proc_destroy_ed_1;

    cbuffer_destroy(p_ag->p_tmp_int_ip);
84201f70:	72 88       	r0 = M[r4 + 4];
84201f72:	ff fd 92 f0 	call (m) 0x1439a;
84201f76:	29 e1 
    cbuffer_destroy(p_ag->p_tmp_ext_ip);
84201f78:	b2 89       	r0 = M[r4 + 24];
84201f7a:	ff fd 92 f0 	call (m) 0x1439a;
84201f7e:	21 e1 
    cbuffer_destroy(p_ag->p_tmp_pb_ip);
84201f80:	f2 98       	r0 = M[r4 + 44];
84201f82:	ff fd 92 f0 	call (m) 0x1439a;
84201f86:	39 e0 

    cbuffer_destroy(p_ag->p_tmp_int_op);
84201f88:	b2 88       	r0 = M[r4 + 8];
84201f8a:	ff fd 92 f0 	call (m) 0x1439a;
84201f8e:	31 e0 
    cbuffer_destroy(p_ag->p_tmp_ext_op);
84201f90:	f2 89       	r0 = M[r4 + 28];
84201f92:	ff fd 92 f0 	call (m) 0x1439a;
84201f96:	29 e0 

    pdelete(p_ag);
84201f98:	32 00       	r0 = r4 + Null;
84201f9a:	ff fd 24 f0 	call (m) 0x68d8;
84201f9e:	3f e9 
    *pp_ag = NULL;
84201fa0:	38 ee       	M[r5 + Null] = Null;

84201fa2 <Lc_aanc_proc_destroy_3>:

bool aanc_proc_destroy(ADAPTIVE_GAIN **pp_ag)
{
    if (*pp_ag == NULL)
    {
        return TRUE;
84201fa2:	42 20       	r0 = Null + 1;

84201fa4 <Lc_aanc_proc_destroy_4>:

    pdelete(p_ag);
    *pp_ag = NULL;

    return TRUE;
}
84201fa4:	f2 48       	popm <FP, r4, r5, rLink>;
84201fa6:	d8 4c       	rts;

84201fa8 <$_aanc_proc_initialize>:

bool aanc_proc_initialize(AANC_PARAMETERS *p_params, ADAPTIVE_GAIN *p_ag,
                          unsigned ag_start, unsigned *p_flags,
                          bool hard_initialize)
{
84201fa8:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84201faa:	50 f3 10 cf 	SP = SP + 160;
84201fae:	16 00       	r4 = r0 + Null;
84201fb0:	18 09       	r6 = r1 + Null;
84201fb2:	e9 f3 ff b9 	r7 = M[FP + -4];
    /* Initialize pointers to parameters and flags */
    p_ag->p_aanc_params = p_params;
84201fb6:	86 f0 1a 8e 	M[r6 + 104] = r4;
    p_ag->p_aanc_flags = p_flags;
84201fba:	85 f0 1b 8e 	M[r6 + 108] = r3;

    /* Initialize the FXLMS */
    FXLMS100_PARAMETERS *p_fxlms_params = p_ag->p_fxlms_params;
84201fbe:	87 f0 0f 88 	r5 = M[r6 + 60];

    p_fxlms_params->target_nr = 0;
84201fc2:	38 ee       	M[r5 + Null] = Null;
    p_fxlms_params->mu = p_params->OFFSET_MU;
84201fc4:	b1 88       	rMAC = M[r4 + 8];
84201fc6:	79 8e       	M[r5 + 4] = rMAC;
    p_fxlms_params->gamma = p_params->OFFSET_GAMMA;
84201fc8:	f1 88       	rMAC = M[r4 + 12];
84201fca:	b9 8e       	M[r5 + 8] = rMAC;
    p_fxlms_params->lambda = p_params->OFFSET_LAMBDA;
84201fcc:	61 f0 4f 88 	rMAC = M[r4 + 316];
84201fd0:	39 8f       	M[r5 + 16] = rMAC;
    p_fxlms_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
84201fd2:	01 f0 40 40 	rMAC = Null + 64;
84201fd6:	f9 8e       	M[r5 + 12] = rMAC;
    p_fxlms_params->min_bound = p_params->OFFSET_FXLMS_MIN_BOUND;
84201fd8:	61 f0 43 88 	rMAC = M[r4 + 268];
84201fdc:	f9 9e       	M[r5 + 44] = rMAC;
    p_fxlms_params->max_bound = p_params->OFFSET_FXLMS_MAX_BOUND;
84201fde:	61 f0 44 88 	rMAC = M[r4 + 272];
84201fe2:	39 9f       	M[r5 + 48] = rMAC;
    p_fxlms_params->max_delta = p_params->OFFSET_FXLMS_MAX_DELTA;
84201fe4:	61 f0 45 88 	rMAC = M[r4 + 276];
84201fe8:	79 9f       	M[r5 + 52] = rMAC;

    if (hard_initialize)
84201fea:	0f f9 00 c2 	Null = r7 - Null;
84201fee:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_3;

84201ff0 <Lc_aanc_proc_initialize_2>:
    {
        p_fxlms_params->initial_gain = ag_start;
84201ff0:	7c 9e       	M[r5 + 36] = r2;

84201ff2 <Lc_aanc_proc_initialize_3>:
84201ff2:	61 f0 3b 88 	rMAC = M[r4 + 236];
84201ff6:	d9 de       	M[FP + 108] = rMAC;
84201ff8:	61 f0 3c 88 	rMAC = M[r4 + 240];
84201ffc:	e1 de       	M[FP + 112] = rMAC;
84201ffe:	61 f0 3d 88 	rMAC = M[r4 + 244];
84202002:	e9 de       	M[FP + 116] = rMAC;
84202004:	61 f0 3e 88 	rMAC = M[r4 + 248];
84202008:	f1 de       	M[FP + 120] = rMAC;
8420200a:	61 f0 3f 88 	rMAC = M[r4 + 252];
8420200e:	f9 de       	M[FP + 124] = rMAC;
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_0,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_1,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_2,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_3,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_4
    };
84202010:	c3 16       	r1 = FP + 108;
84202012:	c2 11       	r0 = FP + 28;
84202014:	44 21       	r2 = Null + 5;
84202016:	ff fd c0 f0 	call (m) 0x1a1ee;
8420201a:	39 ee 
    p_fxlms_params->p_bp_coeffs_num_int = bp_num_coeffs_int;
8420201c:	c1 11       	rMAC = FP + 28;
8420201e:	79 8f       	M[r5 + 20] = rMAC;
84202020:	61 f0 36 88 	rMAC = M[r4 + 216];
84202024:	01 df       	M[FP + 128] = rMAC;
84202026:	61 f0 37 88 	rMAC = M[r4 + 220];
8420202a:	09 df       	M[FP + 132] = rMAC;
8420202c:	61 f0 38 88 	rMAC = M[r4 + 224];
84202030:	11 df       	M[FP + 136] = rMAC;
84202032:	61 f0 39 88 	rMAC = M[r4 + 228];
84202036:	19 df       	M[FP + 140] = rMAC;
84202038:	61 f0 3a 88 	rMAC = M[r4 + 232];
8420203c:	21 df       	M[FP + 144] = rMAC;
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_0,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_1,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_2,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_3,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_4
    };
8420203e:	03 18       	r1 = FP + 128;
84202040:	02 13       	r0 = FP + 48;
84202042:	44 21       	r2 = Null + 5;
84202044:	ff fd c0 f0 	call (m) 0x1a1ee;
84202048:	2b ed 
    p_fxlms_params->p_bp_coeffs_den_int = bp_den_coeffs_int;
8420204a:	01 13       	rMAC = FP + 48;
8420204c:	b9 8f       	M[r5 + 24] = rMAC;
8420204e:	61 f0 31 88 	rMAC = M[r4 + 196];
84202052:	29 df       	M[FP + 148] = rMAC;
84202054:	61 f0 32 88 	rMAC = M[r4 + 200];
84202058:	31 df       	M[FP + 152] = rMAC;
8420205a:	61 f0 33 88 	rMAC = M[r4 + 204];
8420205e:	39 df       	M[FP + 156] = rMAC;
84202060:	61 f0 34 88 	rMAC = M[r4 + 208];
84202064:	41 df       	M[FP + 160] = rMAC;
84202066:	61 f0 35 88 	rMAC = M[r4 + 212];
8420206a:	49 df       	M[FP + 164] = rMAC;
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_0,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_1,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_2,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_3,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_4
    };
8420206c:	43 19       	r1 = FP + 148;
8420206e:	42 14       	r0 = FP + 68;
84202070:	44 21       	r2 = Null + 5;
84202072:	ff fd c0 f0 	call (m) 0x1a1ee;
84202076:	3d eb 
    p_fxlms_params->p_bp_coeffs_num_ext = bp_num_coeffs_ext;
84202078:	41 14       	rMAC = FP + 68;
8420207a:	f9 8f       	M[r5 + 28] = rMAC;
8420207c:	61 f0 2c 88 	rMAC = M[r4 + 176];
84202080:	51 df       	M[FP + 168] = rMAC;
84202082:	61 f0 2d 88 	rMAC = M[r4 + 180];
84202086:	59 df       	M[FP + 172] = rMAC;
84202088:	61 f0 2e 88 	rMAC = M[r4 + 184];
8420208c:	61 df       	M[FP + 176] = rMAC;
8420208e:	61 f0 2f 88 	rMAC = M[r4 + 188];
84202092:	69 df       	M[FP + 180] = rMAC;
84202094:	61 f0 30 88 	rMAC = M[r4 + 192];
84202098:	71 df       	M[FP + 184] = rMAC;
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_0,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_1,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_2,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_3,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_4
    };
8420209a:	83 1a       	r1 = FP + 168;
8420209c:	82 15       	r0 = FP + 88;
8420209e:	44 21       	r2 = Null + 5;
842020a0:	ff fd c0 f0 	call (m) 0x1a1ee;
842020a4:	2f ea 
    p_fxlms_params->p_bp_coeffs_den_ext = bp_den_coeffs_ext;
842020a6:	81 15       	rMAC = FP + 88;
842020a8:	39 9e       	M[r5 + 32] = rMAC;

    aanc_fxlms100_initialize(p_ag->p_fxlms, p_ag->p_tmp_int_ip,
                             p_ag->p_tmp_ext_ip, p_ag->p_tmp_int_op,
                             p_ag->p_tmp_ext_op, hard_initialize);
842020aa:	18 1c       	pushm <r7>;
842020ac:	81 f0 07 88 	rMAC = M[r6 + 28];
842020b0:	09 1c       	pushm <rMAC>;
842020b2:	85 f0 02 88 	r3 = M[r6 + 8];
842020b6:	84 f0 06 88 	r2 = M[r6 + 24];
842020ba:	83 f0 01 88 	r1 = M[r6 + 4];
842020be:	82 f0 11 88 	r0 = M[r6 + 68];
842020c2:	05 f0 3b e1 	call (m) $_aanc_fxlms100_initialize;
842020c6:	7e 4c       	SP = SP + -8;

    /* Initialize EDs */
    bool ext_ed_disable_e_filter_check = FALSE;
842020c8:	01 09       	r7 = Null + Null;
    if (p_params->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_EXT_E_FILTER_CHECK)
842020ca:	72 89       	r0 = M[r4 + 20];
842020cc:	51 c2       	rMAC = r0 AND 0x20;
842020ce:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_5;

842020d0 <Lc_aanc_proc_initialize_4>:
    {
        ext_ed_disable_e_filter_check = TRUE;
842020d0:	09 71       	r7 = Null + 1;

842020d2 <Lc_aanc_proc_initialize_5>:
    }
    bool int_ed_disable_e_filter_check = FALSE;
842020d2:	01 00       	rMAC = Null + Null;
    if (p_params->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_INT_E_FILTER_CHECK)
842020d4:	d3 c1       	r1 = r0 AND 0x10;
842020d6:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_7;

842020d8 <Lc_aanc_proc_initialize_6>:
    {
        int_ed_disable_e_filter_check = TRUE;
842020d8:	41 20       	rMAC = Null + 1;

842020da <Lc_aanc_proc_initialize_7>:
    }
    bool pb_ed_disable_e_filter_check = FALSE;
842020da:	02 09       	r8 = Null + Null;
    if (p_params->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_PB_E_FILTER_CHECK)
842020dc:	d2 c2       	r0 = r0 AND 0x40;
842020de:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_9;

842020e0 <Lc_aanc_proc_initialize_8>:
    {
        pb_ed_disable_e_filter_check = TRUE;
842020e0:	0a 71       	r8 = Null + 1;

842020e2 <Lc_aanc_proc_initialize_9>:
    }

    ED100_PARAMETERS *p_ed_int_params = p_ag->p_ed_int_params;
842020e2:	82 f0 03 88 	r0 = M[r6 + 12];
    p_ed_int_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
842020e6:	07 f0 40 40 	r5 = Null + 64;
842020ea:	17 ee       	M[r0 + Null] = r5;
    p_ed_int_params->attack_time = p_params->OFFSET_ED_INT_ATTACK;
842020ec:	33 a9       	r1 = M[r4 + 80];
842020ee:	53 8e       	M[r0 + 4] = r1;
    p_ed_int_params->decay_time = p_params->OFFSET_ED_INT_DECAY;
842020f0:	73 a9       	r1 = M[r4 + 84];
842020f2:	93 8e       	M[r0 + 8] = r1;
    p_ed_int_params->envelope_time = p_params->OFFSET_ED_INT_ENVELOPE;
842020f4:	b3 a9       	r1 = M[r4 + 88];
842020f6:	d3 8e       	M[r0 + 12] = r1;
    p_ed_int_params->init_frame_time = p_params->OFFSET_ED_INT_INIT_FRAME;
842020f8:	f3 a9       	r1 = M[r4 + 92];
842020fa:	13 8f       	M[r0 + 16] = r1;
    p_ed_int_params->ratio = p_params->OFFSET_ED_INT_RATIO;
842020fc:	33 b8       	r1 = M[r4 + 96];
842020fe:	53 8f       	M[r0 + 20] = r1;
    p_ed_int_params->min_signal = p_params->OFFSET_ED_INT_MIN_SIGNAL;
84202100:	73 b8       	r1 = M[r4 + 100];
84202102:	93 8f       	M[r0 + 24] = r1;
    p_ed_int_params->min_max_envelope = p_params->OFFSET_ED_INT_MIN_MAX_ENVELOPE;
84202104:	b3 b8       	r1 = M[r4 + 104];
84202106:	d3 8f       	M[r0 + 28] = r1;
    p_ed_int_params->delta_th = p_params->OFFSET_ED_INT_DELTA_TH;
84202108:	f3 b8       	r1 = M[r4 + 108];
8420210a:	13 9e       	M[r0 + 32] = r1;
    p_ed_int_params->count_th = p_params->OFFSET_ED_INT_COUNT_TH;
8420210c:	33 b9       	r1 = M[r4 + 112];
8420210e:	53 9e       	M[r0 + 36] = r1;
    p_ed_int_params->hold_frames = p_params->OFFSET_ED_INT_HOLD_FRAMES;
84202110:	73 b9       	r1 = M[r4 + 116];
84202112:	93 9e       	M[r0 + 40] = r1;
    p_ed_int_params->e_min_threshold = p_params->OFFSET_ED_INT_E_FILTER_MIN_THRESHOLD;
84202114:	b3 b9       	r1 = M[r4 + 120];
84202116:	d3 9e       	M[r0 + 44] = r1;
    p_ed_int_params->e_min_counter_threshold = p_params->OFFSET_ED_INT_E_FILTER_MIN_COUNTER_THRESHOLD;
84202118:	f3 b9       	r1 = M[r4 + 124];
8420211a:	13 9f       	M[r0 + 48] = r1;
    p_ed_int_params->e_min_check_disabled = int_ed_disable_e_filter_check;
8420211c:	51 9f       	M[r0 + 52] = rMAC;
    aanc_ed100_initialize(p_ag->p_ed_int);
8420211e:	82 f0 05 88 	r0 = M[r6 + 20];
84202122:	07 f0 3d ee 	call (m) $_aanc_ed100_initialize;

    ED100_PARAMETERS *p_ed_ext_params = p_ag->p_ed_ext_params;
84202126:	81 f0 08 88 	rMAC = M[r6 + 32];
    p_ed_ext_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
8420212a:	0f ee       	M[rMAC + Null] = r5;
    p_ed_ext_params->attack_time = p_params->OFFSET_ED_EXT_ATTACK;
8420212c:	32 98       	r0 = M[r4 + 32];
8420212e:	4a 8e       	M[rMAC + 4] = r0;
    p_ed_ext_params->decay_time = p_params->OFFSET_ED_EXT_DECAY;
84202130:	72 98       	r0 = M[r4 + 36];
84202132:	8a 8e       	M[rMAC + 8] = r0;
    p_ed_ext_params->envelope_time = p_params->OFFSET_ED_EXT_ENVELOPE;
84202134:	b2 98       	r0 = M[r4 + 40];
84202136:	ca 8e       	M[rMAC + 12] = r0;
    p_ed_ext_params->init_frame_time = p_params->OFFSET_ED_EXT_INIT_FRAME;
84202138:	f2 98       	r0 = M[r4 + 44];
8420213a:	0a 8f       	M[rMAC + 16] = r0;
    p_ed_ext_params->ratio = p_params->OFFSET_ED_EXT_RATIO;
8420213c:	32 99       	r0 = M[r4 + 48];
8420213e:	4a 8f       	M[rMAC + 20] = r0;
    p_ed_ext_params->min_signal = p_params->OFFSET_ED_EXT_MIN_SIGNAL;
84202140:	72 99       	r0 = M[r4 + 52];
84202142:	8a 8f       	M[rMAC + 24] = r0;
    p_ed_ext_params->min_max_envelope = p_params->OFFSET_ED_EXT_MIN_MAX_ENVELOPE;
84202144:	b2 99       	r0 = M[r4 + 56];
84202146:	ca 8f       	M[rMAC + 28] = r0;
    p_ed_ext_params->delta_th = p_params->OFFSET_ED_EXT_DELTA_TH;
84202148:	f2 99       	r0 = M[r4 + 60];
8420214a:	0a 9e       	M[rMAC + 32] = r0;
    p_ed_ext_params->count_th = p_params->OFFSET_ED_EXT_COUNT_TH;
8420214c:	32 a8       	r0 = M[r4 + 64];
8420214e:	4a 9e       	M[rMAC + 36] = r0;
    p_ed_ext_params->hold_frames = p_params->OFFSET_ED_EXT_HOLD_FRAMES;
84202150:	72 a8       	r0 = M[r4 + 68];
84202152:	8a 9e       	M[rMAC + 40] = r0;
    p_ed_ext_params->e_min_threshold = p_params->OFFSET_ED_EXT_E_FILTER_MIN_THRESHOLD;
84202154:	b2 a8       	r0 = M[r4 + 72];
84202156:	ca 9e       	M[rMAC + 44] = r0;
    p_ed_ext_params->e_min_counter_threshold = p_params->OFFSET_ED_EXT_E_FILTER_MIN_COUNTER_THRESHOLD;
84202158:	f2 a8       	r0 = M[r4 + 76];
8420215a:	0a 9f       	M[rMAC + 48] = r0;
    p_ed_ext_params->e_min_check_disabled = ext_ed_disable_e_filter_check;
8420215c:	19 f0 0d 8e 	M[rMAC + 52] = r7;
    aanc_ed100_initialize(p_ag->p_ed_ext);
84202160:	82 f0 0a 88 	r0 = M[r6 + 40];
84202164:	07 f0 3b ec 	call (m) $_aanc_ed100_initialize;

    ED100_PARAMETERS *p_ed_pb_params = p_ag->p_ed_pb_params;
84202168:	81 f0 0c 88 	rMAC = M[r6 + 48];
    p_ed_pb_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
8420216c:	0f ee       	M[rMAC + Null] = r5;
    p_ed_pb_params->attack_time = p_params->OFFSET_ED_PB_ATTACK;
8420216e:	62 f0 20 88 	r0 = M[r4 + 128];
84202172:	4a 8e       	M[rMAC + 4] = r0;
    p_ed_pb_params->decay_time = p_params->OFFSET_ED_PB_DECAY;
84202174:	62 f0 21 88 	r0 = M[r4 + 132];
84202178:	8a 8e       	M[rMAC + 8] = r0;
    p_ed_pb_params->envelope_time = p_params->OFFSET_ED_PB_ENVELOPE;
8420217a:	62 f0 22 88 	r0 = M[r4 + 136];
8420217e:	ca 8e       	M[rMAC + 12] = r0;
    p_ed_pb_params->init_frame_time = p_params->OFFSET_ED_PB_INIT_FRAME;
84202180:	62 f0 23 88 	r0 = M[r4 + 140];
84202184:	0a 8f       	M[rMAC + 16] = r0;
    p_ed_pb_params->ratio = p_params->OFFSET_ED_PB_RATIO;
84202186:	62 f0 24 88 	r0 = M[r4 + 144];
8420218a:	4a 8f       	M[rMAC + 20] = r0;
    p_ed_pb_params->min_signal = p_params->OFFSET_ED_PB_MIN_SIGNAL;
8420218c:	62 f0 25 88 	r0 = M[r4 + 148];
84202190:	8a 8f       	M[rMAC + 24] = r0;
    p_ed_pb_params->min_max_envelope = p_params->OFFSET_ED_PB_MIN_MAX_ENVELOPE;
84202192:	62 f0 26 88 	r0 = M[r4 + 152];
84202196:	ca 8f       	M[rMAC + 28] = r0;
    p_ed_pb_params->delta_th = p_params->OFFSET_ED_PB_DELTA_TH;
84202198:	62 f0 27 88 	r0 = M[r4 + 156];
8420219c:	0a 9e       	M[rMAC + 32] = r0;
    p_ed_pb_params->count_th = p_params->OFFSET_ED_PB_COUNT_TH;
8420219e:	62 f0 28 88 	r0 = M[r4 + 160];
842021a2:	4a 9e       	M[rMAC + 36] = r0;
    p_ed_pb_params->hold_frames = p_params->OFFSET_ED_PB_HOLD_FRAMES;
842021a4:	62 f0 29 88 	r0 = M[r4 + 164];
842021a8:	8a 9e       	M[rMAC + 40] = r0;
    p_ed_pb_params->e_min_threshold = p_params->OFFSET_ED_PB_E_FILTER_MIN_THRESHOLD;
842021aa:	62 f0 2a 88 	r0 = M[r4 + 168];
842021ae:	ca 9e       	M[rMAC + 44] = r0;
    p_ed_pb_params->e_min_counter_threshold = p_params->OFFSET_ED_PB_E_FILTER_MIN_COUNTER_THRESHOLD;
842021b0:	62 f0 2b 88 	r0 = M[r4 + 172];
842021b4:	0a 9f       	M[rMAC + 48] = r0;
    p_ed_pb_params->e_min_check_disabled = pb_ed_disable_e_filter_check;
842021b6:	1a f0 0d 8e 	M[rMAC + 52] = r8;
    aanc_ed100_initialize(p_ag->p_ed_pb);
842021ba:	82 f0 0e 88 	r0 = M[r6 + 56];
842021be:	07 f0 21 ea 	call (m) $_aanc_ed100_initialize;

    /* Initialize clip counter (ext and int), duration (in frames) and clip detection*/
    p_ag->clip_duration_ext = (uint16) ((p_params->OFFSET_CLIPPING_DURATION_EXT * AANC_FRAME_RATE) >> 20);
842021c2:	61 f0 40 88 	rMAC = M[r4 + 256];
842021c6:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842021ca:	d2 52       	r0 = r0 LSHIFT -20;
842021cc:	82 f0 2e 8c 	MH[r6 + 92] = r0;
    p_ag->clip_duration_int = (uint16) ((p_params->OFFSET_CLIPPING_DURATION_INT * AANC_FRAME_RATE) >> 20);
842021d0:	61 f0 41 88 	rMAC = M[r4 + 260];
842021d4:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842021d8:	d2 52       	r0 = r0 LSHIFT -20;
842021da:	82 f0 2f 8c 	MH[r6 + 94] = r0;
    p_ag->clip_duration_pb = (uint16) ((p_params->OFFSET_CLIPPING_DURATION_PB * AANC_FRAME_RATE) >> 20);
842021de:	61 f0 42 88 	rMAC = M[r4 + 264];
842021e2:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842021e6:	d2 52       	r0 = r0 LSHIFT -20;
842021e8:	82 f0 30 8c 	MH[r6 + 96] = r0;
    p_ag->clip_counter_ext = 0;
842021ec:	80 f0 31 8c 	MH[r6 + 98] = Null;
    p_ag->clip_counter_int = 0;
842021f0:	80 f0 32 8c 	MH[r6 + 100] = Null;
    p_ag->clip_counter_pb = 0;
842021f4:	80 f0 33 8c 	MH[r6 + 102] = Null;
    p_ag->clipping_detection = 0;
842021f8:	80 f0 13 8e 	M[r6 + 76] = Null;

    return TRUE;
842021fc:	42 20       	r0 = Null + 1;

842021fe <Lc_aanc_proc_initialize_10>:
}
842021fe:	b0 f3 10 cf 	SP = SP + -160;
84202202:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84202204:	d8 4c       	rts;

84202206 <$_aanc_proc_process_data>:

bool aanc_proc_process_data(ADAPTIVE_GAIN *p_ag, bool calculate_gain)
{
84202206:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84202208:	4c 4c       	SP = SP + 48;
8420220a:	16 00       	r4 = r0 + Null;
8420220c:	43 de       	M[FP + 32] = r1;
    unsigned clipping_detection = 0;
    bool self_speech = FALSE;
8420220e:	48 de       	M[FP + 36] = Null;

    // Clear all flags connected with processing data but persist quiet mode
    unsigned flags_pre_proc = *p_ag->p_aanc_flags & (AANC_MODEL_LOADED | AANC_FLAGS_QUIET_MODE);
84202210:	f1 b8       	rMAC = M[r4 + 108];
84202212:	09 e8       	rMAC = M[rMAC + Null];
84202214:	0b f0 18 f8 	r6 = rMAC AND 0x170000;
84202218:	00 00 

    // Get config flags
    unsigned config = p_ag->p_aanc_params->OFFSET_AANC_CONFIG;
8420221a:	b1 b8       	rMAC = M[r4 + 104];
8420221c:	19 f0 00 e8 	r7 = M[rMAC + Null];
    unsigned debug_config = p_ag->p_aanc_params->OFFSET_AANC_DEBUG;
84202220:	49 89       	rMAC = M[rMAC + 20];
    bool clip_int_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_INT;
    bool clip_ext_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_EXT;
84202222:	1b f1 00 00 	r9 = rMAC AND 0x2000;
    bool clip_pb_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_PB;
84202226:	12 f2 00 00 	r0 = rMAC AND 0x4000;
8420222a:	52 de       	M[FP + 40] = r0;
    bool clip_disable = clip_int_disable && clip_ext_disable && clip_pb_disable;
8420222c:	1a f0 00 10 	r8 = rMAC AND 0x1000;
84202230:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_4;

84202232 <Lc_aanc_proc_process_data_2>:
84202232:	0f fb 00 c2 	Null = r9 - Null;
84202236:	06 60       	if EQ jump (m) Lc_aanc_proc_process_data_4;

84202238 <Lc_aanc_proc_process_data_3>:
84202238:	07 00       	r5 = Null + Null;
8420223a:	52 d8       	r0 = M[FP + 40];
8420223c:	21 f0 47 ce 	if NE r5 = Null + 1;
84202240:	02 6e       	jump (m) Lc_aanc_proc_process_data_5;

84202242 <Lc_aanc_proc_process_data_4>:
84202242:	07 00       	r5 = Null + Null;

84202244 <Lc_aanc_proc_process_data_5>:
    // Get control for whether the read pointer is updated or not
    // If MUX_SEL_ALGORITHM we update the read pointer because the input
    // buffer is not copied later. If not we don't update it so that the
    // input buffer is correctly copied to the output.
    unsigned mux_sel_algorithm = \
        debug_config & AANC_CONFIG_AANC_DEBUG_MUX_SEL_ALGORITHM;
84202244:	c9 c3       	rMAC = rMAC AND 0x100;
84202246:	59 de       	M[FP + 44] = rMAC;
84202248:	0a 00       	r0 = rMAC + Null;
    p_ag->p_fxlms_params->read_ptr_upd = mux_sel_algorithm;
8420224a:	f1 99       	rMAC = M[r4 + 60];
8420224c:	8a 9e       	M[rMAC + 40] = r0;

    // Get ED pointer handles
    ED100_STATISTICS *p_ed_int_stats = p_ag->p_ed_int_stats;
8420224e:	31 89       	rMAC = M[r4 + 16];
84202250:	61 de       	M[FP + 48] = rMAC;
    ED100_STATISTICS *p_ed_ext_stats = p_ag->p_ed_ext_stats;
84202252:	71 98       	rMAC = M[r4 + 36];
84202254:	69 de       	M[FP + 52] = rMAC;
    ED100_STATISTICS *p_ed_pb_stats = p_ag->p_ed_pb_stats;
84202256:	71 99       	rMAC = M[r4 + 52];
84202258:	71 de       	M[FP + 56] = rMAC;

    int quiet_mode_lo_threshold = p_ag->p_aanc_params->OFFSET_QUIET_MODE_LO_THRESHOLD;
8420225a:	b1 b8       	rMAC = M[r4 + 104];
8420225c:	ca 89       	r0 = M[rMAC + 28];
8420225e:	7a de       	M[FP + 60] = r0;
    int quiet_mode_hi_threshold = p_ag->p_aanc_params->OFFSET_QUIET_MODE_HI_THRESHOLD;
84202260:	89 89       	rMAC = M[rMAC + 24];
84202262:	81 de       	M[FP + 64] = rMAC;

    /* Copy input data to internal data buffers */
    cbuffer_copy(p_ag->p_tmp_int_ip, p_ag->p_mic_int_ip, AANC_DEFAULT_FRAME_SIZE);
84202264:	04 f0 40 40 	r2 = Null + 64;
84202268:	b3 b9       	r1 = M[r4 + 120];
8420226a:	72 88       	r0 = M[r4 + 4];
8420226c:	ff fd bf f1 	call (m) 0x3a08c;
84202270:	21 e1 
    cbuffer_copy(p_ag->p_tmp_ext_ip, p_ag->p_mic_ext_ip, AANC_DEFAULT_FRAME_SIZE);
84202272:	04 f0 40 40 	r2 = Null + 64;
84202276:	f3 b9       	r1 = M[r4 + 124];
84202278:	b2 89       	r0 = M[r4 + 24];
8420227a:	ff fd bf f1 	call (m) 0x3a08c;
8420227e:	33 e0 

    /* Copy playback data to internal data buffers if connected */
    if (p_ag->p_playback_ip != NULL)
84202280:	63 f0 20 88 	r1 = M[r4 + 128];
84202284:	07 60       	if EQ jump (m) Lc_aanc_proc_process_data_7;

84202286 <Lc_aanc_proc_process_data_6>:
    {
        cbuffer_copy(p_ag->p_tmp_pb_ip, p_ag->p_playback_ip,
                     AANC_DEFAULT_FRAME_SIZE);
84202286:	04 f0 40 40 	r2 = Null + 64;
8420228a:	f2 98       	r0 = M[r4 + 44];
8420228c:	ff fd bf f1 	call (m) 0x3a08c;
84202290:	21 e0 

84202292 <Lc_aanc_proc_process_data_7>:
    }

    /* Copy fbmon data through if connected */
    if (p_ag->p_fbmon_ip != NULL)
84202292:	72 b9       	r0 = M[r4 + 116];
84202294:	11 60       	if EQ jump (m) Lc_aanc_proc_process_data_11;

84202296 <Lc_aanc_proc_process_data_8>:
    {
        if (p_ag->p_fbmon_op != NULL)
84202296:	61 f0 21 88 	rMAC = M[r4 + 132];
8420229a:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_10;

8420229c <Lc_aanc_proc_process_data_9>:
        {
            cbuffer_copy(p_ag->p_fbmon_op, p_ag->p_fbmon_ip,
                         AANC_DEFAULT_FRAME_SIZE);
8420229c:	04 f0 40 40 	r2 = Null + 64;
842022a0:	13 00       	r1 = r0 + Null;
842022a2:	0a 00       	r0 = rMAC + Null;
842022a4:	ff fd be f1 	call (m) 0x3a08c;
842022a8:	29 ef 
842022aa:	06 6e       	jump (m) Lc_aanc_proc_process_data_11;

842022ac <Lc_aanc_proc_process_data_10>:
        }
        else
        {
            cbuffer_discard_data(p_ag->p_fbmon_ip, AANC_DEFAULT_FRAME_SIZE);
842022ac:	03 f0 40 40 	r1 = Null + 64;
842022b0:	ff fd be f1 	call (m) 0x39f54;
842022b4:	25 e5 

842022b6 <Lc_aanc_proc_process_data_11>:
        }
    }

    /* Clipping detection on the input mics */
    if (!(clip_disable))
842022b6:	38 04       	Null = r5 - Null;
842022b8:	a7 62       	if NE jump (m) Lc_aanc_proc_process_data_49;

842022ba <Lc_aanc_proc_process_data_12>:
    {
        clipping_detection = aanc_proc_clipping_peak_detect(p_ag);
842022ba:	32 00       	r0 = r4 + Null;
842022bc:	01 f0 39 ed 	call (m) $_aanc_proc_clipping_peak_detect;
842022c0:	17 00       	r5 = r0 + Null;

        /* Set timer on int mic if clipping event detected  */
        if ((clipping_detection & AANC_FLAGS_CLIPPING_INT) && !clip_int_disable)
842022c2:	f9 c3       	rMAC = r5 AND 0x100;
842022c4:	0b 60       	if EQ jump (m) Lc_aanc_proc_process_data_15;

842022c6 <Lc_aanc_proc_process_data_13>:
842022c6:	0f fa 00 c2 	Null = r8 - Null;
842022ca:	08 62       	if NE jump (m) Lc_aanc_proc_process_data_15;

842022cc <Lc_aanc_proc_process_data_14>:
        {
            p_ag->clip_counter_int = p_ag->clip_duration_int;
842022cc:	61 f0 2f 86 	rMAC = MHU[r4 + 94];
842022d0:	61 f0 32 8c 	MH[r4 + 100] = rMAC;
            p_ag->clipping_detection |= AANC_FLAGS_CLIPPING_INT;
842022d4:	f1 a8       	rMAC = M[r4 + 76];
842022d6:	c9 cb       	rMAC = rMAC OR 0x100;
842022d8:	f1 ae       	M[r4 + 76] = rMAC;

842022da <Lc_aanc_proc_process_data_15>:
        }
        /* Set timer on ext mic if clipping event detected  */
        if ((clipping_detection & AANC_FLAGS_CLIPPING_EXT) && !clip_ext_disable)
842022da:	79 c4       	rMAC = r5 AND 0x200;
842022dc:	0b 60       	if EQ jump (m) Lc_aanc_proc_process_data_18;

842022de <Lc_aanc_proc_process_data_16>:
842022de:	0f fb 00 c2 	Null = r9 - Null;
842022e2:	08 62       	if NE jump (m) Lc_aanc_proc_process_data_18;

842022e4 <Lc_aanc_proc_process_data_17>:
        {
            p_ag->clip_counter_ext = p_ag->clip_duration_ext;
842022e4:	61 f0 2e 86 	rMAC = MHU[r4 + 92];
842022e8:	61 f0 31 8c 	MH[r4 + 98] = rMAC;
            p_ag->clipping_detection |= AANC_FLAGS_CLIPPING_EXT;
842022ec:	f1 a8       	rMAC = M[r4 + 76];
842022ee:	49 cc       	rMAC = rMAC OR 0x200;
842022f0:	f1 ae       	M[r4 + 76] = rMAC;

842022f2 <Lc_aanc_proc_process_data_18>:
        }

        /* Set timer on playback if clipping event detected  */
        if ((clipping_detection & AANC_FLAGS_CLIPPING_PLAYBACK) && !clip_pb_disable)
842022f2:	f9 c4       	rMAC = r5 AND 0x400;
842022f4:	0a 60       	if EQ jump (m) Lc_aanc_proc_process_data_21;

842022f6 <Lc_aanc_proc_process_data_19>:
842022f6:	51 d8       	rMAC = M[FP + 40];
842022f8:	08 62       	if NE jump (m) Lc_aanc_proc_process_data_21;

842022fa <Lc_aanc_proc_process_data_20>:
        {
            p_ag->clip_counter_pb = p_ag->clip_duration_pb;
842022fa:	61 f0 30 86 	rMAC = MHU[r4 + 96];
842022fe:	61 f0 33 8c 	MH[r4 + 102] = rMAC;
            p_ag->clipping_detection |= AANC_FLAGS_CLIPPING_PLAYBACK;
84202302:	f1 a8       	rMAC = M[r4 + 76];
84202304:	c9 cc       	rMAC = rMAC OR 0x400;
84202306:	f1 ae       	M[r4 + 76] = rMAC;

84202308 <Lc_aanc_proc_process_data_21>:
        }

        /* Reset int mic clipping flag if timer expires and no clipping event detected */
        if (!p_ag->clip_counter_int && !(clipping_detection & AANC_FLAGS_CLIPPING_INT))
84202308:	61 f0 32 86 	rMAC = MHU[r4 + 100];
8420230c:	09 62       	if NE jump (m) Lc_aanc_proc_process_data_24;

8420230e <Lc_aanc_proc_process_data_22>:
8420230e:	f9 c3       	rMAC = r5 AND 0x100;
84202310:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_24;

84202312 <Lc_aanc_proc_process_data_23>:
        {
            p_ag->clipping_detection &= AANC_PROC_RESET_INT_MIC_CLIP_FLAG;
84202312:	f1 a8       	rMAC = M[r4 + 76];
84202314:	03 f0 ff ff 	rMAC = rMAC AND 0x7ffffeff;
84202318:	11 ff ff 1e 
8420231c:	f1 ae       	M[r4 + 76] = rMAC;

8420231e <Lc_aanc_proc_process_data_24>:
        }
        /* Reset ext mic clipping flag if timer expires and no clipping event detected */
        if (!p_ag->clip_counter_ext && !(clipping_detection & AANC_FLAGS_CLIPPING_EXT))
8420231e:	61 f0 31 86 	rMAC = MHU[r4 + 98];
84202322:	09 62       	if NE jump (m) Lc_aanc_proc_process_data_27;

84202324 <Lc_aanc_proc_process_data_25>:
84202324:	79 c4       	rMAC = r5 AND 0x200;
84202326:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_27;

84202328 <Lc_aanc_proc_process_data_26>:
        {
            p_ag->clipping_detection &= AANC_PROC_RESET_EXT_MIC_CLIP_FLAG;
84202328:	f1 a8       	rMAC = M[r4 + 76];
8420232a:	03 f0 ff ff 	rMAC = rMAC AND 0x7ffffdff;
8420232e:	11 ff ff 1d 
84202332:	f1 ae       	M[r4 + 76] = rMAC;

84202334 <Lc_aanc_proc_process_data_27>:
        }
        /* Reset playback clipping flag if timer expires and no clipping event detected */
        if (!p_ag->clip_counter_pb && !(clipping_detection & AANC_FLAGS_CLIPPING_PLAYBACK))
84202334:	61 f0 33 86 	rMAC = MHU[r4 + 102];
84202338:	09 62       	if NE jump (m) Lc_aanc_proc_process_data_30;

8420233a <Lc_aanc_proc_process_data_28>:
8420233a:	f9 c4       	rMAC = r5 AND 0x400;
8420233c:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_30;

8420233e <Lc_aanc_proc_process_data_29>:
        {
            p_ag->clipping_detection &= AANC_PROC_RESET_PLAYBACK_CLIP_FLAG;
8420233e:	f1 a8       	rMAC = M[r4 + 76];
84202340:	03 f0 ff ff 	rMAC = rMAC AND 0x7ffffbff;
84202344:	11 ff ff 1b 
84202348:	f1 ae       	M[r4 + 76] = rMAC;

8420234a <Lc_aanc_proc_process_data_30>:
        }

        if (p_ag->clipping_detection)
8420234a:	f0 a8       	Null = M[r4 + 76];
8420234c:	5d 60       	if EQ jump (m) Lc_aanc_proc_process_data_49;

8420234e <Lc_aanc_proc_process_data_31>:
        {
            /* Copy input data to output if terminals are connected otherwise
             * discard data.
             */
            if (p_ag->p_mic_int_op != NULL && p_ag->p_mic_ext_op != NULL)
8420234e:	62 f0 22 88 	r0 = M[r4 + 136];
84202352:	13 60       	if EQ jump (m) Lc_aanc_proc_process_data_34;

84202354 <Lc_aanc_proc_process_data_32>:
84202354:	61 f0 23 88 	rMAC = M[r4 + 140];
84202358:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_34;

8420235a <Lc_aanc_proc_process_data_33>:
            {
                cbuffer_copy(p_ag->p_mic_int_op, p_ag->p_tmp_int_ip,
                             AANC_DEFAULT_FRAME_SIZE);
8420235a:	04 f0 40 40 	r2 = Null + 64;
8420235e:	73 88       	r1 = M[r4 + 4];
84202360:	ff fd be f1 	call (m) 0x3a08c;
84202364:	2d e9 
                cbuffer_copy(p_ag->p_mic_ext_op, p_ag->p_tmp_ext_ip,
                             AANC_DEFAULT_FRAME_SIZE);
84202366:	04 f0 40 40 	r2 = Null + 64;
8420236a:	b3 89       	r1 = M[r4 + 24];
8420236c:	62 f0 23 88 	r0 = M[r4 + 140];
84202370:	ff fd be f1 	call (m) 0x3a08c;
84202374:	3d e8 
84202376:	0d 6e       	jump (m) Lc_aanc_proc_process_data_35;

84202378 <Lc_aanc_proc_process_data_34>:
            }
            else
            {
                cbuffer_discard_data(p_ag->p_tmp_int_ip,
                                     AANC_DEFAULT_FRAME_SIZE);
84202378:	03 f0 40 40 	r1 = Null + 64;
8420237c:	72 88       	r0 = M[r4 + 4];
8420237e:	ff fd bd f1 	call (m) 0x39f54;
84202382:	37 ee 
                cbuffer_discard_data(p_ag->p_tmp_ext_ip,
                                     AANC_DEFAULT_FRAME_SIZE);
84202384:	03 f0 40 40 	r1 = Null + 64;
84202388:	b2 89       	r0 = M[r4 + 24];
8420238a:	ff fd bd f1 	call (m) 0x39f54;
8420238e:	2b ee 

84202390 <Lc_aanc_proc_process_data_35>:
            }

            /* Copy or discard data on the playback stream */
            if (p_ag->p_playback_ip != NULL) {
84202390:	61 f0 20 88 	rMAC = M[r4 + 128];
84202394:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_39;

84202396 <Lc_aanc_proc_process_data_36>:
                if (p_ag->p_playback_op != NULL)
84202396:	32 b9       	r0 = M[r4 + 112];
84202398:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_38;

8420239a <Lc_aanc_proc_process_data_37>:
                {
                    cbuffer_copy(p_ag->p_playback_op, p_ag->p_tmp_pb_ip,
                                AANC_DEFAULT_FRAME_SIZE);
8420239a:	04 f0 40 40 	r2 = Null + 64;
8420239e:	f3 98       	r1 = M[r4 + 44];
842023a0:	ff fd be f1 	call (m) 0x3a08c;
842023a4:	2d e7 
842023a6:	07 6e       	jump (m) Lc_aanc_proc_process_data_39;

842023a8 <Lc_aanc_proc_process_data_38>:
                }
                else
                {
                    cbuffer_discard_data(p_ag->p_tmp_pb_ip,
                                        AANC_DEFAULT_FRAME_SIZE);
842023a8:	03 f0 40 40 	r1 = Null + 64;
842023ac:	f2 98       	r0 = M[r4 + 44];
842023ae:	ff fd bd f1 	call (m) 0x39f54;
842023b2:	27 ed 

842023b4 <Lc_aanc_proc_process_data_39>:
                }
            }

            /* Decrement int mic clip counter and update flag */
            if (p_ag->clip_counter_int && !(clipping_detection & AANC_FLAGS_CLIPPING_INT))
842023b4:	61 f0 32 86 	rMAC = MHU[r4 + 100];
842023b8:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_42;

842023ba <Lc_aanc_proc_process_data_40>:
842023ba:	fa c3       	r0 = r5 AND 0x100;
842023bc:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_42;

842023be <Lc_aanc_proc_process_data_41>:
            {
                p_ag->clip_counter_int--;
842023be:	49 24       	rMAC = rMAC - 1;
842023c0:	61 f0 32 8c 	MH[r4 + 100] = rMAC;
                flags_pre_proc |= AANC_FLAGS_CLIPPING_INT;
842023c4:	01 f0 00 f8 	r6 = r6 OR 0x100;
842023c8:	58 d8 

842023ca <Lc_aanc_proc_process_data_42>:
            }
            /* Decrement ext mic clip counter and update flag */
            if (p_ag->clip_counter_ext && !(clipping_detection & AANC_FLAGS_CLIPPING_EXT))
842023ca:	61 f0 31 86 	rMAC = MHU[r4 + 98];
842023ce:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_45;

842023d0 <Lc_aanc_proc_process_data_43>:
842023d0:	7a c4       	r0 = r5 AND 0x200;
842023d2:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_45;

842023d4 <Lc_aanc_proc_process_data_44>:
            {
                p_ag->clip_counter_ext--;
842023d4:	49 24       	rMAC = rMAC - 1;
842023d6:	61 f0 31 8c 	MH[r4 + 98] = rMAC;
                flags_pre_proc |= AANC_FLAGS_CLIPPING_EXT;
842023da:	02 f0 00 f8 	r6 = r6 OR 0x200;
842023de:	58 d8 

842023e0 <Lc_aanc_proc_process_data_45>:
            }
            /* Decrement playback clip counter and update flag */
            if (p_ag->clip_counter_pb && !(clipping_detection & AANC_FLAGS_CLIPPING_PLAYBACK))
842023e0:	61 f0 33 86 	rMAC = MHU[r4 + 102];
842023e4:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_48;

842023e6 <Lc_aanc_proc_process_data_46>:
842023e6:	fa c4       	r0 = r5 AND 0x400;
842023e8:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_48;

842023ea <Lc_aanc_proc_process_data_47>:
            {
                p_ag->clip_counter_pb--;
842023ea:	49 24       	rMAC = rMAC - 1;
842023ec:	61 f0 33 8c 	MH[r4 + 102] = rMAC;
                flags_pre_proc |= AANC_FLAGS_CLIPPING_PLAYBACK;
842023f0:	04 f0 00 f8 	r6 = r6 OR 0x400;
842023f4:	58 d8 

842023f6 <Lc_aanc_proc_process_data_48>:
            }

            flags_pre_proc |= p_ag->clipping_detection;
842023f6:	f1 a8       	rMAC = M[r4 + 76];
842023f8:	00 f1 78 c8 	r6 = r6 OR rMAC;
            *p_ag->p_aanc_flags = flags_pre_proc;
842023fc:	f1 b8       	rMAC = M[r4 + 108];
842023fe:	18 f0 00 ee 	M[rMAC + Null] = r6;
            return FALSE;
84202402:	02 00       	r0 = Null + Null;
84202404:	db 6e       	jump (m) Lc_aanc_proc_process_data_91;

84202406 <Lc_aanc_proc_process_data_49>:
        }
    }

    /* ED process ext mic */
    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_EXT))
84202406:	91 f0 02 00 	rMAC = r7 AND 0x2;
8420240a:	2f 62       	if NE jump (m) Lc_aanc_proc_process_data_59;

8420240c <Lc_aanc_proc_process_data_50>:
    {
        aanc_ed100_process_data(p_ag->p_tmp_ext_ip, p_ag->p_ed_ext);
8420240c:	b3 98       	r1 = M[r4 + 40];
8420240e:	b2 89       	r0 = M[r4 + 24];
84202410:	06 f0 2d e9 	call (m) $_aanc_ed100_process_data;

        /* Catch external ED detection */
        if (p_ed_ext_stats->detection)
84202414:	69 d8       	rMAC = M[FP + 52];
84202416:	c8 88       	Null = M[rMAC + 12];
84202418:	0d 60       	if EQ jump (m) Lc_aanc_proc_process_data_53;

8420241a <Lc_aanc_proc_process_data_51>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_EXT;
8420241a:	10 f8 58 c8 	r6 = r6 OR 0x20;
            L4_DBG_MSG("AANC_PROC ED Ext Detection");
8420241e:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84202422:	08 25       	Null = rMAC - 4;
84202424:	07 68       	if LT jump (m) Lc_aanc_proc_process_data_53;

84202426 <Lc_aanc_proc_process_data_52>:
84202426:	55 f1 02 f0 	r0 = Null + 357566913;
8420242a:	c1 51 
8420242c:	ef fd f4 ff 	call (m) 0xccc;
84202430:	21 e5 

84202432 <Lc_aanc_proc_process_data_53>:
        }

        /* Threshold detect on external ED */
        if (p_ed_ext_stats->spl < quiet_mode_lo_threshold)
84202432:	69 d8       	rMAC = M[FP + 52];
84202434:	09 e8       	rMAC = M[rMAC + Null];
84202436:	7a d8       	r0 = M[FP + 60];
84202438:	88 04       	Null = rMAC - r0;
8420243a:	10 66       	if GE jump (m) Lc_aanc_proc_process_data_57;

8420243c <Lc_aanc_proc_process_data_54>:
        {
            L4_DBG_MSG("AANC_PROC ED Ext below quiet mode low threshold");
8420243c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84202440:	08 25       	Null = rMAC - 4;
84202442:	07 68       	if LT jump (m) Lc_aanc_proc_process_data_56;

84202444 <Lc_aanc_proc_process_data_55>:
84202444:	55 f1 02 f0 	r0 = Null + 357566940;
84202448:	dc 51 
8420244a:	ef fd f4 ff 	call (m) 0xccc;
8420244e:	23 e4 

84202450 <Lc_aanc_proc_process_data_56>:
            /* Set quiet mode flag */
            flags_pre_proc |= AANC_FLAGS_QUIET_MODE;
84202450:	01 f0 00 f0 	r6 = r6 OR 0x100000;
84202454:	00 f8 58 c8 
84202458:	08 6e       	jump (m) Lc_aanc_proc_process_data_59;

8420245a <Lc_aanc_proc_process_data_57>:
        }
        else if (p_ed_ext_stats->spl > quiet_mode_hi_threshold)
8420245a:	82 d8       	r0 = M[FP + 64];
8420245c:	88 04       	Null = rMAC - r0;
8420245e:	05 6c       	if LE jump (m) Lc_aanc_proc_process_data_59;

84202460 <Lc_aanc_proc_process_data_58>:
        {
            /* Reset quiet mode flag */
            flags_pre_proc &= AANC_PROC_QUIET_MODE_RESET_FLAG;
84202460:	03 f0 f7 ff 	r6 = r6 AND 0x7fefffff;
84202464:	88 ff ff 1f 

84202468 <Lc_aanc_proc_process_data_59>:
        }
    }

    /* ED process int mic */
    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_INT))
84202468:	91 f0 01 00 	rMAC = r7 AND 0x1;
8420246c:	14 62       	if NE jump (m) Lc_aanc_proc_process_data_63;

8420246e <Lc_aanc_proc_process_data_60>:
    {
        aanc_ed100_process_data(p_ag->p_tmp_int_ip, p_ag->p_ed_int);
8420246e:	73 89       	r1 = M[r4 + 20];
84202470:	72 88       	r0 = M[r4 + 4];
84202472:	06 f0 2b e6 	call (m) $_aanc_ed100_process_data;
        if (p_ed_int_stats->detection)
84202476:	61 d8       	rMAC = M[FP + 48];
84202478:	c8 88       	Null = M[rMAC + 12];
8420247a:	0d 60       	if EQ jump (m) Lc_aanc_proc_process_data_63;

8420247c <Lc_aanc_proc_process_data_61>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_INT;
8420247c:	08 f8 58 c8 	r6 = r6 OR 0x10;
            L4_DBG_MSG("AANC_PROC: ED Int Detection");
84202480:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84202484:	08 25       	Null = rMAC - 4;
84202486:	07 68       	if LT jump (m) Lc_aanc_proc_process_data_63;

84202488 <Lc_aanc_proc_process_data_62>:
84202488:	55 f1 02 f0 	r0 = Null + 357566988;
8420248c:	0c 52 
8420248e:	ef fd f4 ff 	call (m) 0xccc;
84202492:	3f e1 

84202494 <Lc_aanc_proc_process_data_63>:
        }
    }

    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_SELF_SPEECH))
84202494:	91 f0 08 00 	rMAC = r7 AND 0x8;
84202498:	17 62       	if NE jump (m) Lc_aanc_proc_process_data_67;

8420249a <Lc_aanc_proc_process_data_64>:
    {
        /* ED process self-speech */
        self_speech = aanc_ed100_self_speech_detect(
            p_ag->p_ed_int, p_ag->p_ed_ext,
            p_ag->p_aanc_params->OFFSET_SELF_SPEECH_THRESHOLD);
8420249a:	b1 b8       	rMAC = M[r4 + 104];
8420249c:	b3 98       	r1 = M[r4 + 40];
8420249e:	14 f0 4e 88 	r2 = M[rMAC + 312];
842024a2:	72 89       	r0 = M[r4 + 20];
842024a4:	06 f0 3b eb 	call (m) $_aanc_ed100_self_speech_detect;
842024a8:	4a de       	M[FP + 36] = r0;
        if (self_speech)
842024aa:	11 00       	rMAC = r0 + Null;
842024ac:	0d 60       	if EQ jump (m) Lc_aanc_proc_process_data_67;

842024ae <Lc_aanc_proc_process_data_65>:
        {
            flags_pre_proc |= AANC_FLAGS_SELF_SPEECH;
842024ae:	40 f8 58 c8 	r6 = r6 OR 0x80;
            L4_DBG_MSG("AANC_PROC: Self Speech Detection");
842024b2:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842024b6:	08 25       	Null = rMAC - 4;
842024b8:	07 68       	if LT jump (m) Lc_aanc_proc_process_data_67;

842024ba <Lc_aanc_proc_process_data_66>:
842024ba:	55 f1 02 f0 	r0 = Null + 357567016;
842024be:	28 52 
842024c0:	ef fd f4 ff 	call (m) 0xccc;
842024c4:	2d e0 

842024c6 <Lc_aanc_proc_process_data_67>:
        }
    }

    /* ED process playback */
    if (p_ag->p_playback_ip != NULL &&
        !(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_PB))
842024c6:	61 f0 20 88 	rMAC = M[r4 + 128];
842024ca:	17 60       	if EQ jump (m) Lc_aanc_proc_process_data_72;

842024cc <Lc_aanc_proc_process_data_68>:
842024cc:	91 f0 04 00 	rMAC = r7 AND 0x4;
842024d0:	14 62       	if NE jump (m) Lc_aanc_proc_process_data_72;

842024d2 <Lc_aanc_proc_process_data_69>:
    {
        aanc_ed100_process_data(p_ag->p_tmp_pb_ip, p_ag->p_ed_pb);
842024d2:	b3 99       	r1 = M[r4 + 56];
842024d4:	f2 98       	r0 = M[r4 + 44];
842024d6:	06 f0 27 e3 	call (m) $_aanc_ed100_process_data;
        if (p_ed_pb_stats->detection)
842024da:	71 d8       	rMAC = M[FP + 56];
842024dc:	c8 88       	Null = M[rMAC + 12];
842024de:	0d 60       	if EQ jump (m) Lc_aanc_proc_process_data_72;

842024e0 <Lc_aanc_proc_process_data_70>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_PLAYBACK;
842024e0:	20 f8 58 c8 	r6 = r6 OR 0x40;
            L4_DBG_MSG("AANC_PROC: ED Playback Detection");
842024e4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842024e8:	08 25       	Null = rMAC - 4;
842024ea:	07 68       	if LT jump (m) Lc_aanc_proc_process_data_72;

842024ec <Lc_aanc_proc_process_data_71>:
842024ec:	55 f1 02 f0 	r0 = Null + 357567049;
842024f0:	49 52 
842024f2:	ef fd f3 ff 	call (m) 0xccc;
842024f6:	3b ee 

842024f8 <Lc_aanc_proc_process_data_72>:
        }
    }

    /* Update flags */
    *p_ag->p_aanc_flags = flags_pre_proc;
842024f8:	f1 b8       	rMAC = M[r4 + 108];
842024fa:	18 f0 00 ee 	M[rMAC + Null] = r6;

    /* Reference the working buffer used at the end to copy or discard data.
     * If adaptive gain calculation runs this is updated to the temporary output
     * buffers.
     */
    tCbuffer *p_int_working_buffer = p_ag->p_tmp_int_ip;
842024fe:	77 88       	r5 = M[r4 + 4];
    tCbuffer *p_ext_working_buffer = p_ag->p_tmp_ext_ip;
84202500:	68 f0 06 88 	r6 = M[r4 + 24];

    /* Call adaptive ANC function */
    if (!p_ed_ext_stats->detection && !p_ed_int_stats->detection &&
        !p_ed_pb_stats->detection  && !self_speech && calculate_gain)
84202504:	69 d8       	rMAC = M[FP + 52];
84202506:	c8 88       	Null = M[rMAC + 12];
84202508:	25 62       	if NE jump (m) Lc_aanc_proc_process_data_82;

8420250a <Lc_aanc_proc_process_data_73>:
8420250a:	61 d8       	rMAC = M[FP + 48];
8420250c:	c8 88       	Null = M[rMAC + 12];
8420250e:	22 62       	if NE jump (m) Lc_aanc_proc_process_data_82;

84202510 <Lc_aanc_proc_process_data_74>:
84202510:	71 d8       	rMAC = M[FP + 56];
84202512:	c8 88       	Null = M[rMAC + 12];
84202514:	1f 62       	if NE jump (m) Lc_aanc_proc_process_data_82;

84202516 <Lc_aanc_proc_process_data_75>:
84202516:	49 d8       	rMAC = M[FP + 36];
84202518:	1d 62       	if NE jump (m) Lc_aanc_proc_process_data_82;

8420251a <Lc_aanc_proc_process_data_76>:
8420251a:	41 d8       	rMAC = M[FP + 32];
8420251c:	1b 60       	if EQ jump (m) Lc_aanc_proc_process_data_82;

8420251e <Lc_aanc_proc_process_data_77>:
    {
        L5_DBG_MSG("AANC_PROC: Calculate new gain");
8420251e:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84202522:	48 25       	Null = rMAC - 5;
84202524:	07 68       	if LT jump (m) Lc_aanc_proc_process_data_79;

84202526 <Lc_aanc_proc_process_data_78>:
84202526:	55 f1 02 f0 	r0 = Null + 357567082;
8420252a:	6a 52 
8420252c:	ef fd f3 ff 	call (m) 0xccc;
84202530:	21 ed 

84202532 <Lc_aanc_proc_process_data_79>:
        if (aanc_fxlms100_process_data(p_ag->p_fxlms))
84202532:	72 a8       	r0 = M[r4 + 68];
84202534:	03 f0 35 ee 	call (m) $_aanc_fxlms100_process_data;
84202538:	10 04       	Null = r0 - Null;
8420253a:	0c 60       	if EQ jump (m) Lc_aanc_proc_process_data_82;

8420253c <Lc_aanc_proc_process_data_80>:
        {
            *p_ag->p_aanc_flags |= p_ag->p_fxlms_stats->flags;
8420253c:	f1 b8       	rMAC = M[r4 + 108];
8420253e:	32 a8       	r0 = M[r4 + 64];
84202540:	0b e8       	r1 = M[rMAC + Null];
84202542:	12 e8       	r0 = M[r0 + Null];
84202544:	d2 12       	r0 = r0 OR r1;
84202546:	0a ee       	M[rMAC + Null] = r0;
            if (mux_sel_algorithm)
84202548:	59 d8       	rMAC = M[FP + 44];
8420254a:	04 60       	if EQ jump (m) Lc_aanc_proc_process_data_82;

8420254c <Lc_aanc_proc_process_data_81>:
            {
                p_int_working_buffer = p_ag->p_tmp_int_op;
8420254c:	b7 88       	r5 = M[r4 + 8];
                p_ext_working_buffer = p_ag->p_tmp_ext_op;
8420254e:	68 f0 07 88 	r6 = M[r4 + 28];

84202552 <Lc_aanc_proc_process_data_82>:
    }

    /* Copy internal buffers to the output buffers if they are connected
    * otherwise discard the data.
    */
    if (p_ag->p_mic_int_op != NULL && p_ag->p_mic_ext_op != NULL)
84202552:	62 f0 22 88 	r0 = M[r4 + 136];
84202556:	13 60       	if EQ jump (m) Lc_aanc_proc_process_data_85;

84202558 <Lc_aanc_proc_process_data_83>:
84202558:	61 f0 23 88 	rMAC = M[r4 + 140];
8420255c:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_85;

8420255e <Lc_aanc_proc_process_data_84>:
    {
        cbuffer_copy(p_ag->p_mic_int_op, p_int_working_buffer,
                        AANC_DEFAULT_FRAME_SIZE);
8420255e:	04 f0 40 40 	r2 = Null + 64;
84202562:	3b 00       	r1 = r5 + Null;
84202564:	ff fd bd f1 	call (m) 0x3a08c;
84202568:	29 e9 
        cbuffer_copy(p_ag->p_mic_ext_op, p_ext_working_buffer,
                        AANC_DEFAULT_FRAME_SIZE);
8420256a:	04 f0 40 40 	r2 = Null + 64;
8420256e:	62 f0 23 88 	r0 = M[r4 + 140];
84202572:	43 08       	r1 = r6 + Null;
84202574:	ff fd bd f1 	call (m) 0x3a08c;
84202578:	39 e8 
8420257a:	0d 6e       	jump (m) Lc_aanc_proc_process_data_86;

8420257c <Lc_aanc_proc_process_data_85>:
    }
    else
    {
        cbuffer_discard_data(p_int_working_buffer, AANC_DEFAULT_FRAME_SIZE);
8420257c:	03 f0 40 40 	r1 = Null + 64;
84202580:	3a 00       	r0 = r5 + Null;
84202582:	ff fd bc f1 	call (m) 0x39f54;
84202586:	33 ee 
        cbuffer_discard_data(p_ext_working_buffer, AANC_DEFAULT_FRAME_SIZE);
84202588:	03 f0 40 40 	r1 = Null + 64;
8420258c:	42 08       	r0 = r6 + Null;
8420258e:	ff fd bc f1 	call (m) 0x39f54;
84202592:	27 ee 

84202594 <Lc_aanc_proc_process_data_86>:
    }

    /* Copy or discard data on the internal playback stream buffer */
    if (p_ag->p_playback_ip != NULL) {
84202594:	61 f0 20 88 	rMAC = M[r4 + 128];
84202598:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_90;

8420259a <Lc_aanc_proc_process_data_87>:
        if (p_ag->p_playback_op != NULL)
8420259a:	32 b9       	r0 = M[r4 + 112];
8420259c:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_89;

8420259e <Lc_aanc_proc_process_data_88>:
        {
            cbuffer_copy(p_ag->p_playback_op, p_ag->p_tmp_pb_ip,
                        AANC_DEFAULT_FRAME_SIZE);
8420259e:	04 f0 40 40 	r2 = Null + 64;
842025a2:	f3 98       	r1 = M[r4 + 44];
842025a4:	ff fd bd f1 	call (m) 0x3a08c;
842025a8:	29 e7 
842025aa:	07 6e       	jump (m) Lc_aanc_proc_process_data_90;

842025ac <Lc_aanc_proc_process_data_89>:
        }
        else
        {
            cbuffer_discard_data(p_ag->p_tmp_pb_ip,
                                 AANC_DEFAULT_FRAME_SIZE);
842025ac:	03 f0 40 40 	r1 = Null + 64;
842025b0:	f2 98       	r0 = M[r4 + 44];
842025b2:	ff fd bc f1 	call (m) 0x39f54;
842025b6:	23 ed 

842025b8 <Lc_aanc_proc_process_data_90>:
        }
    }

    return TRUE;
842025b8:	42 20       	r0 = Null + 1;

842025ba <Lc_aanc_proc_process_data_91>:
}
842025ba:	74 4c       	SP = SP + -48;
842025bc:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
842025be:	d8 4c       	rts;

842025c0 <Lc_aanc_proc_create_ed_1>:
 */
static bool aanc_proc_create_ed(ED100_PARAMETERS **pp_params,
                                ED100_STATISTICS **pp_stats,
                                void **pp_ed,
                                unsigned sample_rate)
{
842025c0:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
842025c2:	16 00       	r4 = r0 + Null;
842025c4:	1f 00       	r5 = r1 + Null;
842025c6:	21 09       	r7 = r2 + Null;
842025c8:	28 09       	r6 = r3 + Null;
    /* Allocate parameters */
    *pp_params = xzpnew(ED100_PARAMETERS);
842025ca:	c3 20       	r1 = Null + 3;
842025cc:	02 3a       	r0 = Null + 56;
842025ce:	ff fd 21 f0 	call (m) 0x68a6;
842025d2:	39 e6 
    if (*pp_params == NULL)
842025d4:	32 ee       	M[r4 + Null] = r0;
842025d6:	1a 60       	if EQ jump (m) Lc_aanc_proc_create_ed_6;

842025d8 <Lc_aanc_proc_create_ed_2>:
    {
        return FALSE;
    }

    /* Allocate statistics */
    *pp_stats = xzpnew(ED100_STATISTICS);
842025d8:	c3 20       	r1 = Null + 3;
842025da:	02 29       	r0 = Null + 20;
842025dc:	ff fd 21 f0 	call (m) 0x68a6;
842025e0:	2b e6 
    if (*pp_stats == NULL)
842025e2:	3a ee       	M[r5 + Null] = r0;
842025e4:	0e 60       	if EQ jump (m) Lc_aanc_proc_create_ed_5;

842025e6 <Lc_aanc_proc_create_ed_3>:

        return FALSE;
    }

    /* Create the ED object */
    if (!aanc_ed100_create(pp_ed, *pp_params, *pp_stats, sample_rate))
842025e6:	33 e8       	r1 = M[r4 + Null];
842025e8:	45 08       	r3 = r6 + Null;
842025ea:	14 00       	r2 = r0 + Null;
842025ec:	4a 08       	r0 = r7 + Null;
842025ee:	04 f0 39 ea 	call (m) $_aanc_ed100_create;
842025f2:	10 04       	Null = r0 - Null;
842025f4:	0d 62       	if NE jump (m) Lc_aanc_proc_create_ed_7;

842025f6 <Lc_aanc_proc_create_ed_4>:
    {
        pdelete(*pp_stats);
842025f6:	3a e8       	r0 = M[r5 + Null];
842025f8:	ff fd 21 f0 	call (m) 0x68d8;
842025fc:	21 e7 
        *pp_stats = NULL;
842025fe:	38 ee       	M[r5 + Null] = Null;

84202600 <Lc_aanc_proc_create_ed_5>:

    /* Allocate statistics */
    *pp_stats = xzpnew(ED100_STATISTICS);
    if (*pp_stats == NULL)
    {
        pdelete(*pp_params);
84202600:	32 e8       	r0 = M[r4 + Null];
84202602:	ff fd 21 f0 	call (m) 0x68d8;
84202606:	37 e6 
        *pp_params = NULL;
84202608:	30 ee       	M[r4 + Null] = Null;

8420260a <Lc_aanc_proc_create_ed_6>:
{
    /* Allocate parameters */
    *pp_params = xzpnew(ED100_PARAMETERS);
    if (*pp_params == NULL)
    {
        return FALSE;
8420260a:	02 00       	r0 = Null + Null;
8420260c:	02 6e       	jump (m) Lc_aanc_proc_create_ed_8;

8420260e <Lc_aanc_proc_create_ed_7>:
        *pp_params = NULL;

        return FALSE;
    }

    return TRUE;
8420260e:	42 20       	r0 = Null + 1;

84202610 <Lc_aanc_proc_create_ed_8>:
}
84202610:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84202612:	d8 4c       	rts;

84202614 <Lc_aanc_proc_destroy_ed_1>:
 * \return  boolean indicating success or failure.
 */
static void aanc_proc_destroy_ed(ED100_PARAMETERS **pp_params,
                                 ED100_STATISTICS **pp_stats,
                                 void **pp_ed)
{
84202614:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84202616:	1e 00       	r4 = r1 + Null;
84202618:	27 00       	r5 = r2 + Null;
    pdelete(*pp_params);
8420261a:	12 e8       	r0 = M[r0 + Null];
8420261c:	ff fd 21 f0 	call (m) 0x68d8;
84202620:	3d e5 
    pdelete(*pp_stats);
84202622:	32 e8       	r0 = M[r4 + Null];
84202624:	ff fd 21 f0 	call (m) 0x68d8;
84202628:	35 e5 

    aanc_ed100_destroy(pp_ed);
8420262a:	3a 00       	r0 = r5 + Null;
8420262c:	05 f0 39 ec 	call (m) $_aanc_ed100_destroy;

84202630 <Lc_aanc_proc_destroy_ed_2>:

    return;
84202630:	f2 48       	popm <FP, r4, r5, rLink>;
84202632:	d8 4c       	rts;

84202634 <Lc_aanc_proc_create_cbuffer_1>:
 * \param  malloc_pref  Malloc preference.
 *
 * \return  boolean indicating success or failure.
 */
static bool aanc_proc_create_cbuffer(tCbuffer **pp_buffer, unsigned malloc_pref)
{
84202634:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84202636:	16 00       	r4 = r0 + Null;
    /* Allocate buffer memory explicitly */
    int *ptr = xzppnewn(AANC_DEFAULT_BUFFER_SIZE, int, malloc_pref);
84202638:	02 f0 00 42 	r0 = Null + 512;
8420263c:	ff fd 21 f0 	call (m) 0x68a6;
84202640:	2b e3 
84202642:	17 00       	r5 = r0 + Null;

    if (ptr == NULL)
84202644:	0e 60       	if EQ jump (m) Lc_aanc_proc_create_cbuffer_4;

84202646 <Lc_aanc_proc_create_cbuffer_2>:
        return FALSE;
    }

    /* Wrap allocated memory in a cbuffer */
    *pp_buffer = cbuffer_create(ptr, AANC_DEFAULT_BUFFER_SIZE,
                               BUF_DESC_SW_BUFFER);
84202646:	03 f0 80 40 	r1 = Null + 128;
8420264a:	04 00       	r2 = Null + Null;
8420264c:	ff fd 8e f0 	call (m) 0x1429c;
84202650:	31 e2 
84202652:	32 ee       	M[r4 + Null] = r0;
    if (*pp_buffer == NULL)
84202654:	31 e8       	rMAC = M[r4 + Null];
84202656:	07 62       	if NE jump (m) Lc_aanc_proc_create_cbuffer_5;

84202658 <Lc_aanc_proc_create_cbuffer_3>:
    {
        pdelete(ptr);
84202658:	3a 00       	r0 = r5 + Null;
8420265a:	ff fd 21 f0 	call (m) 0x68d8;
8420265e:	3f e3 

84202660 <Lc_aanc_proc_create_cbuffer_4>:
    /* Allocate buffer memory explicitly */
    int *ptr = xzppnewn(AANC_DEFAULT_BUFFER_SIZE, int, malloc_pref);

    if (ptr == NULL)
    {
        return FALSE;
84202660:	02 00       	r0 = Null + Null;
84202662:	02 6e       	jump (m) Lc_aanc_proc_create_cbuffer_6;

84202664 <Lc_aanc_proc_create_cbuffer_5>:
        ptr = NULL;

        return FALSE;
    }

    return TRUE;
84202664:	42 20       	r0 = Null + 1;

84202666 <Lc_aanc_proc_create_cbuffer_6>:
}
84202666:	f2 48       	popm <FP, r4, r5, rLink>;
84202668:	d8 4c       	rts;

8420266a <$kdc_start>:
.MODULE $M.kdc_start;
.CODESEGMENT PM;
.DATASEGMENT DM;

$kdc_start:
r0 = $_aanc_mono_16k_cap_data;
8420266a:	07 f0 02 f0 	r0 = Null + 7340032;
8420266e:	00 40 
    /* Force this symbol to be exported in ELF */
    Null = $___kymera_debug_map_addr;
84202670:	20 f0 f8 42 	Null = Null + 17144;

84202674 <$_aanc_proc_clipping_peak_detect>:
.MODULE $M.aanc_proc.clipping_peak_detect;
    .CODESEGMENT PM;

$_aanc_proc_clipping_peak_detect:

    PUSH_ALL_C;
84202674:	fc fa 40 e0 	pushm <r4, r5, r6, r7, r8, r9, rLink, rMACB>;
84202678:	07 f0 47 e4 	pushm <I0, I1, I2, I4, I5, I6>;
8420267c:	70 ff 40 e4 	pushm <M0, M1, M2, L0, L1, L4, L5>;

    r9 = r0;
84202680:	13 09       	r9 = r0 + Null;
    r4 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.CLIP_THRESHOLD_FIELD];
84202682:	b6 f0 12 88 	r4 = M[r9 + 72];

    // Get cbuffer details for DM1 input
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_INT_IP_FIELD];
84202686:	b2 f0 01 88 	r0 = M[r9 + 4];
    call $cbuffer.get_read_address_and_size_and_start_address;
8420268a:	ff fd bd f1 	call (m) 0x3a27a;
8420268e:	31 ef 
    push r2;
84202690:	00 f0 34 cf 	push r2;
    pop B0;
84202694:	00 f6 3a cf 	pop B0;
    I0 = r0;
84202698:	10 0a       	I0 = r0 + Null;
    L0 = r1;
8420269a:	1c 0b       	L0 = r1 + Null;

    // Get cbuffer details for DM2 input
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_EXT_IP_FIELD];
8420269c:	b2 f0 06 88 	r0 = M[r9 + 24];
    call $cbuffer.get_read_address_and_size_and_start_address;
842026a0:	ff fd bd f1 	call (m) 0x3a27a;
842026a4:	3b ee 
    push r2;
842026a6:	00 f0 34 cf 	push r2;
    pop B4;
842026aa:	00 f6 3c cf 	pop B4;
    I4 = r0;
842026ae:	14 0a       	I4 = r0 + Null;
    L4 = r1;
842026b0:	1e 0b       	L4 = r1 + Null;

    r10 = r1 ASHIFT -LOG2_ADDR_PER_WORD;
842026b2:	7f f3 1c c9 	r10 = r1 ASHIFT -2;

    r3 = 0;
842026b6:	05 00       	r3 = Null + Null;
    r5 = $M.AANC.FLAGS.CLIPPING_INT;
842026b8:	07 f0 00 41 	r5 = Null + 256;
    r6 = $M.AANC.FLAGS.CLIPPING_EXT;
842026bc:	08 f0 00 42 	r6 = Null + 512;

    r7 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.INT_PEAK_VALUE_FIELD];
842026c0:	b9 f0 15 88 	r7 = M[r9 + 84];
    r8 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.EXT_PEAK_VALUE_FIELD];
842026c4:	ba f0 14 88 	r8 = M[r9 + 80];

    do detect_mic_clipping;
842026c8:	11 4c       	do (m) $M.aanc_proc.clipping_peak_detect.detect_mic_clipping;
        r0 = M[I0, MK1], r2 = M[I4, MK1];
842026ca:	41 f1 32 d0 	Null = Null + Null, r0 = M[I0,4], r2 = M[I4,4];
        r0 = ABS r0; // r0 = Int Mic (I0)
842026ce:	4f f2 42 ce 	r0 = ABS r0;
        r7 = MAX r0; // Peak detect int mic
842026d2:	6f f2 49 ce 	r7 = MAX r0;
        r2 = ABS r2; // r2 = Ext Mic (I4)
842026d6:	4f f4 44 ce 	r2 = ABS r2;
        r8 = MAX r2; // Peak detect ext mic
842026da:	6f f4 4a ce 	r8 = MAX r2;
        Null = r0 - r4;
842026de:	90 05       	Null = r0 - r4;
        if GE r3 = r3 OR r5;
842026e0:	7a f5 45 c8 	if GE r3 = r3 OR r5;
        Null = r2 - r4;
842026e4:	a0 05       	Null = r2 - r4;
        if GE r3 = r3 OR r6;
842026e6:	8a f5 45 c8 	if GE r3 = r3 OR r6;

842026ea <$M.aanc_proc.clipping_peak_detect.detect_mic_clipping>:
    detect_mic_clipping:

    M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.INT_PEAK_VALUE_FIELD] = r7;
842026ea:	b9 f0 15 8e 	M[r9 + 84] = r7;
    M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.EXT_PEAK_VALUE_FIELD] = r8;
842026ee:	ba f0 14 8e 	M[r9 + 80] = r8;

    // Do clipping and peak detect on the playback channel
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_PLAYBACK_IP_FIELD];
842026f2:	b2 f0 20 88 	r0 = M[r9 + 128];
    if Z jump done_detection;
842026f6:	1c 60       	if EQ jump (m) $M.aanc_proc.clipping_peak_detect.done_detection;

    call $cbuffer.get_read_address_and_size_and_start_address;
842026f8:	ff fd bd f1 	call (m) 0x3a27a;
842026fc:	23 ec 
    push r2;
842026fe:	00 f0 34 cf 	push r2;
    pop B0;
84202702:	00 f6 3a cf 	pop B0;
    I0 = r0;
84202706:	10 0a       	I0 = r0 + Null;
    L0 = r1;
84202708:	1c 0b       	L0 = r1 + Null;

    r10 = r1 ASHIFT -LOG2_ADDR_PER_WORD;
8420270a:	7f f3 1c c9 	r10 = r1 ASHIFT -2;
    r5 = $M.AANC.FLAGS.CLIPPING_PLAYBACK;
8420270e:	07 f0 00 48 	r5 = Null + 1024;
    r7 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.PB_PEAK_VALUE_FIELD];
84202712:	b9 f0 16 88 	r7 = M[r9 + 88];
    do detect_pb_clipping;
84202716:	0a 4c       	do (m) $M.aanc_proc.clipping_peak_detect.detect_pb_clipping;
        r0 = M[I0, MK1];
84202718:	21 f0 30 c0 	Null = Null + Null, r0 = M[I0,4];
        r0 = ABS r0; // r0 = Playback (I0)
8420271c:	4f f2 42 ce 	r0 = ABS r0;
        r7 = MAX r0; // Peak detect playback signal
84202720:	6f f2 49 ce 	r7 = MAX r0;
        Null = r0 - r4;
84202724:	90 05       	Null = r0 - r4;
        if GE r3 = r3 OR r5;
84202726:	7a f5 45 c8 	if GE r3 = r3 OR r5;

8420272a <$M.aanc_proc.clipping_peak_detect.detect_pb_clipping>:
    detect_pb_clipping:

    M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.PB_PEAK_VALUE_FIELD] = r7;
8420272a:	b9 f0 16 8e 	M[r9 + 88] = r7;

8420272e <$M.aanc_proc.clipping_peak_detect.done_detection>:

done_detection:
    POP_ALL_C; // POP_ALL_C won't touch r0-r3
8420272e:	70 ff 60 e4 	popm <M0, M1, M2, L0, L1, L4, L5>;
84202732:	07 f0 67 e4 	popm <I0, I1, I2, I4, I5, I6>;
84202736:	fc fa 60 e0 	popm <r4, r5, r6, r7, r8, r9, rLink, rMACB>;
    r0 = r3;   // Set return value after POP to remove pop rlink-rts stall
8420273a:	2a 00       	r0 = r3 + Null;

    rts;
8420273c:	d8 4c       	rts;

8420273e <$_aanc_proc_calc_gain_db>:
.MODULE $M.aanc_proc.calc_gain_db;
    .CODESEGMENT PM;

$_aanc_proc_calc_gain_db:

    pushm <r6, rLink>;
8420273e:	90 1c       	pushm <r6, rLink>;

    Null = r0;
84202740:	10 00       	Null = r0 + Null;
    if Z jump return_early;
84202742:	11 60       	if EQ jump (m) $M.aanc_proc.calc_gain_db.return_early;
    // r1 stores coarse gain. If coarse gain > 8, coarse gain = coarse gain - 16
    r2 = r1 - $aanc_proc.CHECK_COARSE_GAIN_SIGN;
84202744:	1c 26       	r2 = r1 - 8;
    if LE jump calc_fine_gain_db;
84202746:	02 6c       	if LE jump (m) $M.aanc_proc.calc_gain_db.calc_fine_gain_db;
    r1 = r1 - $aanc_proc.MAX_COARSE_GAIN;
84202748:	1b 2c       	r1 = r1 - 16;

8420274a <$M.aanc_proc.calc_gain_db.calc_fine_gain_db>:

calc_fine_gain_db:
    rMAC = r0; // Copy fine gain to rMAC, in Q40.32    
8420274a:	11 00       	rMAC = r0 + Null;
    r3 = r1 * $aanc_proc.COARSE_GAIN_TO_DB (int); // Store coarse gain dB value in r3
8420274c:	9d 41       	r3 = r1 * 6 (int);
    
    // Fine gain measured relative to 128, so needs to be scaled by 2^-7
    // log2_table takes input (rMAC) in Q9.63, so shift rMAC by 63-32-7=24
    rMAC = rMAC ASHIFT $aanc_proc.FINE_GAIN_LOG2_SHIFT_AMT (72bit);
8420274e:	49 5f       	rMAC = rMAC ASHIFT 24 (56bit);
    r3 = r3 ASHIFT $aanc_proc.COARSE_GAIN_DB_SHIFT_AMT; // Coarse gain (dB) in Q12.20
84202750:	ed 5e       	r3 = r3 ASHIFT 20;
         
    call $math.log2_table;
84202752:	ff fd 8f f3 	call 0x745ac;
84202756:	3a e2 
    
    // Convert to dB by using multiplying factor of 20/log2(10) 
    rMAC = r0 * $aanc_proc.LOG2_TO_DB_CONV_FACTOR; 
84202758:	02 f3 30 fa 	rMAC = r0 * 0.376287494786083698272705078125 (SS);
8420275c:	4a f2 d1 cc 
    r0 = rMAC + r3; // Add coarse gain (dB) and fine gain (dB)
84202760:	4a 01       	r0 = rMAC + r3;
    jump return_db_gain;
84202762:	04 6e       	jump (m) $M.aanc_proc.calc_gain_db.return_db_gain;

84202764 <$M.aanc_proc.calc_gain_db.return_early>:

return_early:
    r0 = MININT;
84202764:	00 f8 02 f0 	r0 = Null + -2147483648;
84202768:	00 40 

8420276a <$M.aanc_proc.calc_gain_db.return_db_gain>:

return_db_gain:    
    popm <r6, rLink>;
8420276a:	90 48       	popm <r6, rLink>;

    rts;
8420276c:	d8 4c       	rts;
